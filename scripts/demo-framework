#!/bin/bash

# Demo script for the Advanced Component Framework
# Shows the new capabilities and features

# Source helper functions and variables
HELPER_SCRIPT_PATH="$(dirname "${BASH_SOURCE[0]}")/helpers.sh"
if [ -f "$HELPER_SCRIPT_PATH" ]; then
  # shellcheck source=./helpers.sh
  source "$HELPER_SCRIPT_PATH"
else
  echo "ERROR: helpers.sh not found at $HELPER_SCRIPT_PATH"
  exit 1
fi

# Set script-specific log level
SCRIPT_LOG_LEVEL=$_LOG_LEVEL_INFO
export SCRIPT_LOG_LEVEL

cat << 'EOF'
🚀 OrangeAd Advanced Component Framework Demo
=============================================

This demo showcases the new advanced capabilities implemented in Phase 3:

✅ Advanced Component Framework Features:
   - Automatic dependency resolution
   - Conflict detection and prevention  
   - Component compatibility validation
   - Resource requirement analysis
   - Health checking and status reporting
   - Comprehensive execution modes

🎯 Available Demonstration Scenarios:

1. DEPENDENCY RESOLUTION
   Command: ./run-component staging macos-tracker --dry-run
   Shows: Automatic resolution of dependencies (base-system → python → macos-api → macos-tracker)

2. CONFLICT DETECTION  
   Command: ./run-component staging macos-tracker alpr --dry-run
   Shows: Detection of camera access conflict between tracker and ALPR

3. COMPATIBILITY VALIDATION
   Command: ./run-component staging ubuntu-docker macos-api --dry-run
   Shows: Platform compatibility error (Ubuntu component on macOS)

4. RESOURCE ANALYSIS
   Command: ./run-component staging macos-api macos-tracker --dry-run
   Shows: Total resource requirements calculation (memory, disk, ports)

5. EXECUTION MODES
   Commands:
   - ./run-component staging macos-api --dry-run     # Show what would happen
   - ./run-component staging macos-api --check       # Validate configuration
   - ./run-component staging macos-api --force       # Skip confirmations

6. HEALTH MONITORING
   Command: ./run-component staging macos-api --verbose
   Shows: Component health status and monitoring capabilities

📋 Usage Examples:

# Basic deployment with dependency resolution
./run-component staging macos-tracker

# Dry-run mode to preview changes
./run-component staging macos-api macos-tracker --dry-run

# Check mode for validation only
./run-component staging macos-api --check --verbose

# Force deployment without confirmations
./run-component production macos-api --force

🔧 Advanced Framework Components:

• tasks/component-framework.yml       - Core dependency resolution
• tasks/component-compatibility.yml   - Compatibility validation matrix
• tasks/execution-modes.yml          - Advanced execution capabilities
• tasks/resolve-single-component.yml - Recursive dependency resolver
• playbooks/universal.yml            - Updated with framework integration
• scripts/run-component              - Enhanced with new capabilities

🏗️  Architecture Benefits:

1. SAFETY: Comprehensive validation prevents incompatible deployments
2. EFFICIENCY: Smart dependency resolution avoids redundant operations  
3. FLEXIBILITY: Multiple execution modes support different use cases
4. RELIABILITY: Health monitoring ensures successful deployments
5. USABILITY: Clear error messages and progress reporting

EOF

log_info "Demo information displayed above"
log_info "Try running any of the example commands to see the framework in action!"
log_info "All commands use --dry-run by default for safety"

exit 0