#!/bin/bash

# Source helper functions and variables
HELPER_SCRIPT_PATH="$(dirname "${BASH_SOURCE[0]}")/helpers.sh"
if [ -f "$HELPER_SCRIPT_PATH" ]; then
  # shellcheck source=./helpers.sh
  source "$HELPER_SCRIPT_PATH"
else
  echo "ERROR: helpers.sh not found at $HELPER_SCRIPT_PATH"
  exit 1
fi

# Set script-specific log level
SCRIPT_LOG_LEVEL=$_LOG_LEVEL_DEBUG
export SCRIPT_LOG_LEVEL

log_debug "oassh script started."
ensure_ansible_root_dir
check_vault_password_file # Checks for vault password file

# Check for required commands
check_ansible_vault_installed
check_yq_installed
check_ssh_installed

# Display usage information
show_usage() {
  echo "Usage: $(basename "$0") [options] [hostname]"
  echo "Options:"
  echo "  -h, --help     Show this help message"
  echo "  -l, --list     List all available hosts"
  echo "  -i INVENTORY   Specify inventory (staging or production)"
  echo "  -v, --verbose  Enable verbose output"
  echo ""
  echo "Examples:"
  echo "  $(basename "$0") b3              # Connect to host matching 'b3' (e.g., mac-mini-b3)"
  echo "  $(basename "$0") -i staging b3   # Connect to 'b3' in staging inventory"
  echo "  $(basename "$0") -l              # List all available hosts"
  echo "  $(basename "$0")                 # Interactive mode (legacy behavior)"
  exit 0
}

# Function to list all available hosts is now in helpers.sh

# Function to find a host by name is now in helpers.sh

# Legacy function for interactive host selection is now replaced by the common function in helpers.sh

# --- Main Script ---

# Parse command-line arguments
SPECIFIED_INVENTORY=""
VERBOSE=false
HOST_NAME=""
SHOW_HELP=false
LIST_HOSTS=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      SHOW_HELP=true
      shift
      ;;
    -l|--list)
      LIST_HOSTS=true
      shift
      ;;
    -i)
      if [[ -n "$2" && "$2" != -* ]]; then
        SPECIFIED_INVENTORY="$2"
        if [[ "$SPECIFIED_INVENTORY" != "staging" && "$SPECIFIED_INVENTORY" != "production" ]]; then
          log_error "Invalid inventory: $SPECIFIED_INVENTORY. Must be 'staging' or 'production'."
          exit 1
        fi
        shift 2
      else
        log_error "Option -i requires an argument."
        exit 1
      fi
      ;;
    -v|--verbose)
      VERBOSE=true
      SCRIPT_LOG_LEVEL=$_LOG_LEVEL_DEBUG
      export SCRIPT_LOG_LEVEL
      shift
      ;;
    *)
      if [[ -z "$HOST_NAME" ]]; then
        HOST_NAME="$1"
        shift
      else
        # All remaining arguments are passed to SSH
        break
      fi
      ;;
  esac
done

# Show help if requested
if [ "$SHOW_HELP" = true ]; then
  show_usage
fi

# List hosts if requested
if [ "$LIST_HOSTS" = true ]; then
  list_all_hosts
  exit 0
fi

# Determine how to find the host
if [ -n "$HOST_NAME" ]; then
  # Use hostname provided as argument
  if ! find_host_by_name "$HOST_NAME" "$SPECIFIED_INVENTORY" true; then
    log_error "Could not find host matching '$HOST_NAME'. Use -l to list available hosts."
    exit 1
  fi
else
  # Use interactive mode if no hostname provided
  if ! select_target_host true; then
    log_error "Host selection failed. Exiting oassh."
    exit 1
  fi
fi

# Prepare SSH connection
VAULT_FILE_PATH="$OA_ANSIBLE_GROUP_VARS_DIR/all/vault.yml"
log_debug "Attempting to view vault file: $VAULT_FILE_PATH"

DECRYPTED_VAULT_CONTENT=$(ansible-vault view "$VAULT_FILE_PATH" --vault-password-file "$OA_ANSIBLE_VAULT_PASSWORD_FILE")
if [ $? -ne 0 ]; then
  log_error "Failed to decrypt vault file: $VAULT_FILE_PATH"
  exit 1
fi
log_debug "Vault file decrypted successfully."

PRIVATE_KEY_CONTENT=$(echo "$DECRYPTED_VAULT_CONTENT" | yq -r '.vault_ssh_private_key')
if [ -z "$PRIVATE_KEY_CONTENT" ] || [ "$PRIVATE_KEY_CONTENT" == "null" ]; then
  log_error "Failed to extract 'vault_ssh_private_key' from vault content."
  log_debug "Vault content was: $DECRYPTED_VAULT_CONTENT"
  exit 1
fi
log_debug "Private key extracted from vault."

# Create a temporary file for the private key
TMP_KEY_PATH=$(mktemp "/tmp/oassh_privkey.XXXXXX")
if [ -z "$TMP_KEY_PATH" ]; then
  log_error "Failed to create temporary file for private key."
  exit 1
fi
log_debug "Temporary private key file created at $TMP_KEY_PATH"

# Set strict permissions and write key
chmod 600 "$TMP_KEY_PATH"
echo -E "$PRIVATE_KEY_CONTENT" >"$TMP_KEY_PATH" # Use -E to prevent backslash interpretation if key has them.
if [ $? -ne 0 ]; then
  log_error "Failed to write private key to temporary file: $TMP_KEY_PATH"
  rm -f "$TMP_KEY_PATH" # Clean up
  exit 1
fi

# Set up a trap to ensure the temporary key file is deleted on exit
trap 'log_debug "Cleaning up temporary private key file: $TMP_KEY_PATH"; rm -f "$TMP_KEY_PATH"' EXIT INT TERM

log_info "Connecting to $TARGET_CONNECT_USER@$TARGET_CONNECT_HOST on port $TARGET_CONNECT_PORT..."
log_debug "SSH command: ssh -i \"$TMP_KEY_PATH\" -p \"$TARGET_CONNECT_PORT\" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \"$TARGET_CONNECT_USER@$TARGET_CONNECT_HOST\" ${*}"

# Pass any additional arguments from oassh script to ssh
ssh -i "$TMP_KEY_PATH" -p "$TARGET_CONNECT_PORT" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "$TARGET_CONNECT_USER@$TARGET_CONNECT_HOST" "${@}"
SSH_EXIT_CODE=$?

# Explicitly remove the temp file and clear the trap if SSH exits
log_debug "SSH command finished with exit code: $SSH_EXIT_CODE"
rm -f "$TMP_KEY_PATH"
trap - EXIT INT TERM # Clear the trap

log_debug "oassh script finished."
exit $SSH_EXIT_CODE
