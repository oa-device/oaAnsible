#!/bin/bash

# Deploy Ubuntu Server Script
# This script runs the Ubuntu server onboarding playbook

set -e

# Source helper functions and variables
HELPER_SCRIPT_PATH="$(dirname "${BASH_SOURCE[0]}")/helpers.sh"
if [ -f "$HELPER_SCRIPT_PATH" ]; then
  # shellcheck source=./helpers.sh
  source "$HELPER_SCRIPT_PATH"
else
  echo "ERROR: helpers.sh not found at $HELPER_SCRIPT_PATH"
  exit 1
fi

# Set script-specific log level
SCRIPT_LOG_LEVEL=$_LOG_LEVEL_INFO
export SCRIPT_LOG_LEVEL

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ANSIBLE_DIR="$(dirname "$SCRIPT_DIR")"
PLAYBOOK="$ANSIBLE_DIR/playbooks/onboard-ubuntu-server.yml"
INVENTORY_DIR="$ANSIBLE_DIR/inventory"
VAULT_PASSWORD_FILE="$OA_ANSIBLE_VAULT_PASSWORD_FILE"

# Use helper functions from helpers.sh for logging
log_debug "deploy-server script started."
ensure_ansible_root_dir

usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Deploy Ubuntu Server Onboarding Playbook

OPTIONS:
    -e, --environment ENV    Environment to deploy to (staging, pre-prod, production)
    -h, --host HOST         Target host IP or hostname
    -u, --user USER         SSH user for initial connection (auto-determined from inventory if not specified)
    -t, --tags TAGS         Ansible tags to run (comma-separated)
    -c, --check             Run in check mode (dry run)
    -v, --verbose           Verbose output
    --help                  Show this help message

EXAMPLES:
    $0 -e staging -h 192.168.1.100
    $0 -e staging -h 192.168.1.100 -u admin -t base,security
    $0 -e staging -h 192.168.1.100 --check
    $0 -e staging -h 192.168.1.100 -v

NOTE: SSH user is automatically determined from inventory. For kampus-rig, it will use 'kai'.

EOF
}

# Default values
ENVIRONMENT=""
TARGET_HOST=""
SSH_USER=""  # Will be determined from inventory
ANSIBLE_TAGS=""
CHECK_MODE=""
VERBOSE=""

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -e|--environment)
            ENVIRONMENT="$2"
            shift 2
            ;;
        -h|--host)
            TARGET_HOST="$2"
            shift 2
            ;;
        -u|--user)
            SSH_USER="$2"
            shift 2
            ;;
        -t|--tags)
            ANSIBLE_TAGS="$2"
            shift 2
            ;;
        -c|--check)
            CHECK_MODE="--check"
            shift
            ;;
        -v|--verbose)
            VERBOSE="-vvv"
            shift
            ;;
        --help)
            usage
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Validate required arguments
if [[ -z "$ENVIRONMENT" ]]; then
    log_error "Environment is required (-e/--environment)"
    usage
    exit 1
fi

if [[ -z "$TARGET_HOST" ]]; then
    log_error "Target host is required (-h/--host)"
    usage
    exit 1
fi

# Validate environment
if [[ ! -d "$INVENTORY_DIR/$ENVIRONMENT" ]]; then
    log_error "Environment '$ENVIRONMENT' not found in inventory"
    exit 1
fi

# Check for required dependencies using helper functions
check_vault_password_file
check_yq_installed
check_ansible_vault_installed
check_ansible_installed

# --- SSH Agent Key Loading ---
log_info "Checking and loading SSH key into agent for deployment..."

# Ensure ssh-agent is running for this script's execution context
if ! ssh-add -l >/dev/null 2>&1; then
  log_info "ssh-agent not running or no keys loaded. Starting agent..."
  eval "$(ssh-agent -s)" >/dev/null
  if [ $? -ne 0 ]; then
    log_error "Failed to start ssh-agent. Please start it manually."
    exit 1
  fi
fi

# Variables from helpers.sh
VAULT_YML_FILE="$OA_ANSIBLE_GROUP_VARS_DIR/all/vault.yml"

log_info "Attempting to add SSH private key from Ansible Vault to ssh-agent..."
if ansible-vault view "$VAULT_YML_FILE" --vault-password-file "$OA_ANSIBLE_VAULT_PASSWORD_FILE" |
  yq -re '.vault_ssh_private_key // ""' |
  ssh-add - >/dev/null 2>&1; then
  log_info "SSH key from vault successfully added/verified in ssh-agent."
else
  if ssh-add -l >/dev/null 2>&1; then
    log_warn "Could not add key (it might already be loaded, or requires a passphrase). An identity is present in the agent."
  else
    log_error "Failed to add SSH key from vault to ssh-agent AND no keys are present in the agent. SSH authentication for Ansible might fail."
    log_error "Make sure 'vault_ssh_private_key' exists in '$VAULT_YML_FILE' and is a valid private key."
    exit 1
  fi
fi
# --- End SSH Agent Key Loading ---

# Auto-determine SSH user and hostname from inventory if not provided
if [[ -z "$SSH_USER" ]]; then
    log_info "Determining SSH user and hostname from inventory..."
    
    # Search in ubuntu_servers group first (by hostname or IP)
    UBUNTU_RESULT=$(yq e ".all.children.ubuntu_servers.hosts | to_entries | .[] | select(.key == \"$TARGET_HOST\" or .value.ansible_host == \"$TARGET_HOST\")" "$INVENTORY_DIR/$ENVIRONMENT/hosts.yml")
    if [[ -n "$UBUNTU_RESULT" ]] && [[ "$UBUNTU_RESULT" != "null" ]]; then
        SSH_USER=$(echo "$UBUNTU_RESULT" | yq e '.value.ansible_user' -)
        TARGET_HOST_ALIAS=$(echo "$UBUNTU_RESULT" | yq e '.key' -)
        TARGET_HOST_IP=$(echo "$UBUNTU_RESULT" | yq e '.value.ansible_host' -)
        log_info "Found SSH user '$SSH_USER' and hostname '$TARGET_HOST_ALIAS' in ubuntu_servers group"
    else
        # Search in macos group as fallback (by hostname or IP)
        MACOS_RESULT=$(yq e ".all.children.macos.hosts | to_entries | .[] | select(.key == \"$TARGET_HOST\" or .value.ansible_host == \"$TARGET_HOST\")" "$INVENTORY_DIR/$ENVIRONMENT/hosts.yml")
        if [[ -n "$MACOS_RESULT" ]] && [[ "$MACOS_RESULT" != "null" ]]; then
            SSH_USER=$(echo "$MACOS_RESULT" | yq e '.value.ansible_user' -)
            TARGET_HOST_ALIAS=$(echo "$MACOS_RESULT" | yq e '.key' -)
            TARGET_HOST_IP=$(echo "$MACOS_RESULT" | yq e '.value.ansible_host' -)
            log_info "Found SSH user '$SSH_USER' and hostname '$TARGET_HOST_ALIAS' in macos group"
        else
            SSH_USER="ubuntu"  # fallback default
            TARGET_HOST_ALIAS="$TARGET_HOST"  # use provided target as fallback
            TARGET_HOST_IP="$TARGET_HOST"  # assume target is IP if not found
            log_warn "Could not determine SSH user from inventory, using default: $SSH_USER"
        fi
    fi
fi

# Build ansible-playbook command
ANSIBLE_CMD="ansible-playbook"
ANSIBLE_ARGS=()

# Add inventory directory (not just hosts file)
ANSIBLE_ARGS+=("-i" "$INVENTORY_DIR/$ENVIRONMENT")

# Add vault password file
ANSIBLE_ARGS+=("--vault-password-file" "$VAULT_PASSWORD_FILE")

# Add extra vars for target host (use hostname, not IP)
ANSIBLE_ARGS+=("-e" "target_host=$TARGET_HOST_ALIAS")
# Note: Don't override ansible_user here - let inventory configuration handle it

# Add tags if specified
if [[ -n "$ANSIBLE_TAGS" ]]; then
    ANSIBLE_ARGS+=("--tags" "$ANSIBLE_TAGS")
fi

# Add check mode if specified
if [[ -n "$CHECK_MODE" ]]; then
    ANSIBLE_ARGS+=("$CHECK_MODE")
fi

# Add verbose if specified
if [[ -n "$VERBOSE" ]]; then
    ANSIBLE_ARGS+=("$VERBOSE")
fi

# Add the playbook
ANSIBLE_ARGS+=("$PLAYBOOK")

# Display configuration
log_info "Ubuntu Server Deployment Configuration:"
log_info "  Environment: $ENVIRONMENT"
if [[ "$TARGET_HOST_ALIAS" != "$TARGET_HOST_IP" ]]; then
    log_info "  Target Host: $TARGET_HOST_ALIAS ($TARGET_HOST_IP)"
else
    log_info "  Target Host: $TARGET_HOST_ALIAS"
fi
log_info "  SSH User: $SSH_USER"
log_info "  Playbook: $PLAYBOOK"
if [[ -n "$ANSIBLE_TAGS" ]]; then
    log_info "  Tags: $ANSIBLE_TAGS"
fi
if [[ -n "$CHECK_MODE" ]]; then
    log_warn "  Running in CHECK MODE (dry run)"
fi

echo

# Change to ansible directory
cd "$ANSIBLE_DIR"

# Run pre-flight checks
log_info "Running pre-flight checks..."

# Check if target host is reachable (use IP for connectivity tests)
CONNECT_TARGET="${TARGET_HOST_IP:-$TARGET_HOST}"
if ! ping -c 1 "$CONNECT_TARGET" &> /dev/null; then
    log_warn "Target host $CONNECT_TARGET is not reachable via ping"
    log_info "Continuing anyway (host might not respond to ping)"
fi

# Test SSH connectivity
log_info "Testing SSH connectivity to $CONNECT_TARGET..."
if ssh -o ConnectTimeout=10 -o BatchMode=yes "$SSH_USER@$CONNECT_TARGET" "echo 'SSH connection successful'" 2>/dev/null; then
    log_info "SSH connection to $CONNECT_TARGET successful"
else
    log_error "SSH connection to $CONNECT_TARGET failed"
    log_info "Please ensure:"
    log_info "  1. The target host is accessible"
    log_info "  2. SSH keys are properly configured"
    log_info "  3. The SSH user '$SSH_USER' exists on the target host"
    exit 1
fi

# Run the playbook
log_info "Running Ubuntu server onboarding playbook..."
log_info "Using vault-encrypted passwords, no prompting required."
echo

# Load SSH key from vault for deployment
load_ssh_key_from_vault "Ubuntu server deployment"

# Use ANSIBLE_CONFIG like other scripts
ANSIBLE_CONFIG=ansible.cfg "$ANSIBLE_CMD" "${ANSIBLE_ARGS[@]}"
PLAYBOOK_EXIT_CODE=$?

if [ $PLAYBOOK_EXIT_CODE -eq 0 ]; then
    echo
    log_info "Ubuntu server onboarding completed successfully!"
    log_info "Server $TARGET_HOST is now ready for use in the OrangeAd infrastructure"
else
    echo
    log_error "Ubuntu server onboarding failed!"
    log_info "Please check the output above for errors"
fi

log_debug "deploy-server script finished."
exit $PLAYBOOK_EXIT_CODE