#!/bin/bash

# onboard-ubuntu - One-Command Ubuntu Machine Onboarding
# Part of oaAnsible: Streamlined Ubuntu server setup and configuration
# Usage: ./scripts/onboard-ubuntu [target] [profile] [options]

set -e

# Get script directory and source helpers
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/helpers.sh"

# Ensure we're in the correct directory
ensure_ansible_root_dir

# Default configuration
DEFAULT_PROFILE="server"
VALID_PROFILES=("server" "ml" "development" "minimal")
DRY_RUN=false
FORCE_MODE=false
INTERACTIVE_MODE=true
TARGET_HOST=""
PROFILE="$DEFAULT_PROFILE"
SKIP_PREFLIGHT=false

show_usage() {
    echo "Usage: $0 [target] [options]"
    echo ""
    echo "🚀 One-Command Ubuntu Machine Onboarding"
    echo ""
    echo "This script provides intelligent, progressive Ubuntu server setup with"
    echo "automatic detection, validation, and configuration."
    echo ""
    echo "Arguments:"
    echo "  target           - Target host (IP, hostname, or inventory alias)"
    echo "                    Leave blank for interactive selection"
    echo ""
    echo "Options:"
    echo "  -p, --profile PROFILE   Server profile: server, ml, development, minimal"
    echo "                         (default: $DEFAULT_PROFILE)"
    echo "  --dry-run              Preview changes without executing"
    echo "  --force                Skip confirmations and safety checks"
    echo "  --no-interactive       Non-interactive mode (use defaults)"
    echo "  --skip-preflight       Skip pre-flight system checks"
    echo "  -v, --verbose          Verbose output for debugging"
    echo "  -h, --help             Show this help message"
    echo ""
    echo "📋 Server Profiles:"
    echo "  server        - Production server (base + security + optimization + network)"
    echo "  ml            - ML workstation (server + python + nvidia + ml_workstation)"
    echo "  development   - Development server (server + docker + additional tools)"
    echo "  minimal       - Minimal setup (base + security only)"
    echo ""
    echo "🎯 Usage Examples:"
    echo "  $0                                  # Interactive mode"
    echo "  $0 192.168.1.100                   # Direct IP onboarding"
    echo "  $0 kampus-rig                      # Known host from inventory"
    echo "  $0 192.168.1.100 --profile ml      # ML workstation setup"
    echo "  $0 server-01 --dry-run             # Preview changes"
    echo "  $0 192.168.1.100 --force --profile server # Automated server setup"
    echo ""
    echo "🔍 Available Inventories:"
    discover_inventories | sed 's/^/  📁 /'
    echo ""
    echo "💡 Pro Tips:"
    echo "  • Run with --dry-run first to preview changes"
    echo "  • Use 'ml' profile for GPU-enabled ML workstations"
    echo "  • The script automatically detects existing configurations"
    echo "  • All operations are idempotent - safe to run multiple times"
}

# Profile configuration
get_profile_components() {
    local profile="$1"
    case "$profile" in
        "server")
            echo "base,security,shell,optimization,network,tailscale,monitoring"
            ;;
        "ml")
            echo "base,security,shell,optimization,network,tailscale,python,nvidia,ml_workstation,monitoring"
            ;;
        "development")
            echo "base,security,shell,optimization,network,tailscale,docker,monitoring"
            ;;
        "minimal")
            echo "base,security"
            ;;
        *)
            log_error "Unknown profile: $profile"
            log_error "Valid profiles: ${VALID_PROFILES[*]}"
            exit 1
            ;;
    esac
}

get_profile_description() {
    local profile="$1"
    case "$profile" in
        "server")
            echo "Production server with full security, optimization, and monitoring"
            ;;
        "ml")
            echo "ML workstation with GPU support, Python environment, and training tools"
            ;;
        "development")
            echo "Development server with Docker and additional development tools"
            ;;
        "minimal")
            echo "Minimal setup with just base system and security hardening"
            ;;
        *)
            echo "Unknown profile"
            ;;
    esac
}

# Pre-flight checks
run_preflight_checks() {
    local target_host="$1"
    
    log_info "🔍 Running pre-flight system checks..."
    
    # Check connectivity
    log_info "Testing SSH connectivity to $target_host..."
    if ! ssh -o ConnectTimeout=10 -o BatchMode=yes -o StrictHostKeyChecking=no "$target_host" "echo 'Connection successful'" >/dev/null 2>&1; then
        log_error "Cannot connect to $target_host via SSH"
        log_error "Please ensure:"
        log_error "  • SSH access is configured"
        log_error "  • Your SSH key is installed on the target"
        log_error "  • The target host is accessible"
        return 1
    fi
    
    # Check OS compatibility
    log_info "Checking OS compatibility..."
    local os_info
    os_info=$(ssh -o StrictHostKeyChecking=no "$target_host" "lsb_release -d 2>/dev/null || echo 'OS detection failed'")
    if [[ ! "$os_info" =~ Ubuntu ]]; then
        log_error "Target system is not Ubuntu:"
        log_error "$os_info"
        log_error "This script is designed for Ubuntu systems only"
        return 1
    fi
    log_info "✅ OS Check: $os_info"
    
    # Check sudo access
    log_info "Verifying sudo access..."
    if ! ssh -o StrictHostKeyChecking=no "$target_host" "sudo -n true" >/dev/null 2>&1; then
        log_warn "Passwordless sudo not configured - you may be prompted for passwords"
    else
        log_info "✅ Passwordless sudo access confirmed"
    fi
    
    # System information gathering
    log_info "Gathering system information..."
    local cpu_count memory_gb disk_space
    cpu_count=$(ssh -o StrictHostKeyChecking=no "$target_host" "nproc")
    memory_gb=$(ssh -o StrictHostKeyChecking=no "$target_host" "free -g | awk '/^Mem:/{print \$2}'")
    disk_space=$(ssh -o StrictHostKeyChecking=no "$target_host" "df -h / | tail -1 | awk '{print \$4}'")
    
    log_info "✅ System Resources:"
    log_info "   CPU Cores: $cpu_count"
    log_info "   Memory: ${memory_gb}GB"
    log_info "   Available Disk: $disk_space"
    
    # GPU detection for ML profile
    if [ "$PROFILE" == "ml" ]; then
        log_info "ML profile selected - checking for NVIDIA GPU..."
        local gpu_info
        gpu_info=$(ssh -o StrictHostKeyChecking=no "$target_host" "lspci | grep -i nvidia || echo 'No NVIDIA GPU detected'")
        if [[ "$gpu_info" =~ "No NVIDIA GPU detected" ]]; then
            log_warn "No NVIDIA GPU detected, but ML profile selected"
            log_warn "GPU-specific components will be skipped"
        else
            log_info "✅ GPU Detected: $gpu_info"
        fi
    fi
    
    log_info "✅ Pre-flight checks completed successfully"
    return 0
}

# Create temporary inventory for target host
create_temp_inventory() {
    local target_host="$1"
    local profile="$2"
    local temp_inventory_path="/tmp/onboard-ubuntu-$$.yml"
    
    log_info "Creating temporary inventory for $target_host..."
    
    # Determine user - try common usernames
    local ssh_user="ubuntu"
    for user in "ubuntu" "kai" "admin" "user" "$USER"; do
        if ssh -o ConnectTimeout=5 -o BatchMode=yes -o StrictHostKeyChecking=no "${user}@${target_host}" "echo 'test'" >/dev/null 2>&1; then
            ssh_user="$user"
            break
        fi
    done
    
    cat > "$temp_inventory_path" << EOF
---
# Temporary inventory for Ubuntu onboarding
# Generated by onboard-ubuntu script
all:
  vars:
    # Environment identification
    target_env: "onboarding"
    environment: "onboarding"
    project_name: "ubuntu-onboarding"
    
    # Ansible configuration
    ansible_python_interpreter: "/usr/bin/python3"
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
    
    # Tailscale configuration
    tailscale_auth_key: "{{ vault_tailscale_auth_key }}"
    tailscale_enable_ssh: true
    tailscale_advertise_routes:
      - "192.168.1.0/24"
    tailscale_tags:
      - "tag:oa-ubuntu"
      - "tag:oa-onboarding"
    
    # Platform configuration
    platform_type: "ubuntu"
    deployment_mode: "$profile"
    
    # Profile-specific configuration
    configure:
      base: true
      security: true
      shell: true
      optimization: $([ "$profile" != "minimal" ] && echo "true" || echo "false")
      network: $([ "$profile" != "minimal" ] && echo "true" || echo "false")
      tailscale: $([ "$profile" != "minimal" ] && echo "true" || echo "false")
      docker: $([ "$profile" == "development" ] && echo "true" || echo "false")
      python: $([ "$profile" == "ml" ] && echo "true" || echo "false")
      nvidia: $([ "$profile" == "ml" ] && echo "true" || echo "false")
      ml_workstation: $([ "$profile" == "ml" ] && echo "true" || echo "false")
      monitoring: $([ "$profile" != "minimal" ] && echo "true" || echo "false")

  children:
    ubuntu_servers:
      hosts:
        onboard-target:
          ansible_host: "$target_host"
          ansible_user: "$ssh_user"
          ansible_port: 22
          
          # Host configuration
          host_description: "Ubuntu machine being onboarded"
          host_profile: "$profile"
          onboarding_timestamp: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          
          # Tailscale configuration
          tailscale_hostname: "$(echo "$target_host" | sed 's/[^a-zA-Z0-9-]/-/g')"
EOF
    
    echo "$temp_inventory_path"
}

# Main onboarding process
run_onboarding() {
    local target_host="$1"
    local profile="$2"
    local components
    components=$(get_profile_components "$profile")
    
    log_info "🚀 Starting Ubuntu onboarding process..."
    log_info "Target: $target_host"
    log_info "Profile: $profile ($(get_profile_description "$profile"))"
    log_info "Components: $components"
    
    # Create temporary inventory
    local temp_inventory
    temp_inventory=$(create_temp_inventory "$target_host" "$profile")
    
    # Build ansible command
    local ansible_args=()
    ansible_args+=("--tags" "$components")
    
    if [ "$DRY_RUN" = true ]; then
        ansible_args+=("--check" "--diff")
        log_info "🔍 DRY RUN MODE - No changes will be made"
    fi
    
    if [ "$FORCE_MODE" = true ]; then
        ansible_args+=("--extra-vars" "force_deployment=true")
    fi
    
    # Run the onboarding playbook
    log_info "Executing Ubuntu onboarding..."
    ansible_args+=("--extra-vars" "deployment_mode=$profile")
    if run_ansible_playbook_with_ssh "playbooks/ubuntu-onboarding.yml" "$temp_inventory" "Ubuntu onboarding for $target_host" "${ansible_args[@]}"; then
        log_success "✅ Ubuntu onboarding completed successfully!"
        
        if [ "$DRY_RUN" = false ]; then
            log_info ""
            log_info "🎉 Your Ubuntu machine is now configured with:"
            IFS=',' read -ra COMP_ARRAY <<< "$components"
            for comp in "${COMP_ARRAY[@]}"; do
                log_info "  ✓ $comp"
            done
            log_info ""
            log_info "🔗 You can now access the machine:"
            log_info "  SSH: ssh $ssh_user@$target_host"
            if [[ "$components" =~ "tailscale" ]]; then
                log_info "  Tailscale: Connected to OrangeAd network"
            fi
            log_info ""
            log_info "📝 To add this machine to your inventory permanently:"
            log_info "  Add an entry to inventory/ubuntu-servers.yml or create a new inventory file"
        fi
    else
        log_error "❌ Ubuntu onboarding failed"
        cleanup_temp_files "$temp_inventory"
        exit 1
    fi
    
    # Cleanup
    cleanup_temp_files "$temp_inventory"
}

# Interactive target selection
select_target_interactive() {
    log_info "🎯 Ubuntu Machine Selection"
    echo ""
    echo "Please specify the target Ubuntu machine:"
    echo ""
    echo "Options:"
    echo "  1. Enter IP address or hostname directly"
    echo "  2. Select from existing inventory"
    echo "  3. Cancel"
    echo ""
    
    read -p "Choose option (1-3): " choice
    
    case "$choice" in
        1)
            read -p "Enter IP address or hostname: " TARGET_HOST
            if [ -z "$TARGET_HOST" ]; then
                log_error "No target specified"
                exit 1
            fi
            ;;
        2)
            log_info "Discovering Ubuntu machines in inventory..."
            # Use existing inventory selection from helpers.sh
            if ! select_target_host; then
                log_error "Failed to select target host"
                exit 1
            fi
            TARGET_HOST="$TARGET_CONNECT_HOST"
            ;;
        3)
            log_info "Operation cancelled"
            exit 0
            ;;
        *)
            log_error "Invalid choice"
            exit 1
            ;;
    esac
}

# Interactive profile selection
select_profile_interactive() {
    log_info "📋 Server Profile Selection"
    echo ""
    echo "Choose a server profile for your Ubuntu machine:"
    echo ""
    
    local i=1
    for profile in "${VALID_PROFILES[@]}"; do
        echo "  $i. $profile - $(get_profile_description "$profile")"
        i=$((i + 1))
    done
    echo ""
    
    read -p "Select profile (1-${#VALID_PROFILES[@]}) [default: server]: " choice
    
    if [ -z "$choice" ]; then
        choice=1
    fi
    
    if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le ${#VALID_PROFILES[@]} ]; then
        PROFILE="${VALID_PROFILES[$((choice-1))]}"
        log_info "Selected profile: $PROFILE"
    else
        log_error "Invalid profile selection"
        exit 1
    fi
}

# Cleanup function
cleanup_temp_files() {
    local temp_inventory="$1"
    if [ -f "$temp_inventory" ]; then
        rm -f "$temp_inventory"
        log_debug "Cleaned up temporary inventory: $temp_inventory"
    fi
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_usage
            exit 0
            ;;
        -p|--profile)
            PROFILE="$2"
            shift 2
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --force)
            FORCE_MODE=true
            INTERACTIVE_MODE=false
            shift
            ;;
        --no-interactive)
            INTERACTIVE_MODE=false
            shift
            ;;
        --skip-preflight)
            SKIP_PREFLIGHT=true
            shift
            ;;
        -v|--verbose)
            SCRIPT_LOG_LEVEL=$_LOG_LEVEL_DEBUG
            shift
            ;;
        -*)
            log_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
        *)
            if [ -z "$TARGET_HOST" ]; then
                TARGET_HOST="$1"
            else
                log_error "Unexpected argument: $1"
                show_usage
                exit 1
            fi
            shift
            ;;
    esac
done

# Validate profile
if [[ ! " ${VALID_PROFILES[*]} " =~ " ${PROFILE} " ]]; then
    log_error "Invalid profile: $PROFILE"
    log_error "Valid profiles: ${VALID_PROFILES[*]}"
    exit 1
fi

# Check dependencies
check_ansible_installed
check_vault_password_file
check_ssh_installed

# Main execution flow
log_header "Ubuntu One-Command Onboarding"

# Interactive target selection if not provided
if [ -z "$TARGET_HOST" ] && [ "$INTERACTIVE_MODE" = true ]; then
    select_target_interactive
fi

# Interactive profile selection if interactive mode
if [ "$INTERACTIVE_MODE" = true ] && [ "$PROFILE" == "$DEFAULT_PROFILE" ]; then
    select_profile_interactive
fi

# Validate we have a target
if [ -z "$TARGET_HOST" ]; then
    log_error "No target host specified"
    show_usage
    exit 1
fi

# Run pre-flight checks unless skipped
if [ "$SKIP_PREFLIGHT" = false ]; then
    if ! run_preflight_checks "$TARGET_HOST"; then
        log_error "Pre-flight checks failed"
        exit 1
    fi
fi

# Show configuration summary and get confirmation
if [ "$INTERACTIVE_MODE" = true ] && [ "$FORCE_MODE" = false ]; then
    log_info ""
    log_info "📋 Configuration Summary:"
    log_info "  Target Host: $TARGET_HOST"
    log_info "  Profile: $PROFILE"
    log_info "  Description: $(get_profile_description "$PROFILE")"
    log_info "  Components: $(get_profile_components "$PROFILE" | tr ',' ' ')"
    log_info "  Dry Run: $DRY_RUN"
    log_info ""
    
    if [ "$DRY_RUN" = false ]; then
        read -p "Proceed with Ubuntu onboarding? (y/N): " confirm
        if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
            log_info "Operation cancelled by user"
            exit 0
        fi
    fi
fi

# Execute the onboarding
run_onboarding "$TARGET_HOST" "$PROFILE"

log_success "🎉 Ubuntu onboarding process completed!"