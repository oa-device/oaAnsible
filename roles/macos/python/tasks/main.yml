---
# Enhanced Python Role with Improved Idempotency
# Uses state detection framework for efficient deployment

- name: Import state detection for Python environment
  ansible.builtin.include_tasks: ../../../tasks/state-detection.yml
  tags: ["always"]

- name: Configure pyenv and Python (Enhanced)
  when:
    - macos_configure.pyenv | bool
    - platform_state.is_macos
  block:
    # Early exit if system is already ready
    - name: Skip Python installation - already configured
      ansible.builtin.debug:
        msg: |
          Python environment is ready:
          - Pyenv {{ python_state.pyenv_version }} installed and working
          - Python {{ python_state.target_version }} installed and set as global
          - UV package manager available
          Skipping all installation tasks.
      when: python_state.ready

    # Only proceed with installation/configuration if not ready
    - name: Configure Python environment
      when: not python_state.ready
      block:
        # Handle corrupted pyenv installation
        - name: Handle corrupted pyenv installation
          when: python_state.pyenv_installed and not python_state.pyenv_valid
          block:
            - name: Backup existing Python versions before cleanup
              ansible.builtin.shell: |
                set -o pipefail
                BACKUP_DIR="{{ ansible_user_dir }}/.pyenv_versions_backup_$(date +%Y%m%d_%H%M%S)"
                if [ -d "{{ ansible_user_dir }}/.pyenv/versions" ] && [ "$(ls -A {{ ansible_user_dir }}/.pyenv/versions 2>/dev/null)" ]; then
                  echo "Backing up Python versions to $BACKUP_DIR"
                  mkdir -p "$BACKUP_DIR"
                  cp -R "{{ ansible_user_dir }}/.pyenv/versions/"* "$BACKUP_DIR/" 2>/dev/null || true
                  echo "BACKUP_CREATED:$BACKUP_DIR"
                else
                  echo "NO_VERSIONS_TO_BACKUP"
                fi
              register: pyenv_backup_result
              changed_when: pyenv_backup_result.stdout is search('BACKUP_CREATED')

            - name: Remove corrupted pyenv installation
              ansible.builtin.file:
                path: "{{ ansible_user_dir }}/.pyenv"
                state: absent
              register: pyenv_removed

        # Install or update pyenv
        - name: Install/update pyenv
          ansible.builtin.git:
            repo: https://github.com/pyenv/pyenv.git
            dest: "{{ ansible_user_dir }}/.pyenv"
            version: master
            update: "{{ python_state.pyenv_installed and python_state.pyenv_valid }}"
          register: pyenv_installation
          when: not python_state.pyenv_installed or not python_state.pyenv_valid

        # Restore backed up Python versions if they exist
        - name: Restore backed up Python versions
          ansible.builtin.shell: |
            set -o pipefail
            BACKUP_DIR=$(echo "{{ pyenv_backup_result.stdout }}" | grep "BACKUP_CREATED:" | cut -d: -f2)
            if [ -n "$BACKUP_DIR" ] && [ -d "$BACKUP_DIR" ]; then
              echo "Restoring Python versions from: $BACKUP_DIR"
              mkdir -p "{{ ansible_user_dir }}/.pyenv/versions"
              cp -R "$BACKUP_DIR/"* "{{ ansible_user_dir }}/.pyenv/versions/" 2>/dev/null || true
              echo "RESTORE_COMPLETED"
            else
              echo "NO_BACKUP_TO_RESTORE"
            fi
          register: pyenv_restore_result
          changed_when: pyenv_restore_result.stdout is search('RESTORE_COMPLETED')
          when:
            - pyenv_removed is defined and pyenv_removed.changed
            - pyenv_backup_result.stdout is search('BACKUP_CREATED')

        # Shell integration now handled by common/shell_manager role
        # This ensures no duplicate PATH exports and proper idempotency
        - name: Shell integration handled by shell_manager
          ansible.builtin.debug:
            msg: "Pyenv shell integration is now managed by common/shell_manager role"

        # Install required dependencies for Python compilation (only if not present)
        - name: Install Python build dependencies
          community.general.homebrew:
            name:
              - readline
              - openssl@3
              - sqlite3
              - xz
              - zlib
            state: present
            update_homebrew: false
          register: homebrew_deps
          when: homebrew_state.installed and homebrew_state.working

        # Check Python version availability after pyenv setup
        - name: Re-check Python version availability
          ansible.builtin.shell: |
            set -o pipefail
            export PYENV_ROOT="{{ ansible_user_dir }}/.pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(pyenv init -)"
            if pyenv versions --bare | grep -q "^{{ python_state.target_version }}$"; then
              echo "VERSION_AVAILABLE"
            else
              echo "VERSION_MISSING"
            fi
          register: python_version_recheck
          changed_when: false
          when: pyenv_installation.changed or pyenv_restore_result.changed | default(false)

        # Install Python version only if not available
        - name: Install Python {{ python_state.target_version }}
          when: not python_state.target_installed and python_version_recheck.stdout | default('VERSION_MISSING') == 'VERSION_MISSING'
          block:
            - name: Install Python with optimized settings
              ansible.builtin.shell: |
                export PYENV_ROOT="{{ ansible_user_dir }}/.pyenv"
                export PATH="$PYENV_ROOT/bin:$PATH"
                eval "$(pyenv init -)"

                # Optimize build settings
                export MAKEFLAGS="-j$(sysctl -n hw.ncpu)"
                export PYTHON_BUILD_CACHE_PATH="$PYENV_ROOT/cache"

                # Use Homebrew libraries if available
                if command -v brew >/dev/null 2>&1; then
                  export LDFLAGS="-L$(brew --prefix readline)/lib -L$(brew --prefix openssl)/lib -L$(brew --prefix sqlite3)/lib -L$(brew --prefix xz)/lib -L$(brew --prefix zlib)/lib"
                  export CPPFLAGS="-I$(brew --prefix readline)/include -I$(brew --prefix openssl)/include -I$(brew --prefix sqlite3)/include -I$(brew --prefix xz)/include -I$(brew --prefix zlib)/include"
                fi

                pyenv install {{ python_state.target_version }}
              register: python_install_result
              changed_when: false
              async: 900 # 15 minutes timeout
              poll: 30
              retries: 2
              delay: 60

        # Set global Python version only if not already set
        - name: Set global Python version
          ansible.builtin.shell: |
            export PYENV_ROOT="{{ ansible_user_dir }}/.pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(pyenv init -)"
            pyenv global {{ python_state.target_version }}
            pyenv rehash
          register: pyenv_global_set
          when: not python_state.target_is_global
          changed_when: true

    # Install UV package manager (only if not present)
    - name: Install UV package manager
      when: not python_state.uv_installed
      block:
        - name: Install UV via curl
          ansible.builtin.shell: |
            set -o pipefail && curl -LsSf https://astral.sh/uv/install.sh | sh
          args:
            creates: "{{ ansible_user_dir }}/.cargo/bin/uv"
          register: uv_installation

        # UV shell PATH integration now handled by common/shell_manager role
        - name: UV shell integration handled by shell_manager
          ansible.builtin.debug:
            msg: "UV PATH configuration is now managed by common/shell_manager role (cargo component)"
          when: uv_installation.changed

    # Final verification
    - name: Verify Python environment setup
      ansible.builtin.shell: |
        export PYENV_ROOT="{{ ansible_user_dir }}/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH:$HOME/.cargo/bin"
        eval "$(pyenv init -)"

        echo "Pyenv version: $(pyenv --version)"
        echo "Python version: $(python3 --version)"
        echo "UV available: $(command -v uv >/dev/null && echo 'Yes' || echo 'No')"

        # Test Python functionality
        python3 -c "import sys; print(f'Python executable: {sys.executable}')"
      register: python_verification
      changed_when: false
      failed_when: python_verification.rc != 0

    - name: Display Python environment status
      ansible.builtin.debug:
        msg: |
          Python Environment Configuration Complete:
          {{ python_verification.stdout }}

          Status: Ready for component deployment
      when: python_verification.rc == 0

# Set completion facts for dependent roles
- name: Set Python environment completion facts
  ansible.builtin.set_fact:
    python_environment_ready: true
    python_version_installed: "{{ python_state.target_version }}"
    pyenv_path: "{{ ansible_user_dir }}/.pyenv"
    uv_available: "{{ python_state.uv_installed or uv_installation.changed | default(false) }}"
  tags: ["always"]
