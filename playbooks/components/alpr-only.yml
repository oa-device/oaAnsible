---
# ALPR Service Only Deployment Playbook
# Deploys only the ALPR (Automatic License Plate Recognition) service
- name: Deploy ALPR Service Only
  hosts: all
  gather_facts: false
  tags: ["alpr", "components"]
  pre_tasks:
    - name: Gather facts
      ansible.builtin.setup:
      become: false

    - name: Verify target is macOS
      ansible.builtin.fail:
        msg: "This playbook only supports macOS"
      when: ansible_distribution != "MacOSX"

    - name: Display deployment info
      ansible.builtin.debug:
        msg: |
          ALPR Service Only Deployment:
          - Host: {{ ansible_host }}
          - User: {{ ansible_user }}
          - Target: ALPR service with Docker

    - name: Ensure system requirements are met
      ansible.builtin.import_tasks: ../../tasks/pre_checks.yml
      tags: ["always"]

    - name: Environment safety checks
      ansible.builtin.import_tasks: ../../tasks/environment_checks.yml
      tags: ["always"]

    - name: Check ALPR deployment flag
      ansible.builtin.fail:
        msg: "ALPR deployment not enabled. Set oa_environment.deploy_alpr_service to true"
      when: not (oa_environment.deploy_alpr_service | default(false))

  roles:
    # Essential dependencies for ALPR
    - role: macos/base
      tags: ["setup", "base"]
      vars:
        minimal_base: true

    # Python environment for ALPR monitor
    - role: macos/python
      tags: ["python", "dependencies"]
      vars:
        python_versions: ["{{ alpr_python_version | default('3.12') }}"]

    - role: macos/network
      tags: ["network"]
      vars:
        minimal_network: true

    - role: macos/network/tailscale
      tags: ["tailscale", "network"]
      when: oa_environment.allow_tailscale_changes | default(false)

    # Camera permissions for ALPR monitor
    - role: macos/security
      tags: ["security", "camera"]
      vars:
        security_scope: "alpr_camera"

    # ALPR service deployment (Docker + Python monitor)
    - role: macos/alpr_service
      tags: ["alpr", "main"]

  post_tasks:
    - name: Verify ALPR installation
      ansible.builtin.import_tasks: ../../tasks/verify.yml
      tags: ["verify"]
      vars:
        verify_scope: "alpr"

    - name: Check ALPR services status
      ansible.builtin.shell: |
        echo "=== ALPR Services Status ==="
        echo "Docker Service:"
        launchctl list | grep com.orangead.alpr || echo "  Not running"
        echo "Monitor Service:"
        launchctl list | grep com.orangead.alpr-monitor || echo "  Not running"
        echo "Docker Status:"
        docker info >/dev/null 2>&1 && echo "  Docker daemon running" || echo "  Docker daemon not available"
      register: alpr_services_check
      failed_when: false
      become: false

    - name: Display completion message
      ansible.builtin.debug:
        msg: |
          ðŸŽ¥ ALPR Stack Deployment Completed!

          Components Deployed:
          - PlateRecognizer Docker Service (port {{ macos_alpr_host_port | default(8081) }})
          - ALPR Python Monitor ({{ ansible_user_dir }}/orangead/alpr/detect.py)

          Services Status:
          {{ alpr_services_check.stdout | default('Status check failed') }}

          Management:
          - Start Docker:  launchctl load -w ~/Library/LaunchAgents/com.orangead.alpr.plist
          - Start Monitor: launchctl load -w ~/Library/LaunchAgents/com.orangead.alpr-monitor.plist
          - Check Status:  launchctl list | grep orangead
          - View Logs:     tail -f ~/orangead/alpr/logs/*.log

          Test API:
          curl -F "upload=@image.jpg" -F regions='ca' -F mmc=true \\
               -F 'config={"mode":"fast", "detection_mode":"vehicle"}' \\
               http://localhost:{{ macos_alpr_host_port | default(8081) }}/v1/plate-reader/
