---
# Tailscale binary installation tasks
# Handles download, installation, and binary management

- name: Get checksums of existing Tailscale binaries (if any)
  ansible.builtin.command: "shasum -a 256 {{ go_bin_path_for_tailscale }}/{{ item }}"
  register: tailscale_checksums_before
  failed_when: false
  changed_when: false
  loop:
    - tailscale
    - tailscaled

- name: Get latest stable Tailscale release version
  ansible.builtin.uri:
    url: https://api.github.com/repos/tailscale/tailscale/releases/latest
    method: GET
    return_content: true
  register: tailscale_latest_release
  failed_when: false

- name: Extract latest version tag
  ansible.builtin.set_fact:
    tailscale_latest_version: "{{ tailscale_latest_release.json.tag_name | default('v1.84.1') }}"
  when: tailscale_latest_release.status == 200

- name: Set fallback version if API call failed
  ansible.builtin.set_fact:
    tailscale_latest_version: "v1.84.1"
  when: tailscale_latest_release.status != 200

- name: Install/Update Tailscale binaries using Go (latest stable version)
  block:
    - name: Install Tailscale binaries with proper build info (latest stable)
      ansible.builtin.shell: |
        set -e
        cd "{{ ansible_env.HOME }}"
        export GOPATH="{{ ansible_env.HOME }}/go"
        export GOBIN="{{ go_bin_path_for_tailscale }}"
        export PATH="{{ _homebrew_prefix }}/bin:{{ ansible_env.HOME }}/go/bin:{{ ansible_env.PATH }}"

        # Clean any existing installs
        rm -f "{{ go_bin_path_for_tailscale }}/tailscale" "{{ go_bin_path_for_tailscale }}/tailscaled"

        # Install both binaries with proper version info
        "{{ go_executable_path }}" install -ldflags "-X tailscale.com/version.longStamp={{ tailscale_latest_version }}" tailscale.com/cmd/tailscale@{{ tailscale_latest_version }}
        "{{ go_executable_path }}" install -ldflags "-X tailscale.com/version.longStamp={{ tailscale_latest_version }}" tailscale.com/cmd/tailscaled@{{ tailscale_latest_version }}
      environment:
        GOTOOLCHAIN: "auto"
      register: tailscale_install_with_buildinfo
      changed_when: false
      failed_when: false

    - name: Try fallback version if latest stable failed
      ansible.builtin.shell: |
        set -e
        cd "{{ ansible_env.HOME }}"
        export GOPATH="{{ ansible_env.HOME }}/go"
        export GOBIN="{{ go_bin_path_for_tailscale }}"
        export PATH="{{ _homebrew_prefix }}/bin:{{ ansible_env.HOME }}/go/bin:{{ ansible_env.PATH }}"

        # Clean any existing installs
        rm -f "{{ go_bin_path_for_tailscale }}/tailscale" "{{ go_bin_path_for_tailscale }}/tailscaled"

        # Install both binaries (fallback to working version)
        "{{ go_executable_path }}" install tailscale.com/cmd/tailscale@v1.82.1
        "{{ go_executable_path }}" install tailscale.com/cmd/tailscaled@v1.82.1
      register: tailscale_install_fallback
      when: tailscale_install_with_buildinfo.failed | default(false)
      changed_when: tailscale_install_fallback.rc == 0

- name: Verify Tailscale binaries are installed
  ansible.builtin.command: "{{ go_bin_path_for_tailscale }}/{{ item }}"
  register: tailscale_binary_check
  failed_when: false
  changed_when: false
  loop:
    - tailscale
    - tailscaled

- name: Get checksums of installed Tailscale binaries
  ansible.builtin.command: "shasum -a 256 {{ go_bin_path_for_tailscale }}/{{ item }}"
  register: tailscale_checksums_after
  failed_when: false
  changed_when: false
  loop:
    - tailscale
    - tailscaled

- name: Display installation status
  ansible.builtin.debug:
    msg: |
      Tailscale installation status:
      - Latest version: {{ tailscale_latest_version }}
      - Binaries installed: {{ tailscale_binary_check.results | selectattr('rc', 'eq', 0) | list | length }}/2
      - Installation {{ 'successful' if tailscale_binary_check.results | selectattr('rc', 'eq', 0) | list | length == 2 else 'failed' }}
