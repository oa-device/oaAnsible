#!/bin/bash

# Source helper functions and variables
HELPER_SCRIPT_PATH="$(dirname "${BASH_SOURCE[0]}")/helpers.sh"
if [ -f "$HELPER_SCRIPT_PATH" ]; then
  # shellcheck source=/Users/kaitran/OrangeAd/oaPangaea/oaAnsible/scripts/helpers.sh
  source "$HELPER_SCRIPT_PATH"
else
  echo "ERROR: helpers.sh not found at $HELPER_SCRIPT_PATH"
  exit 1
fi

# Set script-specific log level
SCRIPT_LOG_LEVEL=$_LOG_LEVEL_DEBUG
export SCRIPT_LOG_LEVEL

log_debug "oassh script started."
ensure_ansible_root_dir
check_vault_password_file # Checks for vault password file

# Check for ansible-vault
if ! command -v ansible-vault &>/dev/null; then
  log_error "ansible-vault command not found. Please ensure Ansible is installed correctly. Halting."
  exit 1
fi

# Check for yq
if ! command -v yq &>/dev/null; then
  log_error "yq command not found. Please install yq (https://github.com/mikefarah/yq/). Halting."
  exit 1
fi

# Check for ssh
if ! command -v ssh &>/dev/null; then
  log_error "ssh command not found. Please ensure OpenSSH client is installed. Halting."
  exit 1
fi

# Display usage information
show_usage() {
  echo "Usage: $(basename "$0") [options] [hostname]"
  echo "Options:"
  echo "  -h, --help     Show this help message"
  echo "  -l, --list     List all available hosts"
  echo "  -i INVENTORY   Specify inventory (staging or production)"
  echo "  -v, --verbose  Enable verbose output"
  echo ""
  echo "Examples:"
  echo "  $(basename "$0") b3              # Connect to host matching 'b3' (e.g., mac-mini-b3)"
  echo "  $(basename "$0") -i staging b3   # Connect to 'b3' in staging inventory"
  echo "  $(basename "$0") -l              # List all available hosts"
  echo "  $(basename "$0")                 # Interactive mode (legacy behavior)"
  exit 0
}

# Function to list all available hosts from all inventories
list_all_hosts() {
  local inventories=("staging" "production")
  
  echo "Available hosts:"
  echo "---------------"
  
  for inv in "${inventories[@]}"; do
    local inventory_path="$OA_ANSIBLE_INVENTORY_DIR/$inv/hosts.yml"
    if [ ! -f "$inventory_path" ]; then
      log_warn "Inventory file not found: $inventory_path"
      continue
    fi
    
    echo "[$inv]"
    yq e '.all.children.macos.hosts | keys | .[]' "$inventory_path" 2>/dev/null | while read -r host; do
      local host_ip=$(yq e ".all.children.macos.hosts.\"$host\".ansible_host" "$inventory_path")
      echo "  $host ($host_ip)"
    done
    echo ""
  done
}

# Function to find a host by name or partial name
find_host_by_name() {
  local search_term="$1"
  local specified_inventory="$2"
  local inventories
  
  if [ -n "$specified_inventory" ]; then
    inventories=("$specified_inventory")
  else
    inventories=("staging" "production")
  fi
  
  local found_hosts=()
  local found_inventories=()
  
  for inv in "${inventories[@]}"; do
    local inventory_path="$OA_ANSIBLE_INVENTORY_DIR/$inv/hosts.yml"
    if [ ! -f "$inventory_path" ]; then
      log_warn "Inventory file not found: $inventory_path"
      continue
    fi
    
    while IFS= read -r host; do
      if [[ "$host" == *"$search_term"* ]]; then
        found_hosts+=("$host")
        found_inventories+=("$inv")
      fi
    done < <(yq e '.all.children.macos.hosts | keys | .[]' "$inventory_path" 2>/dev/null)
  done
  
  if [ ${#found_hosts[@]} -eq 0 ]; then
    log_error "No hosts matching '$search_term' found in any inventory."
    return 1
  elif [ ${#found_hosts[@]} -gt 1 ]; then
    log_warn "Multiple hosts match '$search_term':"
    for i in "${!found_hosts[@]}"; do
      echo "$((i+1)). ${found_hosts[$i]} (${found_inventories[$i]})"
    done
    
    echo "Please select a host:"
    local selection
    read -r selection
    
    if ! [[ "$selection" =~ ^[0-9]+$ ]] || [ "$selection" -lt 1 ] || [ "$selection" -gt ${#found_hosts[@]} ]; then
      log_error "Invalid selection."
      return 1
    fi
    
    selected_index=$((selection-1))
    selected_host_alias="${found_hosts[$selected_index]}"
    selected_inventory_name="${found_inventories[$selected_index]}"
  else
    selected_host_alias="${found_hosts[0]}"
    selected_inventory_name="${found_inventories[0]}"
  fi
  
  selected_inventory_path="$OA_ANSIBLE_INVENTORY_DIR/$selected_inventory_name/hosts.yml"
  
  # Get connection details
  TARGET_CONNECT_HOST=$(yq e ".all.children.macos.hosts.\"$selected_host_alias\".ansible_host" "$selected_inventory_path")
  TARGET_CONNECT_USER=$(yq e ".all.children.macos.hosts.\"$selected_host_alias\".ansible_user" "$selected_inventory_path")
  TARGET_CONNECT_PORT=$(yq e ".all.children.macos.hosts.\"$selected_host_alias\".ansible_port // 22" "$selected_inventory_path")
  
  if [ -z "$TARGET_CONNECT_HOST" ] || [ "$TARGET_CONNECT_HOST" == "null" ]; then
    log_error "Could not determine 'ansible_host' for '$selected_host_alias' in $selected_inventory_path."
    return 1
  fi
  if [ -z "$TARGET_CONNECT_USER" ] || [ "$TARGET_CONNECT_USER" == "null" ]; then
    log_error "Could not determine 'ansible_user' for '$selected_host_alias' in $selected_inventory_path."
    return 1
  fi
  
  log_info "Found host: $selected_host_alias in $selected_inventory_name"
  log_debug "Target connection host: $TARGET_CONNECT_HOST"
  log_debug "Target connection user: $TARGET_CONNECT_USER"
  log_debug "Target connection port: $TARGET_CONNECT_PORT"
  return 0
}

# Legacy function for interactive host selection
select_target_host_details() {
  log_debug "Starting interactive host selection process for oassh."
  local inventories=("staging" "production")
  local selected_inventory_name
  local selected_inventory_path
  local host_aliases=() # Initialize as an empty array
  local selected_host_alias

  # Select inventory
  log_info "Please select an inventory environment:"
  select inv_choice in "${inventories[@]}"; do
    if [[ -n "$inv_choice" ]]; then
      selected_inventory_name="$inv_choice"
      selected_inventory_path="$OA_ANSIBLE_INVENTORY_DIR/$selected_inventory_name/hosts.yml"
      if [ ! -f "$selected_inventory_path" ]; then
        log_error "Inventory file not found: $selected_inventory_path"
        return 1
      fi
      log_info "Selected inventory: $selected_inventory_name"
      break
    else
      log_warn "Invalid selection. Please try again."
    fi
  done

  # List hosts from selected inventory
  log_debug "Fetching hosts from $selected_inventory_path"
  # Portable way to read lines into an array
  while IFS= read -r line; do
    host_aliases+=("$line")
  done < <(yq e '.all.children.macos.hosts | keys | .[]' "$selected_inventory_path" 2>/dev/null)

  if [ ${#host_aliases[@]} -eq 0 ]; then
    log_error "No hosts found in the '.all.children.macos.hosts' group of $selected_inventory_path, or error parsing inventory."
    return 1
  fi

  log_info "Please select a target host from '$selected_inventory_name':"
  select host_choice in "${host_aliases[@]}"; do
    if [[ -n "$host_choice" ]]; then
      selected_host_alias="$host_choice"
      log_info "Selected host alias: $selected_host_alias"
      break
    else
      log_warn "Invalid selection. Please try again."
    fi
  done

  # Get ansible_host and ansible_user for the selected host alias
  TARGET_CONNECT_HOST=$(yq e ".all.children.macos.hosts.\"$selected_host_alias\".ansible_host" "$selected_inventory_path")
  TARGET_CONNECT_USER=$(yq e ".all.children.macos.hosts.\"$selected_host_alias\".ansible_user" "$selected_inventory_path")
  # Query for ansible_port, default to 22 if not found
  TARGET_CONNECT_PORT=$(yq e ".all.children.macos.hosts.\"$selected_host_alias\".ansible_port // 22" "$selected_inventory_path")

  if [ -z "$TARGET_CONNECT_HOST" ] || [ "$TARGET_CONNECT_HOST" == "null" ]; then
    log_error "Could not determine 'ansible_host' for '$selected_host_alias' in $selected_inventory_path."
    return 1
  fi
  if [ -z "$TARGET_CONNECT_USER" ] || [ "$TARGET_CONNECT_USER" == "null" ]; then
    log_error "Could not determine 'ansible_user' for '$selected_host_alias' in $selected_inventory_path."
    return 1
  fi

  log_debug "Target connection host: $TARGET_CONNECT_HOST"
  log_debug "Target connection user: $TARGET_CONNECT_USER"
  log_debug "Target connection port: $TARGET_CONNECT_PORT"
  return 0
}

# --- Main Script ---

# Parse command-line arguments
SPECIFIED_INVENTORY=""
VERBOSE=false
HOST_NAME=""
SHOW_HELP=false
LIST_HOSTS=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      SHOW_HELP=true
      shift
      ;;
    -l|--list)
      LIST_HOSTS=true
      shift
      ;;
    -i)
      if [[ -n "$2" && "$2" != -* ]]; then
        SPECIFIED_INVENTORY="$2"
        if [[ "$SPECIFIED_INVENTORY" != "staging" && "$SPECIFIED_INVENTORY" != "production" ]]; then
          log_error "Invalid inventory: $SPECIFIED_INVENTORY. Must be 'staging' or 'production'."
          exit 1
        fi
        shift 2
      else
        log_error "Option -i requires an argument."
        exit 1
      fi
      ;;
    -v|--verbose)
      VERBOSE=true
      SCRIPT_LOG_LEVEL=$_LOG_LEVEL_DEBUG
      export SCRIPT_LOG_LEVEL
      shift
      ;;
    *)
      if [[ -z "$HOST_NAME" ]]; then
        HOST_NAME="$1"
        shift
      else
        # All remaining arguments are passed to SSH
        break
      fi
      ;;
  esac
done

# Show help if requested
if [ "$SHOW_HELP" = true ]; then
  show_usage
fi

# List hosts if requested
if [ "$LIST_HOSTS" = true ]; then
  list_all_hosts
  exit 0
fi

# Determine how to find the host
if [ -n "$HOST_NAME" ]; then
  # Use hostname provided as argument
  if ! find_host_by_name "$HOST_NAME" "$SPECIFIED_INVENTORY"; then
    log_error "Could not find host matching '$HOST_NAME'. Use -l to list available hosts."
    exit 1
  fi
else
  # Use interactive mode if no hostname provided
  if ! select_target_host_details; then
    log_error "Host selection failed. Exiting oassh."
    exit 1
  fi
fi

# Prepare SSH connection
VAULT_FILE_PATH="$OA_ANSIBLE_GROUP_VARS_DIR/all/vault.yml"
log_debug "Attempting to view vault file: $VAULT_FILE_PATH"

DECRYPTED_VAULT_CONTENT=$(ansible-vault view "$VAULT_FILE_PATH" --vault-password-file "$OA_ANSIBLE_VAULT_PASSWORD_FILE")
if [ $? -ne 0 ]; then
  log_error "Failed to decrypt vault file: $VAULT_FILE_PATH"
  exit 1
fi
log_debug "Vault file decrypted successfully."

PRIVATE_KEY_CONTENT=$(echo "$DECRYPTED_VAULT_CONTENT" | yq -r '.vault_ssh_private_key')
if [ -z "$PRIVATE_KEY_CONTENT" ] || [ "$PRIVATE_KEY_CONTENT" == "null" ]; then
  log_error "Failed to extract 'vault_ssh_private_key' from vault content."
  log_debug "Vault content was: $DECRYPTED_VAULT_CONTENT"
  exit 1
fi
log_debug "Private key extracted from vault."

# Create a temporary file for the private key
TMP_KEY_PATH=$(mktemp "/tmp/oassh_privkey.XXXXXX")
if [ -z "$TMP_KEY_PATH" ]; then
  log_error "Failed to create temporary file for private key."
  exit 1
fi
log_debug "Temporary private key file created at $TMP_KEY_PATH"

# Set strict permissions and write key
chmod 600 "$TMP_KEY_PATH"
echo -E "$PRIVATE_KEY_CONTENT" >"$TMP_KEY_PATH" # Use -E to prevent backslash interpretation if key has them.
if [ $? -ne 0 ]; then
  log_error "Failed to write private key to temporary file: $TMP_KEY_PATH"
  rm -f "$TMP_KEY_PATH" # Clean up
  exit 1
fi

# Set up a trap to ensure the temporary key file is deleted on exit
trap 'log_debug "Cleaning up temporary private key file: $TMP_KEY_PATH"; rm -f "$TMP_KEY_PATH"' EXIT INT TERM

log_info "Connecting to $TARGET_CONNECT_USER@$TARGET_CONNECT_HOST on port $TARGET_CONNECT_PORT..."
log_debug "SSH command: ssh -i \"$TMP_KEY_PATH\" -p \"$TARGET_CONNECT_PORT\" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \"$TARGET_CONNECT_USER@$TARGET_CONNECT_HOST\" ${*}"

# Pass any additional arguments from oassh script to ssh
ssh -i "$TMP_KEY_PATH" -p "$TARGET_CONNECT_PORT" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "$TARGET_CONNECT_USER@$TARGET_CONNECT_HOST" "${@}"
SSH_EXIT_CODE=$?

# Explicitly remove the temp file and clear the trap if SSH exits
log_debug "SSH command finished with exit code: $SSH_EXIT_CODE"
rm -f "$TMP_KEY_PATH"
trap - EXIT INT TERM # Clear the trap

log_debug "oassh script finished."
exit $SSH_EXIT_CODE
