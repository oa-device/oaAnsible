---
- name: MacOS MPV Player deployment
  when: >
    (player.enabled | default(false)) or (player is defined and player.keys() | length > 0)
  tags: ["player"]
  block:
    - name: Debug inventory structure
      ansible.builtin.debug:
        msg:
          - "=== INVENTORY DEBUG ==="
          - "All inventory groups: {{ group_names }}"
          - "All hostvars keys: {{ hostvars.keys() | list }}"
          - "Current player var: {{ player | default('UNDEFINED') }}"
        verbosity: 1
      tags: ["player", "config"]

    - name: Load inventory file directly to get global config
      ansible.builtin.include_vars:
        file: "{{ inventory_file }}"
        name: inventory_data
      tags: ["player", "config"]

    - name: Extract global player configuration from inventory data
      ansible.builtin.set_fact:
        base_player_config: "{{ inventory_data.all.vars.player }}"
      tags: ["player", "config"]
        
    - name: Merge with host-specific overrides  
      ansible.builtin.set_fact:
        global_player_config: "{{ base_player_config | combine(player | default({}), recursive=True) }}"
      tags: ["player", "config"]

    - name: Debug final configuration
      ansible.builtin.debug:
        msg:
          - "=== FINAL CONFIGURATION DEBUG ==="
          - "Base config enabled: {{ base_player_config.enabled | default('UNDEFINED') }}"
          - "Host override: {{ player | default({}) }}"
          - "Final config enabled: {{ global_player_config.enabled | default('UNDEFINED') }}"
        verbosity: 0
      tags: ["player", "debug"]

    - name: Validate player configuration
      ansible.builtin.assert:
        that:
          - global_player_config is defined
          - global_player_config.enabled | default(false)
          - >-
            (global_player_config.schedule_enabled | default(false) and 
             global_player_config.schedules is defined and 
             global_player_config.schedules | length > 0) or
            (global_player_config.videos is defined and 
             global_player_config.videos | length > 0)
        fail_msg: >-
          Player configuration validation failed. Requirements:
          - player.enabled must be true
          - Either schedule_enabled with schedules defined, or videos defined
          - At least one video source must be configured
        success_msg: "Player configuration validation passed"
      tags: ["player", "config", "validation"]

    - name: Merge global and host-specific player configuration
      ansible.builtin.set_fact:
        merged_player_config: "{{ global_player_config | combine(player | default({}), recursive=True) }}"
      tags: ["player", "config"]

    - name: Set role defaults for technical settings
      ansible.builtin.set_fact:
        player: "{{ role_defaults | combine(merged_player_config, recursive=True) }}"
      vars:
        # Only technical defaults - let Ansible handle inventory inheritance naturally
        role_defaults:
          video_source: "{{ ansible_user_dir }}/orangead/videos"
          player_binary: "/opt/homebrew/bin/mpv"
          log_level: "info"
          log_file: "{{ ansible_user_dir }}/orangead/logs/oemplayer.log"
          service_name: "com.orangead.oemplayer"
          service_user: "{{ ansible_user }}"
          service_keep_alive: true
          service_run_at_load: true
          health_check_interval: 60
          restart_attempts: 3
          restart_delay: 10
      tags: ["player", "config"]

    - name: Debug merged player configuration
      ansible.builtin.debug:
        msg:
          - "=== PLAYER CONFIGURATION DEBUG ==="
          - "Player enabled: {{ player.enabled | default('UNDEFINED') }}"
          - "Player dual_screen: {{ player.dual_screen | default('UNDEFINED') }}"
          - "Player videos: {{ player.videos | default('UNDEFINED') }}"
          - "Videos count: {{ (player.videos | default([])) | length }}"
          - "=== CONFIGURATION READY ==="
        verbosity: 0
      tags: ["player", "debug"]

    - name: Clean up old unused player files
      ansible.builtin.include_tasks: cleanup_old_files.yml
      tags: ["player", "cleanup"]

    - name: Ensure MPV dependencies are installed
      ansible.builtin.include_tasks: install_dependencies.yml
      tags: ["player", "dependencies"]

    - name: Create player directory structure
      ansible.builtin.include_tasks: create_directories.yml
      tags: ["player", "setup"]

    - name: Configure MPV player service (deploy files only)
      ansible.builtin.include_tasks: configure_service.yml
      tags: ["player", "config"]

    - name: Atomic service transition (Blue-Green Deployment)
      ansible.builtin.include_tasks: service_transition.yml
      tags: ["player", "transition", "blue-green"]

    - name: Setup health monitoring
      ansible.builtin.include_tasks: health_monitoring.yml
      when:
        - player.health_check | default(true)
        - not (oa_environment.name | default('') | regex_search('preprod|staging')) # Disable for development
      tags: ["player", "monitoring"]
