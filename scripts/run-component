#!/bin/bash

# Component-specific deployment script
# Usage: ./run-component <environment> <component1> [component2] [component3] ...
# Example: ./run-component staging macos-api tracker
# Example: ./run-component production alpr

# Source helper functions and variables
HELPER_SCRIPT_PATH="$(dirname "${BASH_SOURCE[0]}")/helpers.sh"
if [ -f "$HELPER_SCRIPT_PATH" ]; then
  # shellcheck source=./helpers.sh
  source "$HELPER_SCRIPT_PATH"
else
  echo "ERROR: helpers.sh not found at $HELPER_SCRIPT_PATH"
  exit 1
fi

# Set script-specific log level
SCRIPT_LOG_LEVEL=$_LOG_LEVEL_INFO
export SCRIPT_LOG_LEVEL

# Usage function
usage() {
  cat << EOF
üöÄ OrangeAd Component Deployment Script (Advanced Framework)
===========================================================

Usage: $0 <environment> <component1> [component2] [component3] ... [options]

ENVIRONMENTS:
  staging       - Use staging inventory
  production    - Use production inventory  
  preprod       - Use pre-production inventory

COMPONENTS (Platform-aware with dependency resolution):
  macOS:
    macos-api     - Deploy macOS API service (requires: python, base-system)
    macos-tracker - Deploy oaTracker service (requires: python, base-system, macos-api)
    alpr          - Deploy ALPR service (requires: python, base-system) [conflicts with tracker]

  Universal:
    base-system   - Deploy foundation system configuration
    python        - Deploy Python runtime environment (requires: base-system)
    node          - Deploy Node.js runtime environment (requires: base-system)
    network-stack - Deploy network stack including Tailscale (requires: base-system)

  Ubuntu:
    ubuntu-docker - Deploy Docker environment (requires: base-system)

  OrangePi:
    opi-player    - Deploy media player service (requires: base-system, python)

EXECUTION MODES (add to components):
  --dry-run     - Show what would be deployed without making changes
  --check       - Validate configuration and show potential changes
  --diff        - Show detailed differences for all changes
  --force       - Skip safety checks and confirmations
  --verbose     - Enable verbose output

ADVANCED FEATURES:
  ‚úÖ Automatic dependency resolution
  ‚úÖ Conflict detection and prevention
  ‚úÖ Component compatibility validation
  ‚úÖ Resource requirement analysis
  ‚úÖ Health checking and status reporting
  ‚úÖ Rollback capabilities

EXAMPLES:
  # Basic component deployment
  $0 staging macos-api
  $0 production macos-api macos-tracker
  
  # Dependency resolution (python and base-system added automatically)
  $0 staging macos-tracker  # Deploys: base-system ‚Üí python ‚Üí macos-api ‚Üí macos-tracker
  
  # Dry-run mode
  $0 staging macos-api --dry-run
  
  # Check mode with verbose output
  $0 staging macos-tracker --check --verbose
  
  # Force deployment (skip confirmations)
  $0 production macos-api --force

EOF
}

# Check arguments
if [ $# -lt 2 ]; then
  log_error "Invalid number of arguments"
  usage
  exit 1
fi

ENVIRONMENT=$1
shift
COMPONENTS=("$@")

log_debug "run-component script started for environment: $ENVIRONMENT"
log_debug "Components to deploy: ${COMPONENTS[*]}"

ensure_ansible_root_dir

# Validate environment
case $ENVIRONMENT in
  staging|production)
    INVENTORY_FILE="$OA_ANSIBLE_INVENTORY_DIR/$ENVIRONMENT/hosts.yml"
    if [ ! -f "$INVENTORY_FILE" ]; then
      log_error "Inventory file not found: $INVENTORY_FILE"
      exit 1
    fi
    ;;
  preprod|pre-prod)
    # Handle both preprod and pre-prod naming
    INVENTORY_FILE="$OA_ANSIBLE_INVENTORY_DIR/pre-prod/hosts.yml"
    if [ ! -f "$INVENTORY_FILE" ]; then
      log_error "Inventory file not found: $INVENTORY_FILE"
      exit 1
    fi
    ;;
  *)
    log_error "Invalid environment: $ENVIRONMENT"
    log_error "Valid environments: staging, production, preprod, pre-prod"
    exit 1
    ;;
esac

# Separate components from execution mode options and ansible flags
EXECUTION_MODE_OPTIONS=""
FILTERED_COMPONENTS=()
ANSIBLE_FLAGS=()
SKIP_NEXT=false

for i in "${!COMPONENTS[@]}"; do
  arg="${COMPONENTS[$i]}"
  
  if [ "$SKIP_NEXT" = true ]; then
    SKIP_NEXT=false
    continue
  fi
  
  case $arg in
    # Execution mode options (handled by universal playbook)
    --dry-run)
      EXECUTION_MODE_OPTIONS="$EXECUTION_MODE_OPTIONS execution_mode=dry-run"
      ;;
    --check)
      EXECUTION_MODE_OPTIONS="$EXECUTION_MODE_OPTIONS execution_mode=check"
      ;;
    --diff)
      EXECUTION_MODE_OPTIONS="$EXECUTION_MODE_OPTIONS execution_mode=diff"
      ;;
    --force)
      EXECUTION_MODE_OPTIONS="$EXECUTION_MODE_OPTIONS force_deployment=true"
      ;;
    --verbose)
      EXECUTION_MODE_OPTIONS="$EXECUTION_MODE_OPTIONS verbose_mode=true"
      ;;
    # Ansible flags that take no arguments
    -v|-vv|-vvv|-vvvv|-vvvvv|-vvvvvv|--version|--list-hosts|--list-tasks|--list-tags|--syntax-check|--check|--diff|-C|-D|-k|-K|-b|--become|--flush-cache|--force-handlers|--step)
      ANSIBLE_FLAGS+=("$arg")
      ;;
    # Ansible flags that take arguments
    -i|--inventory|--inventory-file|-l|--limit|-e|--extra-vars|-t|--tags|--skip-tags|-f|--forks|-u|--user|--private-key|--key-file|-c|--connection|-T|--timeout|--become-method|--become-user|--vault-id|--vault-password-file|--vault-pass-file|--start-at-task)
      ANSIBLE_FLAGS+=("$arg")
      # Add the next argument as well
      next_idx=$((i + 1))
      if [ $next_idx -lt ${#COMPONENTS[@]} ]; then
        ANSIBLE_FLAGS+=("${COMPONENTS[$next_idx]}")
        SKIP_NEXT=true
      fi
      ;;
    # Everything else is treated as a component
    *)
      FILTERED_COMPONENTS+=("$arg")
      ;;
  esac
done

COMPONENTS=("${FILTERED_COMPONENTS[@]}")

# Enhanced component validation (framework will validate at runtime)
VALID_COMPONENTS=(
  "macos-api" "macos-tracker" "alpr" 
  "base-system" "python" "node" "network-stack"
  "ubuntu-docker" "opi-player"
)

log_info "üîç Validating selected components..."
for component in "${COMPONENTS[@]}"; do
  if [[ ! " ${VALID_COMPONENTS[*]} " =~ " $component " ]]; then
    log_warn "Component '$component' not in known list (will be validated by framework)"
  else
    log_debug "‚úì Component '$component' recognized"
  fi
done

# Check for required dependencies (SSH and vault loading handled by run_playbook_with_vault)
check_vault_password_file
check_yq_installed
check_ansible_vault_installed
check_ansible_installed

# --- Advanced Component Deployment ---
log_info "üöÄ Starting advanced component deployment..."
log_info "Environment: $ENVIRONMENT"
log_info "Components: ${COMPONENTS[*]}"
if [ -n "$EXECUTION_MODE_OPTIONS" ]; then
  log_info "Execution options: $EXECUTION_MODE_OPTIONS"
fi

# Convert components array to JSON format for Ansible
COMPONENTS_JSON=$(printf '%s\n' "${COMPONENTS[@]}" | jq -R . | jq -s .)

log_info "üì¶ Executing universal playbook with advanced component framework..."

# Build execution command with extra variables
# Always use components mode, but add dry-run, check, etc. as separate flags
EXTRA_VARS="execution_mode=components selected_components=$COMPONENTS_JSON"
if [ -n "$EXECUTION_MODE_OPTIONS" ]; then
  # Keep execution_mode=components but add the additional options
  EXTRA_VARS="$EXTRA_VARS $EXECUTION_MODE_OPTIONS"
  # Fix execution_mode if it was overridden by dry-run/check
  EXTRA_VARS=$(echo "$EXTRA_VARS" | sed 's/execution_mode=dry-run/execution_mode=components dry_run_mode=true/')
  EXTRA_VARS=$(echo "$EXTRA_VARS" | sed 's/execution_mode=check/execution_mode=components check_mode=true/')
  EXTRA_VARS=$(echo "$EXTRA_VARS" | sed 's/execution_mode=diff/execution_mode=components diff_mode=true/')
fi

# Execute the universal playbook with component mode and advanced framework
if ! run_playbook_with_vault "playbooks/universal.yml" "$INVENTORY_FILE" "component deployment" --extra-vars "$EXTRA_VARS" --tags "components" "${ANSIBLE_FLAGS[@]}"; then
  log_error "‚ùå Component deployment failed"
  log_error "üí° Try running with --dry-run first to validate the configuration"
  exit 1
else
  log_info "‚úÖ Advanced component deployment completed successfully!"
  log_info "üì¶ Deployed components: ${COMPONENTS[*]}"
  log_info "üéØ Environment: $ENVIRONMENT"
  if [[ "$EXECUTION_MODE_OPTIONS" == *"dry-run"* ]]; then
    log_info "üìã Dry-run completed - no changes were made"
  elif [[ "$EXECUTION_MODE_OPTIONS" == *"check"* ]]; then
    log_info "üîç Check mode completed - validation passed"
  fi
fi

log_debug "run-component script finished."