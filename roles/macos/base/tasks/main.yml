---
# Set up shell configuration first
- name: Configure shell environment
  block:
    - name: Set default shell to zsh
      ansible.builtin.shell: |
        chsh -s /bin/zsh {{ ansible_user }}
      become: true
      changed_when: false

    - name: Get default shell
      ansible.builtin.command: dscl . -read /Users/{{ ansible_user }} UserShell
      register: user_shell_info
      changed_when: false

    - name: Set shell configuration facts
      ansible.builtin.set_fact:
        shell_config: "{{ macos_shell_config }}"
      changed_when: false

    - name: Set shell-specific facts (force zsh)
      ansible.builtin.set_fact:
        user_shell: "zsh"
        shell_profile: "{{ ansible_env.HOME }}/.zprofile"
        shell_rc: "{{ ansible_env.HOME }}/.zshrc"
      changed_when: false

    - name: Ensure shell configuration files exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: touch
        mode: "0644"
      loop:
        - "{{ shell_profile }}"
        - "{{ shell_rc }}"
      changed_when: false

    - name: Configure shell environment
      ansible.builtin.blockinfile:
        path: "{{ item.path }}"
        marker: "# {mark} ANSIBLE MANAGED BLOCK - {{ item.name }}"
        block: "{{ item.content }}"
      loop:
        - path: "{{ shell_profile }}"
          name: "PATH_CONFIG"
          content: |
            # System PATH configuration
            export PATH="{{ homebrew_prefix }}/bin:$PATH"

            # Homebrew configuration
            eval "$({{ homebrew_prefix }}/bin/brew shellenv)"

            {% if macos_configure.pyenv %}
            # Pyenv configuration
            export PYENV_ROOT="$HOME/.pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(pyenv init -)"
            {% endif %}

            {% if macos_configure.node %}
            # Node.js configuration
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            {% endif %}

        - path: "{{ shell_rc }}"
          name: "SHELL_CONFIG"
          content: |
            # Shell-specific configurations
            export LANG=en_US.UTF-8
            export EDITOR=vim
      changed_when: false

# Configure passwordless sudo for the ansible_user (admin)
- name: Check existing sudoers entries
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    grep -E "^({{ ansible_user }}|%admin|%wheel).*NOPASSWD:.*ALL" /etc/sudoers || echo "not_found"
  register: sudoers_check
  changed_when: false
  tags: ["sudo", "setup"]

- name: Ensure ansible_user can sudo without a password
  become: true
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    state: present
    regexp: "^{{ ansible_user }}\\\\s+ALL="
    line: "{{ ansible_user }} ALL=(ALL) NOPASSWD: ALL"
    validate: "visudo -cf %s"
  when: sudoers_check.stdout == "not_found" or sudoers_check.stdout | regex_search('^%') is not none
  tags: ["sudo", "setup"]

- name: Ensure group admin entry doesn't override user entry
  become: true
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    state: present
    insertafter: "^{{ ansible_user }} ALL=(ALL) NOPASSWD: ALL"
    regexp: "^%admin\\\\s+ALL="
    line: "%admin ALL=(ALL) ALL"
    validate: "visudo -cf %s"
  when: sudoers_check.stdout | regex_search('^%admin') is not none
  tags: ["sudo", "setup"]

# Clean up legacy JPR Launch Agents and Daemons
- name: Clean up legacy JPR services
  tags: ["cleanup", "jpr"]
  block:
    - name: Get list of JPR Launch Agents
      ansible.builtin.shell: |
        set -o pipefail
        launchctl list | grep ca.jpr | awk '{print $3}' || true
      register: jpr_agents
      changed_when: false

    - name: Get list of JPR Launch Daemons
      ansible.builtin.shell: |
        set -o pipefail
        sudo launchctl list | grep ca.jpr | awk '{print $3}' || true
      register: jpr_daemons
      changed_when: false
      become: true

    - name: Unload JPR Launch Agents
      ansible.builtin.shell: |
        set -o pipefail
        launchctl unload "{{ ansible_env.HOME }}/Library/LaunchAgents/{{ item }}.plist"
      loop: "{{ jpr_agents.stdout_lines }}"
      when: jpr_agents.stdout_lines | length > 0
      failed_when: false
      changed_when: false

    - name: Remove JPR Launch Agent files
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/Library/LaunchAgents/{{ item }}.plist"
        state: absent
      loop: "{{ jpr_agents.stdout_lines }}"
      when: jpr_agents.stdout_lines | length > 0
      changed_when: false

    - name: Unload JPR Launch Daemons
      ansible.builtin.shell: |
        set -o pipefail
        sudo launchctl unload "/Library/LaunchDaemons/{{ item }}.plist"
      loop: "{{ jpr_daemons.stdout_lines }}"
      when: jpr_daemons.stdout_lines | length > 0
      become: true
      failed_when: false
      changed_when: false

    - name: Remove JPR Launch Daemon files
      ansible.builtin.file:
        path: "/Library/LaunchDaemons/{{ item }}.plist"
        state: absent
      loop: "{{ jpr_daemons.stdout_lines }}"
      when: jpr_daemons.stdout_lines | length > 0
      become: true
      changed_when: false

    - name: Verify JPR cleanup - check remaining agents
      ansible.builtin.shell: |
        set -o pipefail
        launchctl list | grep ca.jpr || echo "No JPR agents found"
      register: remaining_agents
      changed_when: false

    - name: Verify JPR cleanup - check remaining daemons
      ansible.builtin.shell: |
        set -o pipefail
        sudo launchctl list | grep ca.jpr || echo "No JPR daemons found"
      register: remaining_daemons
      changed_when: false
      become: true

    - name: Report JPR cleanup results
      ansible.builtin.debug:
        msg:
          - "JPR Launch Agents cleanup: {{ 'COMPLETE' if 'No JPR agents found' in remaining_agents.stdout else 'INCOMPLETE - ' + remaining_agents.stdout }}"
          - "JPR Launch Daemons cleanup: {{ 'COMPLETE' if 'No JPR daemons found' in remaining_daemons.stdout else 'INCOMPLETE - ' + remaining_daemons.stdout }}"

# Configure sound settings
- name: Configure macOS sound settings
  tags: ["sound", "audio"]
  block:
    - name: Disable startup sound
      ansible.builtin.shell: |
        sudo nvram StartupMute=%01
      become: true
      changed_when: false

    - name: Set default volume to 0
      ansible.builtin.shell: |
        osascript -e "set volume output volume 0"
      changed_when: false

    - name: Disable user interface sound effects
      ansible.builtin.shell: |
        defaults write com.apple.systemsound 'com.apple.sound.uiaudio.enabled' -int 0
      changed_when: false

    - name: Disable alert volume
      ansible.builtin.shell: |
        defaults write NSGlobalDomain com.apple.sound.beep.volume -float 0.0
      changed_when: false

    - name: Disable beep sound
      ansible.builtin.shell: |
        defaults write NSGlobalDomain com.apple.sound.beep.sound -string ""
      changed_when: false

    - name: Disable feedback sounds for volume changes
      ansible.builtin.shell: |
        defaults write NSGlobalDomain com.apple.sound.beep.feedback -int 0
      changed_when: false

    - name: Apply sound settings immediately
      ansible.builtin.shell: |
        killall SystemUIServer
      failed_when: false
      changed_when: false

# Configure screen saver and display settings
- name: Configure screen saver and display settings
  tags: ["screensaver", "display"]
  block:
    - name: Disable screen saver
      ansible.builtin.shell: |
        defaults -currentHost write com.apple.screensaver idleTime -int 0
      changed_when: false

    - name: Never turn off display (set to never)
      ansible.builtin.shell: |
        sudo pmset -a displaysleep 0
      become: true
      changed_when: false

    - name: Disable computer sleep
      ansible.builtin.shell: |
        sudo pmset -a sleep 0
      become: true
      changed_when: false

    - name: Disable disk sleep
      ansible.builtin.shell: |
        sudo pmset -a disksleep 0
      become: true
      changed_when: false

    - name: No password required after screen saver begins
      ansible.builtin.shell: |
        defaults write com.apple.screensaver askForPassword -int 0
      changed_when: false

    - name: No password required after display is turned off
      ansible.builtin.shell: |
        defaults write com.apple.screensaver askForPasswordDelay -int 0
      changed_when: false

    - name: Disable screen saver for all users
      ansible.builtin.shell: |
        defaults write /Library/Preferences/com.apple.screensaver idleTime -int 0
      become: true
      changed_when: false

    - name: Apply screen saver settings immediately
      ansible.builtin.shell: |
        killall cfprefsd
      failed_when: false
      changed_when: false
