#!/bin/bash

# Script to reboot machines using Ansible ad-hoc commands
# Usage: ./reboot [options]
#   -l <limit>     : Limit execution to specific hosts (comma-separated)
#   -i <inventory> : Specify inventory (staging, production) 
#   -h, --help     : Show this help message

# Source helper functions and variables
HELPER_SCRIPT_PATH="$(dirname "${BASH_SOURCE[0]}")/helpers.sh"
if [ -f "$HELPER_SCRIPT_PATH" ]; then
  # shellcheck source=./helpers.sh
  source "$HELPER_SCRIPT_PATH"
else
  echo "ERROR: helpers.sh not found at $HELPER_SCRIPT_PATH"
  exit 1
fi

# Set script-specific log level
SCRIPT_LOG_LEVEL=$_LOG_LEVEL_INFO
export SCRIPT_LOG_LEVEL

show_help() {
  cat << EOF
Usage: $0 [options]

Reboot macOS machines using Ansible ad-hoc commands.

Options:
  -l <limit>     Limit execution to specific hosts (comma-separated)
                 Example: -l f1-ca-001,f1-ca-003,f1-ca-012
  -i <inventory> Specify inventory environment (staging, production)
                 Default: production
  -h, --help     Show this help message

Examples:
  # Reboot specific machines in production
  $0 -l f1-ca-001,f1-ca-003,f1-ca-012
  
  # Reboot machines in staging
  $0 -i staging -l staging-host-001
  
  # Interactive mode (will prompt for selection)
  $0

EOF
}

# Parse command line arguments
INVENTORY="production"
LIMIT=""
ANSIBLE_EXTRA_ARGS=()

while [[ $# -gt 0 ]]; do
  case $1 in
    -l|--limit)
      LIMIT="$2"
      shift 2
      ;;
    -i|--inventory)
      INVENTORY="$2"
      shift 2
      ;;
    -h|--help)
      show_help
      exit 0
      ;;
    *)
      # Pass through any other arguments to ansible
      ANSIBLE_EXTRA_ARGS+=("$1")
      shift
      ;;
  esac
done

log_debug "reboot script started."
ensure_ansible_root_dir

# --- SSH Agent Key Loading ---
log_info "Checking and loading SSH key into agent..."

# Ensure ssh-agent is running
if ! ssh-add -l >/dev/null 2>&1; then
  log_info "ssh-agent not running or no keys loaded. Starting agent..."
  eval "$(ssh-agent -s)" >/dev/null
  if [ $? -ne 0 ]; then
    log_error "Failed to start ssh-agent. Please start it manually."
    exit 1
  fi
fi

# Variables from helpers.sh

# Check for required dependencies
check_vault_password_file
check_yq_installed
check_ansible_vault_installed
check_ansible_installed

log_info "Attempting to add SSH private key from Ansible Vault to ssh-agent..."
if ansible-vault view "$VAULT_YML_FILE" --vault-password-file "$OA_ANSIBLE_VAULT_PASSWORD_FILE" |
  yq -re '.vault_ssh_private_key // ""' |
  ssh-add - >/dev/null 2>&1; then
  log_info "SSH key from vault successfully added/verified in ssh-agent."
else
  if ssh-add -l >/dev/null 2>&1; then
    log_warn "Could not add key (might already be loaded). An identity is present in the agent."
  else
    log_error "Failed to add SSH key and no keys present in agent. SSH authentication might fail."
    exit 1
  fi
fi

# Build inventory path
INVENTORY_PATH="inventory/${INVENTORY}/hosts.yml"

if [ ! -f "$INVENTORY_PATH" ]; then
  log_error "Inventory file not found: $INVENTORY_PATH"
  exit 1
fi

# Build ansible command
ANSIBLE_CMD="ansible"
ANSIBLE_CMD+=" -i $INVENTORY_PATH"
ANSIBLE_CMD+=" all"

# Add limit if specified
if [ -n "$LIMIT" ]; then
  ANSIBLE_CMD+=" -l $LIMIT"
  log_info "Limiting execution to: $LIMIT"
fi

# Add the reboot module and options
ANSIBLE_CMD+=" -m ansible.builtin.reboot"
ANSIBLE_CMD+=" -a 'msg=\"Reboot initiated by oaAnsible reboot script\" pre_reboot_delay=5 post_reboot_delay=30 reboot_timeout=600'"

# Add become for privilege escalation
ANSIBLE_CMD+=" --become"

# Add any extra arguments
if [ ${#ANSIBLE_EXTRA_ARGS[@]} -gt 0 ]; then
  ANSIBLE_CMD+=" ${ANSIBLE_EXTRA_ARGS[*]}"
fi

log_warn "⚠️  About to REBOOT machines in $INVENTORY environment"
if [ -n "$LIMIT" ]; then
  log_warn "⚠️  Target machines: $LIMIT"
else
  log_warn "⚠️  Target: ALL machines in $INVENTORY"
fi
log_warn "Press CTRL+C now to abort, or wait 5 seconds to continue..."
sleep 5

log_info "Executing reboot command..."
log_debug "Command: $ANSIBLE_CMD"

# Execute the command
eval "ANSIBLE_CONFIG=ansible.cfg $ANSIBLE_CMD"

REBOOT_EXIT_CODE=$?

if [ $REBOOT_EXIT_CODE -eq 0 ]; then
  log_info "Reboot command completed successfully."
  log_info "Machines should be rebooting now and will be back online in a few minutes."
else
  log_error "Reboot command failed with exit code $REBOOT_EXIT_CODE."
fi

log_debug "reboot script finished."
exit $REBOOT_EXIT_CODE