---
# Install and configure pyenv and Python
- name: Configure pyenv and Python
  when: macos_configure.pyenv | bool
  # This entire block will only run if configure.pyenv is set to true in default.config.yml
  block:
    # Check if pyenv is already installed
    - name: Check if pyenv is installed
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.pyenv"
      register: pyenv_install

    # Check if .pyenv is a valid git repository
    - name: Check if .pyenv is a valid git repository
      ansible.builtin.command: git -C "{{ ansible_env.HOME }}/.pyenv" rev-parse
      register: pyenv_git_check
      changed_when: false
      failed_when: false
      when: pyenv_install.stat.exists

    # Remove .pyenv if it exists but is not a valid git repository
    - name: Remove invalid .pyenv directory
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.pyenv"
        state: absent
      when: pyenv_install.stat.exists and (pyenv_git_check.rc | default(1)) != 0
      register: pyenv_removed

    # Install pyenv if not already installed or was just removed
    - name: Install pyenv
      ansible.builtin.git:
        repo: https://github.com/pyenv/pyenv.git
        dest: "{{ ansible_env.HOME }}/.pyenv"
        version: master
        update: true
      when: not pyenv_install.stat.exists or pyenv_removed.changed | default(false)

    # Update pyenv to get latest Python versions
    - name: Update pyenv
      ansible.builtin.git:
        repo: https://github.com/pyenv/pyenv.git
        dest: "{{ ansible_env.HOME }}/.pyenv"
        version: master
        update: true
      when: pyenv_install.stat.exists and not pyenv_removed.changed | default(false) and (pyenv_git_check.rc | default(1)) == 0

    # Add pyenv to PATH (zsh)
    - name: Add pyenv to PATH in .zshrc
      ansible.builtin.lineinfile:
        dest: "{{ ansible_env.HOME }}/.zshrc"
        line: 'export PATH="$HOME/.pyenv/bin:$PATH"'
        create: true
        mode: "0644"

    # Initialize pyenv (zsh)
    - name: Initialize pyenv in .zshrc
      ansible.builtin.lineinfile:
        dest: "{{ ansible_env.HOME }}/.zshrc"
        line: 'eval "$(pyenv init -)"'
        create: true
        mode: "0644"

    # Add pyenv to PATH (bash - for compatibility)
    - name: Add pyenv to PATH in .bash_profile
      ansible.builtin.lineinfile:
        dest: "{{ ansible_env.HOME }}/.bash_profile"
        line: 'export PATH="$HOME/.pyenv/bin:$PATH"'
        create: true
        mode: "0644"

    # Initialize pyenv (bash - for compatibility)
    - name: Initialize pyenv in .bash_profile
      ansible.builtin.lineinfile:
        dest: "{{ ansible_env.HOME }}/.bash_profile"
        line: 'eval "$(pyenv init -)"'
        create: true
        mode: "0644"

    # Ensure readline and openssl are available via Homebrew (for Python compilation)
    - name: Install readline and openssl via Homebrew
      community.general.homebrew:
        name: 
          - readline
          - openssl@3
        state: present
        update_homebrew: false
      register: homebrew_deps
      failed_when: false

    # Check if Python version is installed
    - name: Check if Python version is installed
      ansible.builtin.shell: |
        set -o pipefail
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$($PYENV_ROOT/bin/pyenv init -)"
        $PYENV_ROOT/bin/pyenv versions --bare
      register: installed_versions
      changed_when: false

    # Install Python version with retry and fallback mechanisms
    - name: Install Python version (attempt 1 - standard installation)
      ansible.builtin.shell: |
        set -o pipefail
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$($PYENV_ROOT/bin/pyenv init -)"
        $PYENV_ROOT/bin/pyenv install {{ macos_python.version }}
      when: macos_python.version not in (installed_versions.stdout_lines | default([]))
      changed_when: false
      register: python_install_attempt1
      failed_when: false
      
    # Retry with alternative mirror if first attempt failed
    - name: Install Python version (attempt 2 - with alternative readline mirror)
      ansible.builtin.shell: |
        set -o pipefail
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$($PYENV_ROOT/bin/pyenv init -)"
        export PYTHON_BUILD_MIRROR_URL="https://npm.taobao.org/mirrors/python"
        export PYTHON_BUILD_MIRROR_URL_SKIP_CHECKSUM=1
        $PYENV_ROOT/bin/pyenv install {{ macos_python.version }}
      when: 
        - macos_python.version not in (installed_versions.stdout_lines | default([]))
        - python_install_attempt1.rc != 0
      changed_when: false
      register: python_install_attempt2
      failed_when: false
      
    # Final attempt with Homebrew's readline if pyenv still fails
    - name: Install Python version (attempt 3 - using system readline)
      ansible.builtin.shell: |
        set -o pipefail
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$($PYENV_ROOT/bin/pyenv init -)"
        # Use system readline and openssl
        export LDFLAGS="-L$(brew --prefix readline)/lib -L$(brew --prefix openssl)/lib"
        export CPPFLAGS="-I$(brew --prefix readline)/include -I$(brew --prefix openssl)/include"
        export PYTHON_CONFIGURE_OPTS="--with-readline"
        $PYENV_ROOT/bin/pyenv install {{ macos_python.version }}
      when: 
        - macos_python.version not in (installed_versions.stdout_lines | default([]))
        - python_install_attempt1.rc != 0
        - python_install_attempt2.rc != 0
      changed_when: false
      register: python_install_attempt3
      
    # Last resort: try clearing cache and retry
    - name: Install Python version (attempt 4 - clear cache and retry)
      ansible.builtin.shell: |
        set -o pipefail
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$($PYENV_ROOT/bin/pyenv init -)"
        # Clear pyenv cache to force fresh downloads
        rm -rf "$PYENV_ROOT/cache"/*
        # Try with specific build flags
        export PYTHON_BUILD_CACHE_PATH="$PYENV_ROOT/cache"
        export MAKEFLAGS="-j$(sysctl -n hw.ncpu)"
        $PYENV_ROOT/bin/pyenv install {{ macos_python.version }}
      when:
        - macos_python.version not in (installed_versions.stdout_lines | default([]))
        - python_install_attempt1.rc != 0
        - python_install_attempt2.rc != 0  
        - python_install_attempt3.rc != 0
      changed_when: false
      register: python_install_attempt4
      failed_when: false
    
    # Fail if all attempts failed
    - name: Fail if Python installation failed after all attempts
      ansible.builtin.fail:
        msg: |
          Python {{ macos_python.version }} installation failed after all attempts.
          Attempt 1 (standard): {{ python_install_attempt1.stderr | default('N/A') }}
          Attempt 2 (alternative mirror): {{ python_install_attempt2.stderr | default('N/A') }}
          Attempt 3 (system readline): {{ python_install_attempt3.stderr | default('N/A') }}
          Attempt 4 (cache clear retry): {{ python_install_attempt4.stderr | default('N/A') }}
          
          Common solutions:
          1. Check internet connectivity
          2. Try running manually: pyenv install {{ macos_python.version }}
          3. Clear pyenv cache: rm -rf ~/.pyenv/cache/*
      when:
        - macos_python.version not in (installed_versions.stdout_lines | default([]))
        - python_install_attempt1.rc != 0
        - python_install_attempt2.rc != 0
        - python_install_attempt3.rc != 0
        - python_install_attempt4.rc != 0

    # Set global Python version
    - name: Set global Python version
      ansible.builtin.shell: |
        set -o pipefail
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$($PYENV_ROOT/bin/pyenv init -)"
        $PYENV_ROOT/bin/pyenv global {{ macos_python.version }}
      register: pyenv_set_global
      changed_when: pyenv_set_global.rc == 0

    # Notify handler to rehash pyenv when new version is installed
    - name: Rehash pyenv when global version changes
      ansible.builtin.meta: flush_handlers
      when: pyenv_set_global.changed | default(false)
      notify: Rehash pyenv

    # Install uv - modern Python package manager
    - name: Check if uv is installed
      ansible.builtin.command: which uv
      register: uv_check
      changed_when: false
      failed_when: false

    - name: Install uv via curl
      ansible.builtin.shell: |
        set -o pipefail
        curl -fsSL https://astral.sh/uv/install.sh | sh
      args:
        executable: /bin/bash
      when: uv_check.rc != 0
      changed_when: false

    - name: Add uv to PATH in .zshrc
      ansible.builtin.lineinfile:
        dest: "{{ ansible_env.HOME }}/.zshrc"
        line: 'export PATH="$HOME/.cargo/bin:$PATH"'
        create: true
        mode: "0644"
      when: uv_check.rc != 0

    - name: Add uv to PATH in .bash_profile
      ansible.builtin.lineinfile:
        dest: "{{ ansible_env.HOME }}/.bash_profile"
        line: 'export PATH="$HOME/.cargo/bin:$PATH"'
        create: true
        mode: "0644"
      when: uv_check.rc != 0
