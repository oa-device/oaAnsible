---
# Tasks for configuring camera permissions on macOS
# This role focuses on granting camera access to required applications

# Verify Python virtual environments exist
- name: Check if Python virtual environments exist
  ansible.builtin.stat:
    path: "{{ item }}"
  loop:
    - "{{ ansible_user_dir }}/orangead/macos-api/.venv/bin/python3"
    - "{{ ansible_user_dir }}/orangead/tracker/.venv/bin/python"
  register: venv_check

- name: Fail if Python virtual environments don't exist
  ansible.builtin.fail:
    msg: "Python virtual environments don't exist. Please run the API and Tracker roles first."
  when: not (venv_check.results[0].stat.exists and venv_check.results[1].stat.exists)

# Get Python paths
- name: Get Python paths
  ansible.builtin.shell: |
    which python3
  register: python_path
  changed_when: false

# Determine real Python executable paths (following symlinks)
- name: Get real Python executable paths
  ansible.builtin.shell: |
    readlink -f $(which python3) || which python3
  register: real_python_path
  changed_when: false

# Set Python executable paths
- name: Set Python executable paths
  ansible.builtin.set_fact:
    api_python: "{{ python_path.stdout }}"
    tracker_python: "{{ ansible_user_dir }}/orangead/tracker/.venv/bin/python"
    python_execs:
      real_api: "{{ real_python_path.stdout }}"
      real_tracker: "{{ real_python_path.stdout }}"

# Show Python executable paths
- name: Show Python executable paths
  ansible.builtin.debug:
    msg: |
      API Python: {{ api_python }} → {{ python_execs.real_api }}
      Tracker Python: {{ tracker_python }} → {{ python_execs.real_tracker }}

# Define applications that need camera access
- name: Set camera access applications
  ansible.builtin.set_fact:
    camera_apps:
      - name: "{{ api_python }}"
        type: 1  # Executable path
      - name: "{{ python_execs.real_api }}"
        type: 1  # Executable path
      - name: "{{ tracker_python }}"
        type: 1  # Executable path
      - name: "{{ python_execs.real_tracker }}"
        type: 1  # Executable path
      - name: "/usr/local/bin/tailscaled"
        type: 1  # Executable path
      - name: "/usr/libexec/sshd-keygen-wrapper"
        type: 1  # Executable path
      - name: "com.apple.Terminal"
        type: 0  # Bundle ID

# Check camera permissions using template
- name: Create script to check camera permissions
  ansible.builtin.template:
    src: check_camera_permissions.sh.j2
    dest: /tmp/check_camera_permissions.sh
    mode: '0755'
  changed_when: false

# Run the check camera permissions script
- name: Run script to check camera permissions
  ansible.builtin.command: /tmp/check_camera_permissions.sh
  register: camera_check_output
  changed_when: false

# Parse camera check output as JSON
- name: Parse camera check output
  ansible.builtin.set_fact:
    camera_status: "{{ camera_check_output.stdout | from_json }}"

# Display camera status
- name: Set API access status
  ansible.builtin.set_fact:
    api_access_status: "{% if camera_status.api_access | int > 0 %}Granted{% else %}Not granted{% endif %}"

- name: Set Tracker access status
  ansible.builtin.set_fact:
    tracker_access_status: "{% if camera_status.tracker_access | int > 0 %}Granted{% else %}Not granted{% endif %}"

- name: Set Tailscale access status
  ansible.builtin.set_fact:
    tailscale_access_status: "{% if camera_status.tailscale_access | int > 0 %}Granted{% else %}Not granted{% endif %}"

- name: Set Terminal access status
  ansible.builtin.set_fact:
    terminal_access_status: "{% if camera_status.terminal_access | int > 0 %}Granted{% else %}Not granted{% endif %}"

- name: Set SSH access status
  ansible.builtin.set_fact:
    ssh_access_status: "{% if camera_status.ssh_access | int > 0 %}Granted{% else %}Not granted{% endif %}"

- name: Set shared memory status
  ansible.builtin.set_fact:
    shared_memory_status: "{% if camera_status.shared_memory_exists | int > 0 %}Yes{% else %}No{% endif %}"

- name: Set tracker running status
  ansible.builtin.set_fact:
    tracker_running_status: "{% if camera_status.tracker_running | int > 0 %}Yes{% else %}No{% endif %}"

- name: Set tracker accessible status
  ansible.builtin.set_fact:
    tracker_accessible_status: "{% if camera_status.tracker_accessible | int > 0 %}Yes{% else %}No{% endif %}"

- name: Display camera status
  ansible.builtin.debug:
    msg: |
      Camera permissions status:
      - API Python: {{ api_access_status }}
      - Tracker Python: {{ tracker_access_status }}
      - Tailscale: {{ tailscale_access_status }}
      - Terminal: {{ terminal_access_status }}
      - SSH: {{ ssh_access_status }}
      
      Shared memory status:
      - Shared memory file exists: {{ shared_memory_status }}
      - Tracker is running: {{ tracker_running_status }}
      - Tracker camera feed is accessible: {{ tracker_accessible_status }}

# Grant camera permissions if needed
- name: Check if API access is missing
  ansible.builtin.set_fact:
    api_access_missing: "{% if camera_status.api_access | int == 0 %}true{% else %}false{% endif %}"

- name: Check if Tracker access is missing
  ansible.builtin.set_fact:
    tracker_access_missing: "{% if camera_status.tracker_access | int == 0 %}true{% else %}false{% endif %}"

- name: Check if Tailscale access is missing
  ansible.builtin.set_fact:
    tailscale_access_missing: "{% if camera_status.tailscale_access | int == 0 %}true{% else %}false{% endif %}"

- name: Check if Terminal access is missing
  ansible.builtin.set_fact:
    terminal_access_missing: "{% if camera_status.terminal_access | int == 0 %}true{% else %}false{% endif %}"

- name: Check if SSH access is missing
  ansible.builtin.set_fact:
    ssh_access_missing: "{% if camera_status.ssh_access | int == 0 %}true{% else %}false{% endif %}"

- name: Check if camera permissions need to be granted
  ansible.builtin.set_fact:
    need_camera_permissions: "{{ api_access_missing == 'true' or tracker_access_missing == 'true' or tailscale_access_missing == 'true' or terminal_access_missing == 'true' or ssh_access_missing == 'true' }}"

- name: Create script to grant camera permissions
  ansible.builtin.template:
    src: grant_camera_permissions.sh.j2
    dest: /tmp/grant_camera_permissions.sh
    mode: '0755'
  changed_when: true
  when: need_camera_permissions

- name: Run script to grant camera permissions
  ansible.builtin.command: sudo /tmp/grant_camera_permissions.sh
  register: grant_camera_result
  changed_when: true
  when: need_camera_permissions

- name: Display grant camera result
  ansible.builtin.debug:
    msg: "{{ grant_camera_result.stdout_lines }}"
  when: need_camera_permissions and grant_camera_result is defined

# Verify camera access
- name: Check if camera permissions are granted
  ansible.builtin.set_fact:
    camera_permissions_granted: "{{ api_access_status == 'Granted' and tracker_access_status == 'Granted' and tailscale_access_status == 'Granted' and terminal_access_status == 'Granted' and ssh_access_status == 'Granted' }}"

- name: Create script to verify camera access
  ansible.builtin.template:
    src: verify_camera_access.sh.j2
    dest: /tmp/verify_camera_access.sh
    mode: '0755'
  changed_when: true
  when: camera_permissions_granted

- name: Run script to verify camera access
  ansible.builtin.command: /tmp/verify_camera_access.sh
  register: verify_camera_result
  changed_when: false
  when: camera_permissions_granted

- name: Display verify camera result
  ansible.builtin.debug:
    msg: "{{ verify_camera_result.stdout_lines }}"
  when: camera_permissions_granted and verify_camera_result is defined

# Verify camera permissions after granting
- name: Create script to verify camera permissions
  ansible.builtin.template:
    src: verify_camera_permissions.sh.j2
    dest: /tmp/verify_camera_permissions.sh
    mode: '0755'
  changed_when: false

- name: Run script to verify camera permissions
  ansible.builtin.command: /tmp/verify_camera_permissions.sh
  register: verify_permissions_result
  changed_when: false

- name: Display verify permissions result
  ansible.builtin.debug:
    msg: "{{ verify_permissions_result.stdout_lines }}"

- name: Camera permissions status
  ansible.builtin.debug:
    msg: |
      Camera Permissions:
      {% if camera_permissions_granted == 'True' or camera_permissions_granted == 'true' %}
      ✅ Camera permissions are already correctly granted to all applications
      {% elif grant_camera_result is defined %}
      ✅ Camera permissions were successfully granted
      {% else %}
      ❌ Camera permissions may require manual intervention
         Please check System Settings > Privacy & Security > Camera
      {% endif %}
      
      {% if shared_memory_status == 'Yes' and tracker_running_status == 'Yes' %}
      ℹ️ Tracker is running and using the camera via shared memory
      {% if tracker_accessible_status == 'Yes' %}
      ✅ Tracker's camera feed is accessible via HTTP
      {% else %}
      ⚠️ Tracker's camera feed is not accessible via HTTP
      {% endif %}
      
      Note: The macos-api has been configured to proxy the Tracker's camera feed
      instead of accessing the camera directly.
      {% endif %}
