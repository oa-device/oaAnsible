---
# macOS ML Workstation Onboarding Playbook
# Sets up oaSentinel ML development environment on macOS

- name: Setup macOS ML Development Workstation
  hosts: macos
  gather_facts: yes
  become: no
  
  vars:
    # Role execution control
    execute_base_setup: true
    execute_python_setup: true
    execute_ml_setup: true
    execute_security_setup: false  # Optional for development machines
    
    # Development vs Production modes
    development_mode: true
    
  pre_tasks:
    - name: Verify macOS platform
      fail:
        msg: "This playbook is designed for macOS hosts only"
      when: ansible_os_family != "Darwin"
      tags: [always]
    
    - name: Display setup information
      debug:
        msg:
          - "🍎 Setting up macOS ML Workstation"
          - "Host: {{ inventory_hostname }}"
          - "Platform: {{ ansible_os_family }} {{ ansible_distribution_version }}"
          - "Architecture: {{ ansible_architecture }}"
          - "User: {{ ansible_user }}"
          - "Mode: {{ 'Development' if development_mode else 'Production' }}"
      tags: [always]
    
    - name: Check available disk space
      shell: df -h / | tail -1 | awk '{print $4}'
      register: disk_space
      changed_when: false
      tags: [always]
    
    - name: Display disk space
      debug:
        msg: "Available disk space: {{ disk_space.stdout }}"
      tags: [always]

  tasks:
    - name: Setup macOS base environment
      include_role:
        name: macos/base
      when: execute_base_setup
      tags: [base, setup]
    
    - name: Setup Python development environment
      include_role:
        name: macos/python
      when: execute_python_setup
      tags: [python, setup]
    
    - name: Setup Node.js environment (for development tools)
      include_role:
        name: macos/node
      when: development_mode
      tags: [node, setup, dev]
    
    - name: Setup ML workstation (common components)
      include_role:
        name: common/ml_workstation
      tags: [ml, setup]
    
    - name: Setup macOS-specific ML optimizations
      include_role:
        name: macos/ml_workstation
      tags: [ml, macos, setup]
    
    - name: Configure security settings (optional)
      include_role:
        name: macos/security
      when: execute_security_setup
      tags: [security, setup]

  post_tasks:
    - name: Run final verification
      shell: |
        cd "{{ oasentinel_install_dir }}"
        source .venv/bin/activate
        python src/cli.py info
      become_user: "{{ ansible_user }}"
      register: final_verification
      tags: [verify]
    
    - name: Create completion marker
      file:
        path: "{{ ansible_user_dir }}/.ml_workstation_setup_complete"
        state: touch
        owner: "{{ ansible_user }}"
      tags: [setup]
    
    - name: Setup completion summary
      debug:
        msg:
          - "🎉 macOS ML Workstation Setup Complete!"
          - "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          - "📁 oaSentinel: {{ oasentinel_install_dir }}"
          - "🍎 Platform: {{ ansible_os_family }} on {{ ansible_architecture }}"
          - "🚀 Ready for ML development and training"
          - ""
          - "🔧 Quick Start:"
          - "  • Double-click 'oaSentinel Terminal' on Desktop"
          - "  • Or use terminal: cd {{ oasentinel_install_dir }} && source .venv/bin/activate"
          - "  • Check status: mlstatus"
          - "  • Access CLI: mlcli"
          - ""
          - "📚 Next Steps:"
          - "  1. Download dataset: mlcli download --dataset crowdhuman"
          - "  2. Process data: mlprocess"
          - "  3. Start training: mltrain --config configs/macos_optimized.yaml"
          - ""
          - "💡 For help: mlcli --help"
      tags: [summary]

  handlers:
    - name: Source shell configuration
      shell: source {{ ansible_user_dir }}/.zshrc
      become_user: "{{ ansible_user }}"
      ignore_errors: yes