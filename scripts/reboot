#!/bin/bash

# reboot - Reboot machines in selected inventory
# Usage: ./scripts/reboot [inventory_name] [host_pattern]

set -e

# Get script directory and source helpers
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/helpers.sh"

# Ensure we're in the correct directory
ensure_ansible_root_dir

# Check dependencies
check_ansible_installed
check_yq_installed
check_vault_password_file

show_usage() {
    echo "Usage: $0 [inventory_name] [host_pattern]"
    echo ""
    echo "Reboot machines in the specified inventory"
    echo ""
    echo "Arguments:"
    echo "  inventory_name  - Target inventory (optional, will prompt if not provided)"
    echo "  host_pattern    - Host pattern to target (optional, will target all if not provided)"
    echo ""
    echo "Examples:"
    echo "  $0                          # Interactive: select inventory and reboot all hosts"
    echo "  $0 f1-prod                  # Reboot all hosts in f1-prod inventory"
    echo "  $0 f1-staging f1-ca-001     # Reboot specific host in f1-staging"
    echo "  $0 f1-prod \"f1-ca-*\"        # Reboot hosts matching pattern in f1-prod"
    echo ""
    echo "Available inventories:"
    discover_inventories | sed 's/^/  /'
}

# Parse arguments
INVENTORY_NAME=""
HOST_PATTERN=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_usage
            exit 0
            ;;
        *)
            if [ -z "$INVENTORY_NAME" ]; then
                INVENTORY_NAME="$1"
            elif [ -z "$HOST_PATTERN" ]; then
                HOST_PATTERN="$1"
            else
                log_error "Too many arguments. Use --help for usage information."
                exit 1
            fi
            ;;
    esac
    shift
done

# Interactive inventory selection if not provided
if [ -z "$INVENTORY_NAME" ]; then
    log_info "No inventory specified. Please select one:"
    # Use a different approach for older bash versions
    available_inventories=()
    while IFS= read -r inv; do
        available_inventories+=("$inv")
    done < <(discover_inventories)
    
    if [ ${#available_inventories[@]} -eq 0 ]; then
        log_error "No inventories found in $OA_ANSIBLE_INVENTORY_DIR"
        exit 1
    fi
    
    select inv in "${available_inventories[@]}"; do
        if [[ -n "$inv" ]]; then
            INVENTORY_NAME="$inv"
            log_info "Selected inventory: $INVENTORY_NAME"
            break
        else
            log_warn "Invalid selection. Please try again."
        fi
    done
fi

# Get inventory path
INVENTORY_PATH=$(get_inventory_path "$INVENTORY_NAME")
if [ $? -ne 0 ] || [ ! -f "$INVENTORY_PATH" ]; then
    log_error "Inventory not found: $INVENTORY_NAME"
    log_error "Available inventories: $(discover_inventories | tr '\n' ' ')"
    exit 1
fi

# Set host pattern
if [ -z "$HOST_PATTERN" ]; then
    HOST_PATTERN="all"
    log_info "No host pattern specified, targeting all hosts in $INVENTORY_NAME"
else
    log_info "Targeting hosts matching pattern: $HOST_PATTERN"
fi

# Safety confirmation for production inventories
if [[ "$INVENTORY_NAME" =~ prod ]]; then
    log_warn "⚠️  WARNING: You are about to reboot machines in a PRODUCTION environment!"
    log_warn "Inventory: $INVENTORY_NAME"
    log_warn "Host pattern: $HOST_PATTERN"
    echo ""
    read -p "Type 'YES' to confirm reboot of production machines: " confirm
    if [ "$confirm" != "YES" ]; then
        log_info "Reboot cancelled by user"
        exit 0
    fi
fi

# Load SSH key and execute reboot
log_info "Initiating reboot for inventory: $INVENTORY_NAME, pattern: $HOST_PATTERN"

if ! load_ssh_key_from_vault "reboot"; then
    log_error "SSH key loading failed. Reboot may not work properly."
fi

# Execute reboot command
log_info "Executing reboot command..."
ANSIBLE_CONFIG="$(get_ansible_config_path)" ansible \
    "$HOST_PATTERN" \
    -i "$INVENTORY_PATH" \
    --vault-password-file "$OA_ANSIBLE_VAULT_PASSWORD_FILE" \
    --extra-vars "@$VAULT_YML_FILE" \
    -m ansible.builtin.reboot \
    -a 'msg="Reboot initiated by oaAnsible" pre_reboot_delay=5 post_reboot_delay=30 reboot_timeout=600' \
    --become

if [ $? -eq 0 ]; then
    log_info "✅ Reboot command sent successfully to $HOST_PATTERN in $INVENTORY_NAME"
    log_info "Machines will reboot and be back online in a few minutes"
else
    log_error "❌ Reboot command failed"
    exit 1
fi