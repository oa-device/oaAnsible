---
# Component Deployment Task File
# Handles selective deployment of individual components based on platform
- name: Validate component compatibility with platform
  ansible.builtin.set_fact:
    compatible_components: []

- name: Check macOS component compatibility
  ansible.builtin.set_fact:
    compatible_components: "{{ compatible_components + ['macos-api', 'tracker', 'alpr', 'player', 'camguard', 'base', 'network', 'security', 'ssh'] }}"
  when: target_platform == "macos"

- name: Check Ubuntu component compatibility
  ansible.builtin.set_fact:
    compatible_components: "{{ compatible_components + ['base', 'network', 'security', 'docker', 'monitoring', 'nvidia', 'ml', 'health', 'oasentinel-setup', 'oasentinel-data',
      'oasentinel-train', 'oasentinel-full'] }}"
  when: target_platform == "ubuntu"

- name: Validate selected components
  ansible.builtin.fail:
    msg: |
      Invalid component '{{ item }}' for platform '{{ target_platform }}'.
      Available components: {{ compatible_components | join(', ') }}
  when: item not in compatible_components
  loop: "{{ deployment_components | default(selected_components) }}"

- name: Display deployment plan
  ansible.builtin.debug:
    msg: |
      Component Deployment Plan:
      - Platform: {{ target_platform }}
      - Components: {{ deployment_components | default(selected_components) | join(', ') }}
      - Compatible: {{ compatible_components | join(', ') }}

# Deploy components in dependency order: base -> network -> security -> applications

- name: Deploy base system component
  when: "'base' in deployment_components | default(selected_components)"
  tags: ["base"]
  block:
    - name: Deploy macOS base
      ansible.builtin.include_role:
        name: macos/base
      when: target_platform == "macos"

    - name: Deploy Ubuntu base
      ansible.builtin.include_role:
        name: ubuntu/base
      when: target_platform == "ubuntu"

- name: Deploy network component
  when: "'network' in deployment_components | default(selected_components)"
  tags: ["network"]
  block:
    - name: Deploy macOS network stack
      ansible.builtin.include_role:
        name: macos/network
      when: target_platform == "macos"

    - name: Deploy macOS Tailscale
      ansible.builtin.include_role:
        name: macos/network/tailscale
      when:
        - target_platform == "macos"
        - configure.tailscale | default(true)

    - name: Deploy Ubuntu network
      ansible.builtin.include_role:
        name: ubuntu/network/tailscale
      when: target_platform == "ubuntu"

- name: Deploy security component
  when: "'security' in deployment_components | default(selected_components)"
  tags: ["security"]
  block:
    - name: Deploy macOS security
      ansible.builtin.include_role:
        name: macos/security
      when: target_platform == "macos"

    - name: Deploy Ubuntu security
      ansible.builtin.include_role:
        name: ubuntu/security
      when: target_platform == "ubuntu"

- name: Deploy shell enhancements component
  ansible.builtin.include_role:
    name: ubuntu/shell
  when:
    - target_platform == "ubuntu"
    - "'shell' in deployment_components | default(selected_components)"
  tags: ["shell", "zsh"]

- name: Deploy SSH component
  ansible.builtin.include_role:
    name: macos/ssh
  when:
    - target_platform == "macos"
    - "'ssh' in deployment_components | default(selected_components)"
  tags: ["ssh"]

# macOS Application Components (after infrastructure is ready)
- name: Deploy macOS API component
  ansible.builtin.include_role:
    name: macos/api
  when:
    - target_platform == "macos"
    - "'macos-api' in deployment_components | default(selected_components)"
  tags: ["macos-api", "api"]

- name: Deploy tracker component
  ansible.builtin.include_role:
    name: macos/tracker
  when:
    - target_platform == "macos"
    - "'tracker' in deployment_components | default(selected_components)"
  tags: ["tracker"]

- name: Deploy ALPR service component
  ansible.builtin.include_role:
    name: macos/alpr_service
  when:
    - target_platform == "macos"
    - "'alpr' in deployment_components | default(selected_components)"
  tags: ["alpr"]

- name: Deploy player component
  ansible.builtin.include_role:
    name: macos/player
  when:
    - target_platform == "macos"
    - "'player' in deployment_components | default(selected_components)"
  tags: ["player"]

- name: Deploy CamGuard component
  ansible.builtin.include_role:
    name: macos/camguard
  when:
    - target_platform == "macos"
    - "'camguard' in deployment_components | default(selected_components)"
  tags: ["camguard"]

# Ubuntu-specific components
- name: Deploy Docker component
  ansible.builtin.include_role:
    name: ubuntu/docker
  when:
    - target_platform == "ubuntu"
    - "'docker' in deployment_components | default(selected_components)"
  tags: ["docker"]

# CUDA 12.8 Installation - Direct and streamlined
- name: Install CUDA 12.8 and compatible drivers
  ansible.builtin.include_tasks: ../roles/ubuntu/ml_workstation/tasks/nvidia_setup.yml
  when:
    - target_platform == "ubuntu"
    - "'nvidia' in deployment_components | default(selected_components)"
  tags: ["nvidia", "gpu"]

- name: Deploy ML workstation component
  ansible.builtin.include_role:
    name: ubuntu/ml_workstation
  when:
    - target_platform == "ubuntu"
    - "'ml' in deployment_components | default(selected_components)"
  tags: ["ml"]

# GPU Health Check is now integrated into the ML workstation role verification tasks

# oaSentinel Components
- name: Deploy oaSentinel setup
  ansible.builtin.include_role:
    name: ubuntu/ml_workstation
  when:
    - target_platform == "ubuntu"
    - "'oasentinel-setup' in deployment_components | default(selected_components) or 'oasentinel-full' in deployment_components | default(selected_components)"
  tags: ["oasentinel-setup", "oasentinel-full"]

- name: Deploy oaSentinel data preparation
  ansible.builtin.include_role:
    name: ubuntu/ml_workstation
  when:
    - target_platform == "ubuntu"
    - "'oasentinel-data' in deployment_components | default(selected_components) or 'oasentinel-full' in deployment_components | default(selected_components)"
  tags: ["oasentinel-data", "oasentinel-full"]

- name: Deploy oaSentinel training
  ansible.builtin.include_role:
    name: ubuntu/ml_workstation
  when:
    - target_platform == "ubuntu"
    - "'oasentinel-train' in deployment_components | default(selected_components) or 'oasentinel-full' in deployment_components | default(selected_components)"
  tags: ["oasentinel-train", "oasentinel-full"]

- name: Component deployment summary
  ansible.builtin.debug:
    msg: |
      Component Deployment Completed:
      - Platform: {{ target_platform }}
      - Components: {{ deployment_components | default(selected_components) | join(', ') }}
      - Host: {{ inventory_hostname }}
