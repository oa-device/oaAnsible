#!/bin/bash

# Server launcher script for oaAnsible
# Usage: ./run-server [--dev] [--port PORT] [--host HOST]

# Source helper functions and variables
HELPER_SCRIPT_PATH="$(dirname "${BASH_SOURCE[0]}")/helpers.sh"
if [ -f "$HELPER_SCRIPT_PATH" ]; then
  # shellcheck source=./helpers.sh
  source "$HELPER_SCRIPT_PATH"
else
  echo "ERROR: helpers.sh not found at $HELPER_SCRIPT_PATH"
  exit 1
fi

# Set script-specific log level
SCRIPT_LOG_LEVEL=$_LOG_LEVEL_INFO
export SCRIPT_LOG_LEVEL

# Default configuration
DEFAULT_HOST="0.0.0.0"
DEFAULT_PORT="8001"
DEV_MODE=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --dev)
      DEV_MODE=true
      shift
      ;;
    --port)
      DEFAULT_PORT="$2"
      shift 2
      ;;
    --host)
      DEFAULT_HOST="$2"
      shift 2
      ;;
    --help|-h)
      cat << EOF
ðŸš€ OrangeAd Ansible Server Launcher
==================================

Usage: $0 [options]

OPTIONS:
  --dev              Enable development mode (auto-reload)
  --port PORT        Server port (default: 8001)
  --host HOST        Server host (default: 0.0.0.0)
  --help, -h         Show this help message

ENVIRONMENT VARIABLES:
  OAANSIBLE_API_HOST              Server host
  OAANSIBLE_API_PORT              Server port  
  OAANSIBLE_DEBUG                 Enable debug mode (true/false)
  OAANSIBLE_SECRET_KEY            JWT secret key
  OADASHBOARD_API_URL             oaDashboard API URL
  OADASHBOARD_API_KEY             oaDashboard API key
  OAANSIBLE_LOG_LEVEL             Log level (DEBUG, INFO, WARNING, ERROR)
  OAANSIBLE_MAX_CONCURRENT_JOBS   Max concurrent jobs (default: 5)

EXAMPLES:
  $0                             # Start server on default port
  $0 --dev                       # Start in development mode
  $0 --port 8080 --host 127.0.0.1   # Custom host and port
  
REQUIREMENTS:
  - Python 3.8+
  - FastAPI and dependencies (see server/requirements.txt)
  - Ansible installed and accessible
  - oaAnsible directory structure with playbooks and inventory

EOF
      exit 0
      ;;
    *)
      log_error "Unknown option: $1"
      exit 1
      ;;
  esac
done

log_info "ðŸš€ Starting oaAnsible Server..."

ensure_ansible_root_dir

# Set environment variables
export OAANSIBLE_API_HOST="${OAANSIBLE_API_HOST:-$DEFAULT_HOST}"
export OAANSIBLE_API_PORT="${OAANSIBLE_API_PORT:-$DEFAULT_PORT}"
export OAANSIBLE_DEBUG="${OAANSIBLE_DEBUG:-$DEV_MODE}"
export OAANSIBLE_ROOT="$OA_ANSIBLE_ROOT_DIR"

# Check if server directory exists
SERVER_DIR="$OA_ANSIBLE_ROOT_DIR/server"
if [ ! -d "$SERVER_DIR" ]; then
  log_error "Server directory not found: $SERVER_DIR"
  exit 1
fi

# Check if Python and dependencies are available
if ! command -v python3 >/dev/null 2>&1; then
  log_error "Python 3 not found. Please install Python 3.8 or higher."
  exit 1
fi

# Check for virtual environment (use oaPangaea .venv)
VENV_PATH="$OA_PANGAEA_ROOT/.venv"
if [ -d "$VENV_PATH" ]; then
  log_info "Using oaPangaea virtual environment: $VENV_PATH"
  # shellcheck source=/dev/null
  source "$VENV_PATH/bin/activate"
else
  log_warn "No virtual environment found at $VENV_PATH"
  log_warn "Consider creating one with: python3 -m venv $VENV_PATH"
fi

# Install server dependencies if needed
REQUIREMENTS_FILE="$SERVER_DIR/requirements.txt"
if [ -f "$REQUIREMENTS_FILE" ]; then
  log_info "Checking server dependencies..."
  if ! python3 -c "import fastapi, uvicorn" >/dev/null 2>&1; then
    log_info "Installing server dependencies..."
    pip install -r "$REQUIREMENTS_FILE"
  fi
else
  log_warn "Requirements file not found: $REQUIREMENTS_FILE"
fi

# Display configuration
log_info "Server Configuration:"
log_info "  Host: $OAANSIBLE_API_HOST"
log_info "  Port: $OAANSIBLE_API_PORT"
log_info "  Debug: $OAANSIBLE_DEBUG"
log_info "  Ansible Root: $OAANSIBLE_ROOT"
log_info "  Dashboard API: ${OADASHBOARD_API_URL:-'Not configured'}"

# Change to server directory
cd "$SERVER_DIR" || {
  log_error "Could not change to server directory: $SERVER_DIR"
  exit 1
}

# Start the server
log_info "Starting server on http://$OAANSIBLE_API_HOST:$OAANSIBLE_API_PORT"
log_info "API documentation: http://$OAANSIBLE_API_HOST:$OAANSIBLE_API_PORT/api/docs"
log_info "Press Ctrl+C to stop the server"

# Run the server
python3 run_server.py

SCRIPT_EXIT_CODE=$?

if [ $SCRIPT_EXIT_CODE -eq 0 ]; then
  log_info "Server stopped successfully"
else
  log_error "Server stopped with error code: $SCRIPT_EXIT_CODE"
fi

exit $SCRIPT_EXIT_CODE