#!/bin/bash
# Template for granting camera permissions
# This script grants camera permissions to various applications in the TCC database

# TCC database paths - both user and system level
USER_TCC_DB="{{ ansible_user_dir }}/Library/Application Support/com.apple.TCC/TCC.db"
SYSTEM_TCC_DB="/Library/Application Support/com.apple.TCC/TCC.db"

# Define the applications and their client types
declare -a apps
declare -a client_types

# Add the real Python executable (not just symlinks)
apps+=("/Users/{{ ansible_user }}/.pyenv/versions/3.11.11/bin/python3.11")
client_types+=(1)

# Add the virtual environment Python executables
apps+=("{{ ansible_user_dir }}/orangead/macos-api/.venv/bin/python3")
client_types+=(1)

apps+=("{{ ansible_user_dir }}/orangead/tracker/.venv/bin/python3")
client_types+=(1)

# Add other required applications
apps+=("/usr/local/bin/tailscaled")
client_types+=(1)

apps+=("/usr/libexec/sshd-keygen-wrapper")
client_types+=(1)

apps+=("com.apple.Terminal")
client_types+=(0)

# Function to grant permissions to a TCC database
grant_permissions_to_db() {
    local tcc_db="$1"
    local db_type="$2"
    
    echo "Processing $db_type TCC database: $tcc_db"
    
    # Check if database exists
    if [ ! -f "$tcc_db" ]; then
        echo "Database $tcc_db does not exist, skipping..."
        return
    fi
    
    # Loop over the applications
    for i in "${!apps[@]}"; do
        app=${apps[$i]}
        client_type=${client_types[$i]}
        
        echo "  Processing $app with client_type $client_type"
        
        # Check if the application has a record
        record=$(sqlite3 "$tcc_db" "SELECT * FROM access WHERE service='kTCCServiceCamera' AND client='$app';" 2>/dev/null || echo "")
        
        if [[ -z "$record" ]]; then
            echo "    No record found for $app, inserting a new record"
            # Insert a new record
            sqlite3 "$tcc_db" "INSERT INTO access (service, client, client_type, auth_value, auth_reason, auth_version, indirect_object_identifier) VALUES ('kTCCServiceCamera', '$app', $client_type, 2, 3, 1, 'UNUSED');" 2>/dev/null
            if [ $? -eq 0 ]; then
                echo "    Successfully inserted record for $app"
            else
                echo "    Failed to insert record for $app"
            fi
        else
            echo "    Record found for $app: $record"
            # Update the record
            sqlite3 "$tcc_db" "UPDATE access SET client_type=$client_type, auth_value=2, auth_reason=3 WHERE service='kTCCServiceCamera' AND client='$app';" 2>/dev/null
            if [ $? -eq 0 ]; then
                echo "    Successfully updated record for $app"
            else
                echo "    Failed to update record for $app"
            fi
        fi
    done
}

# Grant permissions to user-level TCC database
grant_permissions_to_db "$USER_TCC_DB" "User"

# Grant permissions to system-level TCC database (requires sudo)
echo "Granting permissions to system-level TCC database (requires sudo)..."
sudo bash -c "
$(declare -f grant_permissions_to_db)
$(declare -p apps)
$(declare -p client_types)
grant_permissions_to_db '$SYSTEM_TCC_DB' 'System'
"

echo "Camera permissions granted to all applications"

# Verify the permissions
echo -e "\nVerifying camera permissions:"
echo "User TCC database:"
sqlite3 "$USER_TCC_DB" "SELECT service, client, client_type, auth_value, auth_reason FROM access WHERE service='kTCCServiceCamera';" 2>/dev/null || echo "Error accessing user TCC database"

echo -e "\nSystem TCC database:"
sudo sqlite3 "$SYSTEM_TCC_DB" "SELECT service, client, client_type, auth_value, auth_reason FROM access WHERE service='kTCCServiceCamera';" 2>/dev/null || echo "Error accessing system TCC database"

# Test camera access
echo -e "\nTesting camera access:"
cd {{ ansible_user_dir }}/orangead/macos-api && ./.venv/bin/python3 -c 'import cv2; cap = cv2.VideoCapture(0); print("Camera opened successfully:", cap.isOpened()); cap.release()' 2>/dev/null || echo "Failed to test camera with API python"

echo -e "\nTesting camera access with tracker python:"
cd {{ ansible_user_dir }}/orangead/tracker && ./.venv/bin/python -c 'import cv2; cap = cv2.VideoCapture(0); print("Camera opened successfully:", cap.isOpened()); cap.release()' 2>/dev/null || echo "Failed to test camera with tracker python"
