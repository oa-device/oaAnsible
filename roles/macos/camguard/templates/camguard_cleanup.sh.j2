#!/bin/bash
# CamGuard Recording Cleanup Script
# Manages storage by removing old recordings based on retention policy
# Generated by Ansible for {{ inventory_hostname }}

set -euo pipefail

# Configuration
RECORDINGS_DIR="{{ camguard.storage.recordings_dir }}"
LOGS_DIR="{{ camguard.storage.logs_dir }}"
LOG_FILE="${LOGS_DIR}/camguard_cleanup.log"
RETENTION_DAYS="{{ camguard.storage.retention_days }}"
MAX_SIZE_GB="{{ camguard.storage.max_size_gb }}"

# Convert GB to bytes for comparison
MAX_SIZE_BYTES=$((MAX_SIZE_GB * 1024 * 1024 * 1024))

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [cleanup] $*" | tee -a "${LOG_FILE}"
}

# Check if recordings directory exists
if [[ ! -d "${RECORDINGS_DIR}" ]]; then
    log "Recordings directory does not exist: ${RECORDINGS_DIR}"
    exit 0
fi

# Exit early if retention is disabled
if [[ "${RETENTION_DAYS}" -eq 0 ]] && [[ "${MAX_SIZE_GB}" -eq 0 ]]; then
    log "Retention and size limits disabled - no cleanup needed"
    exit 0
fi

log "Starting CamGuard cleanup process"
log "Configuration:"
log "  Recordings directory: ${RECORDINGS_DIR}"
log "  Retention period: ${RETENTION_DAYS} days"
log "  Maximum storage: ${MAX_SIZE_GB} GB"

# Function to get directory size in bytes
get_directory_size() {
    local dir="$1"
    if [[ -d "${dir}" ]]; then
        du -s "${dir}" | awk '{print $1 * 1024}'  # Convert from KB to bytes
    else
        echo 0
    fi
}

# Function to remove old files by age
cleanup_by_age() {
    log "Removing files older than ${RETENTION_DAYS} days..."
    
    local files_removed=0
    local space_freed=0
    
    # Find and remove files older than retention period
    while IFS= read -r -d '' file; do
        if [[ -f "${file}" ]]; then
            local file_size
            file_size=$(stat -f%z "${file}" 2>/dev/null || echo 0)
            
            log "Removing old file: $(basename "${file}") (${file_size} bytes)"
            rm -f "${file}"
            
            ((files_removed++))
            ((space_freed += file_size))
        fi
    done < <(find "${RECORDINGS_DIR}" -name "rec-*.{{ camguard.recording.format }}" -type f -mtime +${RETENTION_DAYS} -print0 2>/dev/null || true)
    
    if [[ ${files_removed} -gt 0 ]]; then
        log "Removed ${files_removed} old files, freed $(( space_freed / 1024 / 1024 )) MB"
    else
        log "No old files found for removal"
    fi
}

# Function to remove files when storage limit is exceeded
cleanup_by_size() {
    local current_size
    current_size=$(get_directory_size "${RECORDINGS_DIR}")
    
    if [[ ${current_size} -gt ${MAX_SIZE_BYTES} ]]; then
        log "Storage limit exceeded: $(( current_size / 1024 / 1024 / 1024 )) GB > ${MAX_SIZE_GB} GB"
        log "Removing oldest files to free space..."
        
        local files_removed=0
        local space_freed=0
        
        # Remove oldest files until we're under the limit
        while [[ $(get_directory_size "${RECORDINGS_DIR}") -gt ${MAX_SIZE_BYTES} ]]; do
            # Find the oldest recording file
            local oldest_file
            oldest_file=$(find "${RECORDINGS_DIR}" -name "rec-*.{{ camguard.recording.format }}" -type f -exec ls -t {} + | tail -1 2>/dev/null || echo "")
            
            if [[ -z "${oldest_file}" ]]; then
                log "No more files to remove"
                break
            fi
            
            if [[ -f "${oldest_file}" ]]; then
                local file_size
                file_size=$(stat -f%z "${oldest_file}" 2>/dev/null || echo 0)
                
                log "Removing oldest file: $(basename "${oldest_file}") (${file_size} bytes)"
                rm -f "${oldest_file}"
                
                ((files_removed++))
                ((space_freed += file_size))
            fi
        done
        
        if [[ ${files_removed} -gt 0 ]]; then
            log "Removed ${files_removed} files to free space, freed $(( space_freed / 1024 / 1024 )) MB"
        fi
    else
        log "Storage usage within limits: $(( current_size / 1024 / 1024 / 1024 )) GB / ${MAX_SIZE_GB} GB"
    fi
}

# Function to clean up corrupted or incomplete files
cleanup_corrupted_files() {
    log "Checking for corrupted or incomplete files..."
    
    local files_removed=0
    local space_freed=0
    
    # Find files that are too small (likely incomplete)
    while IFS= read -r -d '' file; do
        if [[ -f "${file}" ]]; then
            local file_size
            file_size=$(stat -f%z "${file}" 2>/dev/null || echo 0)
            
            # If file is smaller than 100KB, it's likely corrupted/incomplete
            if [[ ${file_size} -lt 102400 ]]; then
                log "Removing corrupted/incomplete file: $(basename "${file}") (${file_size} bytes)"
                rm -f "${file}"
                
                ((files_removed++))
                ((space_freed += file_size))
            fi
        fi
    done < <(find "${RECORDINGS_DIR}" -name "rec-*.{{ camguard.recording.format }}" -type f -print0 2>/dev/null || true)
    
    if [[ ${files_removed} -gt 0 ]]; then
        log "Removed ${files_removed} corrupted files, freed $(( space_freed / 1024 )) KB"
    else
        log "No corrupted files found"
    fi
}

# Function to generate cleanup summary
generate_summary() {
    local total_files
    local total_size
    local oldest_file
    local newest_file
    
    total_files=$(find "${RECORDINGS_DIR}" -name "rec-*.{{ camguard.recording.format }}" -type f | wc -l | tr -d ' ')
    total_size=$(get_directory_size "${RECORDINGS_DIR}")
    
    if [[ ${total_files} -gt 0 ]]; then
        oldest_file=$(find "${RECORDINGS_DIR}" -name "rec-*.{{ camguard.recording.format }}" -type f -exec ls -t {} + | tail -1 2>/dev/null || echo "None")
        newest_file=$(find "${RECORDINGS_DIR}" -name "rec-*.{{ camguard.recording.format }}" -type f -exec ls -t {} + | head -1 2>/dev/null || echo "None")
    else
        oldest_file="None"
        newest_file="None"
    fi
    
    log "Cleanup Summary:"
    log "  Total recordings: ${total_files}"
    log "  Total storage used: $(( total_size / 1024 / 1024 )) MB"
    log "  Storage limit: ${MAX_SIZE_GB} GB"
    log "  Oldest file: $(basename "${oldest_file}")"
    log "  Newest file: $(basename "${newest_file}")"
}

# Main cleanup process
log "Starting cleanup operations..."

# 1. Remove corrupted/incomplete files first
cleanup_corrupted_files

# 2. Remove files older than retention period
cleanup_by_age

# 3. Remove oldest files if storage limit is exceeded
cleanup_by_size

# 4. Generate summary
generate_summary

log "CamGuard cleanup completed successfully"