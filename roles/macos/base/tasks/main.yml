---
# Set up shell configuration first
- name: Configure shell environment
  tags: ["base", "shell"]
  block:
    - name: Set default shell to zsh
      ansible.builtin.shell: |
        chsh -s /bin/zsh {{ ansible_user }}
      become: true
      changed_when: false

    - name: Get default shell
      ansible.builtin.command: dscl . -read /Users/{{ ansible_user }} UserShell
      register: user_shell_info
      changed_when: false

    - name: Set shell configuration facts
      ansible.builtin.set_fact:
        shell_config: "{{ macos_shell_config }}"
      changed_when: false

    - name: Set shell-specific facts (force zsh)
      ansible.builtin.set_fact:
        user_shell: "zsh"
        shell_profile: "{{ ansible_env.HOME }}/.zprofile"
        shell_rc: "{{ ansible_env.HOME }}/.zshrc"
      changed_when: false

    - name: Ensure shell configuration files exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: touch
        mode: "0644"
      loop:
        - "{{ shell_profile }}"
        - "{{ shell_rc }}"
      changed_when: false

    - name: Configure shell environment
      ansible.builtin.blockinfile:
        path: "{{ item.path }}"
        marker: "# {mark} ANSIBLE MANAGED BLOCK - {{ item.name }}"
        block: "{{ item.content }}"
      loop:
        - path: "{{ shell_profile }}"
          name: "PATH_CONFIG"
          content: |
            # System PATH configuration
            export PATH="{{ macos_system.homebrew.prefix }}/bin:$PATH"

            # Homebrew configuration
            eval "$({{ macos_system.homebrew.prefix }}/bin/brew shellenv)"

            {% if macos_configure.pyenv %}
            # Pyenv configuration
            export PYENV_ROOT="$HOME/.pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(pyenv init -)"
            {% endif %}

            {% if macos_configure.node %}
            # Node.js configuration
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            {% endif %}

        - path: "{{ shell_rc }}"
          name: "SHELL_CONFIG"
          content: |
            # Shell-specific configurations
            export LANG=en_US.UTF-8
            export EDITOR=vim
      changed_when: false

# Include zsh enhancement tasks
- name: Include zsh enhancement tasks
  ansible.builtin.include_tasks: enhance_zsh.yml
  tags: ["shell", "zsh", "setup"]

# Configure passwordless sudo for the ansible_user (admin)
- name: Check existing sudoers entries
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    grep -E "^({{ ansible_user }}|%admin|%wheel).*NOPASSWD:.*ALL" /etc/sudoers || echo "not_found"
  register: sudoers_check
  changed_when: false
  tags: ["sudo", "setup"]

- name: Ensure ansible_user can sudo without a password
  become: true
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    state: present
    regexp: "^{{ ansible_user }}\\\\s+ALL="
    line: "{{ ansible_user }} ALL=(ALL) NOPASSWD: ALL"
    validate: "visudo -cf %s"
  when: sudoers_check.stdout == "not_found" or sudoers_check.stdout | regex_search('^%') is not none
  tags: ["sudo", "setup"]

- name: Ensure group admin entry doesn't override user entry
  become: true
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    state: present
    insertafter: "^{{ ansible_user }} ALL=(ALL) NOPASSWD: ALL"
    regexp: "^%admin\\\\s+ALL="
    line: "%admin ALL=(ALL) ALL"
    validate: "visudo -cf %s"
  when: sudoers_check.stdout | regex_search('^%admin') is not none
  tags: ["sudo", "setup"]

# Clean up legacy JPR Launch Agents and Daemons
- name: Clean up legacy JPR services
  tags: ["cleanup", "jpr"]
  block:
    - name: Get list of JPR Launch Agents
      ansible.builtin.shell: |
        set -o pipefail
        launchctl list | grep ca.jpr | awk '{print $3}' || true
      register: jpr_agents
      changed_when: false

    - name: Get list of JPR Launch Daemons
      ansible.builtin.shell: |
        set -o pipefail
        sudo launchctl list | grep ca.jpr | awk '{print $3}' || true
      register: jpr_daemons
      changed_when: false
      become: true

    - name: Unload JPR Launch Agents
      ansible.builtin.shell: |
        set -o pipefail
        launchctl unload "{{ ansible_env.HOME }}/Library/LaunchAgents/{{ item }}.plist"
      loop: "{{ jpr_agents.stdout_lines }}"
      when: jpr_agents.stdout_lines | length > 0
      failed_when: false
      changed_when: false

    - name: Remove JPR Launch Agent files
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/Library/LaunchAgents/{{ item }}.plist"
        state: absent
      loop: "{{ jpr_agents.stdout_lines }}"
      when: jpr_agents.stdout_lines | length > 0
      changed_when: false

    - name: Unload JPR Launch Daemons
      ansible.builtin.shell: |
        set -o pipefail
        sudo launchctl unload "/Library/LaunchDaemons/{{ item }}.plist"
      loop: "{{ jpr_daemons.stdout_lines }}"
      when: jpr_daemons.stdout_lines | length > 0
      become: true
      failed_when: false
      changed_when: false

    - name: Remove JPR Launch Daemon files
      ansible.builtin.file:
        path: "/Library/LaunchDaemons/{{ item }}.plist"
        state: absent
      loop: "{{ jpr_daemons.stdout_lines }}"
      when: jpr_daemons.stdout_lines | length > 0
      become: true
      changed_when: false

    - name: Verify JPR cleanup - check remaining agents
      ansible.builtin.shell: |
        set -o pipefail
        launchctl list | grep ca.jpr || echo "No JPR agents found"
      register: remaining_agents
      changed_when: false

    - name: Verify JPR cleanup - check remaining daemons
      ansible.builtin.shell: |
        set -o pipefail
        sudo launchctl list | grep ca.jpr || echo "No JPR daemons found"
      register: remaining_daemons
      changed_when: false
      become: true

    - name: Report JPR cleanup results
      ansible.builtin.debug:
        msg:
          - "JPR Launch Agents cleanup: {{ 'COMPLETE' if 'No JPR agents found' in remaining_agents.stdout else 'INCOMPLETE - ' + remaining_agents.stdout }}"
          - "JPR Launch Daemons cleanup: {{ 'COMPLETE' if 'No JPR daemons found' in remaining_daemons.stdout else 'INCOMPLETE - ' + remaining_daemons.stdout }}"

# Configure sound settings
- name: Configure macOS sound settings
  tags: ["sound", "audio"]
  block:
    - name: Disable startup sound
      ansible.builtin.shell: |
        sudo nvram StartupMute=%01
      become: true
      changed_when: false

    - name: Set default volume to 0
      ansible.builtin.shell: |
        osascript -e "set volume output volume 0"
      changed_when: false

    - name: Disable user interface sound effects
      ansible.builtin.shell: |
        defaults write com.apple.systemsound 'com.apple.sound.uiaudio.enabled' -int 0
      changed_when: false

    - name: Disable alert volume
      ansible.builtin.shell: |
        defaults write NSGlobalDomain com.apple.sound.beep.volume -float 0.0
      changed_when: false

    - name: Disable beep sound
      ansible.builtin.shell: |
        defaults write NSGlobalDomain com.apple.sound.beep.sound -string ""
      changed_when: false

    - name: Disable feedback sounds for volume changes
      ansible.builtin.shell: |
        defaults write NSGlobalDomain com.apple.sound.beep.feedback -int 0
      changed_when: false

    - name: Apply sound settings immediately
      ansible.builtin.shell: |
        killall SystemUIServer
      failed_when: false
      changed_when: false

# Configure screen saver and display settings
- name: Configure screen saver and display settings
  tags: ["screensaver", "display"]
  block:
    - name: Disable screen saver
      ansible.builtin.shell: |
        defaults -currentHost write com.apple.screensaver idleTime -int 0
      changed_when: false

    - name: Never turn off display (set to never)
      ansible.builtin.shell: |
        sudo pmset -a displaysleep 0
      become: true
      changed_when: false

    - name: Disable computer sleep
      ansible.builtin.shell: |
        sudo pmset -a sleep 0
      become: true
      changed_when: false

    - name: Disable disk sleep
      ansible.builtin.shell: |
        sudo pmset -a disksleep 0
      become: true
      changed_when: false

    - name: No password required after screen saver begins
      ansible.builtin.shell: |
        defaults write com.apple.screensaver askForPassword -int 0
      changed_when: false

    - name: No password required after display is turned off
      ansible.builtin.shell: |
        defaults write com.apple.screensaver askForPasswordDelay -int 0
      changed_when: false

    - name: Disable screen saver for all users
      ansible.builtin.shell: |
        defaults write /Library/Preferences/com.apple.screensaver idleTime -int 0
      become: true
      changed_when: false

    - name: Apply screen saver settings immediately
      ansible.builtin.shell: |
        killall cfprefsd
      failed_when: false
      changed_when: false

# Configure kiosk UI settings
- name: Configure kiosk UI settings
  tags: ["kiosk", "ui"]
  block:
    - name: Auto-hide menu bar
      ansible.builtin.shell: |
        defaults write NSGlobalDomain _HIHideMenuBar -bool true
      changed_when: false

    - name: Auto-hide dock
      ansible.builtin.shell: |
        defaults write com.apple.dock autohide -bool true
      changed_when: false

    - name: Set dock to small size
      ansible.builtin.shell: |
        defaults write com.apple.dock tilesize -int 36
      changed_when: false

    - name: Disable dock magnification
      ansible.builtin.shell: |
        defaults write com.apple.dock magnification -bool false
      changed_when: false

    - name: Set dock auto-hide delay to minimal
      ansible.builtin.shell: |
        defaults write com.apple.dock autohide-delay -float 0
      changed_when: false

    - name: Set dock auto-hide animation duration to minimal
      ansible.builtin.shell: |
        defaults write com.apple.dock autohide-time-modifier -float 0.5
      changed_when: false

    - name: Hide recent applications in dock
      ansible.builtin.shell: |
        defaults write com.apple.dock show-recents -bool false
      changed_when: false

    - name: Minimize windows to application icon
      ansible.builtin.shell: |
        defaults write com.apple.dock minimize-to-application -bool true
      changed_when: false

    - name: Create wallpapers directory
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/Pictures/Wallpapers"
        state: directory
        mode: '0755'

    - name: Copy custom desktop background (horizontal)
      ansible.builtin.copy:
        src: "desktop-background.png"
        dest: "{{ ansible_user_dir }}/Pictures/Wallpapers/desktop-background.png"
        mode: '0644'
      when: deploy_custom_wallpaper | default(false)

    - name: Copy custom desktop background (vertical)
      ansible.builtin.copy:
        src: "desktop-background-vertical.png"
        dest: "{{ ansible_user_dir }}/Pictures/Wallpapers/desktop-background-vertical.png"
        mode: '0644'
      when: deploy_custom_wallpaper | default(false)

    - name: Set desktop background to custom wallpaper on all displays (smart orientation detection)
      ansible.builtin.shell: |
        # Get display resolutions using system_profiler to determine orientation
        RESOLUTIONS=$(system_profiler SPDisplaysDataType | grep "Resolution:" | awk '{print $2 " " $4}')
        
        # Check if any display is vertical (height > width)
        HAS_VERTICAL=false
        while IFS=" " read -r width height; do
          if [ "$height" -gt "$width" ]; then
            HAS_VERTICAL=true
            break
          fi
        done <<< "$RESOLUTIONS"
        
        # Set wallpaper based on orientation detection
        if [ "$HAS_VERTICAL" = "true" ]; then
          echo "Vertical displays detected, using vertical wallpaper"
          osascript -e "tell application \"System Events\" to set picture of every desktop to POSIX file \"{{ ansible_user_dir }}/Pictures/Wallpapers/desktop-background-vertical.png\""
        else
          echo "Horizontal displays detected, using horizontal wallpaper"
          osascript -e "tell application \"System Events\" to set picture of every desktop to POSIX file \"{{ ansible_user_dir }}/Pictures/Wallpapers/desktop-background.png\""
        fi
      changed_when: false
      failed_when: false
      when: deploy_custom_wallpaper | default(false)

    - name: Set desktop background to solid black on all displays (fallback)
      ansible.builtin.shell: |
        # Set black background on all displays using AppleScript
        osascript << 'EOF'
        tell application "System Events"
          set desktopCount to count of desktops
          repeat with i from 1 to desktopCount
            tell desktop i
              set picture to POSIX file "/System/Library/Desktop Pictures/Solid Colors/Black.png"
            end tell
          end repeat
        end tell
        EOF
      changed_when: false
      failed_when: false
      when: not (deploy_custom_wallpaper | default(false))

    - name: Hide desktop icons (keeps files, just hides display)
      ansible.builtin.shell: |
        defaults write com.apple.finder CreateDesktop -bool false
        killall Finder
      changed_when: false
      when: hide_desktop_icons | default(true)

    - name: Apply UI settings immediately
      ansible.builtin.shell: |
        killall Dock
        killall SystemUIServer
      failed_when: false
      changed_when: false

# Configure modern macOS Desktop & Dock settings (Sequoia/Sonoma)
- name: Configure modern macOS Desktop & Dock settings
  tags: ["kiosk", "modern", "desktop"]
  block:
    - name: Disable "Click wallpaper to reveal desktop" (Sonoma/Sequoia)
      ansible.builtin.shell: |
        defaults write com.apple.WindowManager EnableStandardClickToShowDesktop -bool false
      changed_when: false

    - name: Disable Stage Manager
      ansible.builtin.shell: |
        defaults write com.apple.WindowManager GloballyEnabled -bool false
      changed_when: false

    - name: Disable Stage Manager auto-hide
      ansible.builtin.shell: |
        defaults write com.apple.WindowManager AutoHide -bool false
      changed_when: false

    - name: Disable window grouping behavior in Stage Manager
      ansible.builtin.shell: |
        defaults write com.apple.WindowManager AppWindowGroupingBehavior -bool false
      changed_when: false

    - name: Disable Notification Center
      ansible.builtin.shell: |
        defaults write com.apple.notificationcenterui DoNotDisturb -bool true
      changed_when: false

    - name: Hide Spotlight menu item
      ansible.builtin.shell: |
        defaults write com.apple.spotlight MenuItemHidden -int 1
      changed_when: false

    - name: Disable all Hot Corners
      ansible.builtin.shell: |
        defaults write com.apple.dock wvous-tl-corner -int 1
        defaults write com.apple.dock wvous-tr-corner -int 1
        defaults write com.apple.dock wvous-bl-corner -int 1
        defaults write com.apple.dock wvous-br-corner -int 1
      changed_when: false

    - name: Disable window animations for performance
      ansible.builtin.shell: |
        defaults write NSGlobalDomain NSAutomaticWindowAnimationsEnabled -bool false
      changed_when: false

    - name: Speed up Mission Control animations
      ansible.builtin.shell: |
        defaults write com.apple.dock expose-animation-duration -float 0.1
      changed_when: false

    - name: Disable Launchpad gesture
      ansible.builtin.shell: |
        defaults write com.apple.dock showLaunchpadGestureEnabled -bool false
      changed_when: false

    - name: Disable Dashboard
      ansible.builtin.shell: |
        defaults write com.apple.dashboard mcx-disabled -bool true
      changed_when: false

    - name: Apply modern macOS settings immediately
      ansible.builtin.shell: |
        killall WindowManager
        killall Dock
        killall SystemUIServer
        killall NotificationCenter
      failed_when: false
      changed_when: false

# Comprehensive Kiosk Mode - System Notifications Suppression
- name: Configure comprehensive kiosk mode notification suppression
  tags: ["kiosk", "notifications", "updates"]
  block:
    - name: Disable all software update notifications and checks
      ansible.builtin.shell: |
        # Disable automatic software update checks and downloads
        sudo defaults write /Library/Preferences/com.apple.SoftwareUpdate AutomaticCheckEnabled -bool false
        sudo defaults write /Library/Preferences/com.apple.SoftwareUpdate AutomaticDownload -bool false
        sudo defaults write /Library/Preferences/com.apple.SoftwareUpdate AutomaticallyInstallMacOSUpdates -bool false
        sudo defaults write /Library/Preferences/com.apple.SoftwareUpdate CriticalUpdateInstall -bool false
        sudo defaults write /Library/Preferences/com.apple.SoftwareUpdate ConfigDataInstall -bool false
        
        # Disable App Store auto-updates
        sudo defaults write /Library/Preferences/com.apple.commerce AutoUpdate -bool false
        sudo defaults write /Library/Preferences/com.apple.commerce AutoUpdateRestartRequired -bool false
        
        # Disable software update notification client
        sudo defaults write /Library/Preferences/com.apple.SoftwareUpdate.notificationclient SUAutomaticallyCatalogue -bool false
      become: true
      changed_when: false

    - name: Disable system alert dialogs and notifications
      ansible.builtin.shell: |
        # Disable crash reporter dialogs
        defaults write com.apple.CrashReporter DialogType -string "none"
        
        # Disable diagnostic submission prompts
        sudo defaults write /Library/Application\ Support/CrashReporter/DiagnosticMessagesHistory.plist AutoSubmit -bool false
        sudo defaults write /Library/Application\ Support/CrashReporter/DiagnosticMessagesHistory.plist ThirdPartyDataSubmit -bool false
        
        # Disable first-run dialogs for applications
        defaults write com.apple.LaunchServices LSQuarantine -bool false
        
        # Disable iCloud document save prompts
        defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false
        
        # Disable Time Machine backup prompts
        defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true
      changed_when: false

    - name: Completely disable Notification Center and system notifications
      ansible.builtin.shell: |
        # Disable notification center daemon
        sudo launchctl unload -w /System/Library/LaunchAgents/com.apple.notificationcenterui.plist 2>/dev/null || true
        
        # Disable user notification center (multiple possible paths)
        launchctl unload -w /System/Library/LaunchAgents/com.apple.UserNotificationCenter.plist 2>/dev/null || true
        launchctl unload -w /System/Library/CoreServices/UserNotificationCenter.app/Contents/Resources/com.apple.UserNotificationCenter.plist 2>/dev/null || true
        
        # Disable software update notification manager
        launchctl unload -w /System/Library/PrivateFrameworks/SoftwareUpdate.framework/Resources/SoftwareUpdateNotificationManager.app/Contents/Resources/com.apple.SoftwareUpdateNotificationManager.plist 2>/dev/null || true
        
        # Disable all notification banners
        defaults write com.apple.notificationcenterui bannerTime -int 0
        defaults write com.apple.notificationcenterui doNotDisturb -bool true
        
        # Disable notification sounds
        defaults write com.apple.sound.beep.sound -string ""
        defaults write NSGlobalDomain com.apple.sound.beep.volume -float 0.0
      changed_when: false

    - name: Disable UI interruptions and system prompts
      ansible.builtin.shell: |
        # Disable Spotlight suggestions and Siri
        defaults write com.apple.lookup.shared LookupSuggestionsDisabled -bool true
        defaults write com.apple.assistant.support "Assistant Enabled" -bool false
        
        # Disable keyboard/trackpad setup dialogs
        defaults write com.apple.SetupAssistant DidSeeCloudSetup -bool true
        defaults write com.apple.SetupAssistant DidSeeSiriSetup -bool true
        defaults write com.apple.SetupAssistant DidSeePrivacy -bool true
        
        # Disable AirDrop and HandOff notifications
        defaults write com.apple.NetworkBrowser DisableAirDrop -bool true
        defaults write com.apple.coreservices.useractivityd ActivityAdvertisingAllowed -bool false
        defaults write com.apple.coreservices.useractivityd ActivityReceivingAllowed -bool false
        
        # Disable Game Center notifications
        defaults write com.apple.gamed Disabled -bool true
      changed_when: false

    - name: Kill existing notification processes and clear dialogs
      ansible.builtin.shell: |
        # Kill any existing update dialogs or notifications
        sudo pkill -f "Software Update" || true
        pkill -f "NotificationCenter" || true
        pkill -f "UserNotificationCenter" || true
        pkill -f "Notification" || true
        
        # Kill setup assistant processes
        pkill -f "Setup Assistant" || true
        pkill -f "SetupAssistant" || true
        
        # Clear notification database
        rm -rf ~/Library/Application\ Support/NotificationCenter/* 2>/dev/null || true
      changed_when: false
      failed_when: false

    - name: Unload software update daemon (requires reboot to take full effect)
      ansible.builtin.shell: |
        # Attempt to unload software update daemon
        sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.softwareupdated.plist 2>/dev/null || true
        
        # Disable software update scheduler
        sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.softwareupdate_download_service.plist 2>/dev/null || true
      become: true
      changed_when: false
      failed_when: false

    - name: Apply notification suppression settings immediately
      ansible.builtin.shell: |
        # Restart affected system services
        killall cfprefsd 2>/dev/null || true
        killall Dock 2>/dev/null || true
        killall SystemUIServer 2>/dev/null || true
        killall NotificationCenter 2>/dev/null || true
        
        # Clear any cached notification settings
        sudo killall -HUP mDNSResponder 2>/dev/null || true
      failed_when: false
      changed_when: false
