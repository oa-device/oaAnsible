#!/bin/bash

# Post-deployment verification script
# Usage: ./run-verify <environment> [scope]
# Example: ./run-verify staging
# Example: ./run-verify production macos_api

# Source helper functions and variables
HELPER_SCRIPT_PATH="$(dirname "${BASH_SOURCE[0]}")/helpers.sh"
if [ -f "$HELPER_SCRIPT_PATH" ]; then
  # shellcheck source=./helpers.sh
  source "$HELPER_SCRIPT_PATH"
else
  echo "ERROR: helpers.sh not found at $HELPER_SCRIPT_PATH"
  exit 1
fi

# Set script-specific log level
SCRIPT_LOG_LEVEL=$_LOG_LEVEL_INFO
export SCRIPT_LOG_LEVEL

# Usage function
usage() {
  cat << EOF
Usage: $0 <environment> [scope]

ENVIRONMENTS:
  staging       - Use staging inventory
  production    - Use production inventory  
  preprod       - Use pre-production inventory

VERIFICATION SCOPES:
  all           - Verify all deployed components (default)
  base_system   - Verify base system configuration
  network       - Verify network and Tailscale configuration
  macos_api     - Verify macOS API service
  tracker       - Verify oaTracker service
  alpr          - Verify ALPR service
  services      - Verify all services status

EXAMPLES:
  $0 staging                    # Verify all components on staging
  $0 production macos_api       # Verify only macOS API on production
  $0 staging services           # Verify all services status

EOF
}

# Check arguments
if [ $# -lt 1 ]; then
  log_error "Invalid number of arguments"
  usage
  exit 1
fi

ENVIRONMENT=$1
SCOPE=${2:-all}

log_debug "run-verify script started for environment: $ENVIRONMENT, scope: $SCOPE"

ensure_ansible_root_dir

# Validate environment
case $ENVIRONMENT in
  staging|production)
    INVENTORY_FILE="$OA_ANSIBLE_INVENTORY_DIR/$ENVIRONMENT/hosts.yml"
    if [ ! -f "$INVENTORY_FILE" ]; then
      log_error "Inventory file not found: $INVENTORY_FILE"
      exit 1
    fi
    ;;
  preprod|pre-prod)
    # Handle both preprod and pre-prod naming
    INVENTORY_FILE="$OA_ANSIBLE_INVENTORY_DIR/pre-prod/hosts.yml"
    if [ ! -f "$INVENTORY_FILE" ]; then
      log_error "Inventory file not found: $INVENTORY_FILE"
      exit 1
    fi
    ;;
  *)
    log_error "Invalid environment: $ENVIRONMENT"
    log_error "Valid environments: staging, production, preprod, pre-prod"
    exit 1
    ;;
esac

# Validate scope
VALID_SCOPES=("all" "base_system" "network" "macos_api" "tracker" "alpr" "services")
if [[ ! " ${VALID_SCOPES[*]} " =~ " $SCOPE " ]]; then
  log_error "Invalid scope: $SCOPE"
  log_error "Valid scopes: ${VALID_SCOPES[*]}"
  exit 1
fi

# Check for required dependencies (SSH and vault loading handled by run_playbook_with_vault)
check_vault_password_file
check_yq_installed
check_ansible_vault_installed
check_ansible_installed

# --- Verification ---
log_info "Starting deployment verification..."
log_info "Environment: $ENVIRONMENT"
log_info "Scope: $SCOPE"

# Create verification playbook
VERIFICATION_PLAYBOOK=$(cat << 'EOF'
---
- name: Post-Deployment Verification
  hosts: all
  gather_facts: true
  vars:
    verification_scope: "{{ verify_scope | default('all') }}"
  
  tasks:
    - name: Display verification info
      ansible.builtin.debug:
        msg: |
          Verification Scope: {{ verification_scope }}
          Target Host: {{ inventory_hostname }}
          Platform: {{ ansible_distribution }}
    
    - name: Import verification tasks
      ansible.builtin.import_tasks: tasks/verify.yml
      vars:
        verify_scope: "{{ verification_scope }}"
    
    - name: Additional service status checks
      block:
        - name: Check macOS services (if macOS)
          ansible.builtin.shell: |
            launchctl list | grep orangead || echo "No OrangeAd services found"
          register: macos_services
          when: ansible_distribution == "MacOSX"
          failed_when: false
        
        - name: Display macOS service status
          ansible.builtin.debug:
            msg: "macOS Services: {{ macos_services.stdout_lines }}"
          when: 
            - ansible_distribution == "MacOSX"
            - macos_services is defined
        
        - name: Check Tailscale status
          ansible.builtin.command: tailscale status --json
          register: tailscale_status
          failed_when: false
          become: false
        
        - name: Display Tailscale status
          ansible.builtin.debug:
            msg: |
              Tailscale Status: {{ 'Connected' if tailscale_status.rc == 0 else 'Not Connected' }}
              {% if tailscale_status.rc != 0 %}
              Error: {{ tailscale_status.stderr | default('Unknown error') }}
              {% endif %}
      when: verification_scope in ['all', 'services', 'network']
    
    - name: Verification summary
      ansible.builtin.debug:
        msg: |
          Verification completed for {{ inventory_hostname }}
          Scope: {{ verification_scope }}
          Platform: {{ ansible_distribution }}
          Status: Check output above for any failures
EOF
)

# Write temporary verification playbook
TEMP_PLAYBOOK="/tmp/oaansible-verify-$$.yml"
echo "$VERIFICATION_PLAYBOOK" > "$TEMP_PLAYBOOK"

log_info "Executing verification playbook..."

# Execute verification
if ! run_playbook_with_vault "$TEMP_PLAYBOOK" "$INVENTORY_FILE" "$ENVIRONMENT verification" --extra-vars "verify_scope=$SCOPE" --tags "verify" "$@"; then
  # Clean up temporary playbook
  rm -f "$TEMP_PLAYBOOK"
  log_error "Verification failed."
  log_error "Check the output above for specific issues."
  exit 1
else
  # Clean up temporary playbook
  rm -f "$TEMP_PLAYBOOK"
  log_info "Verification completed successfully."
  log_info "Scope: $SCOPE, Environment: $ENVIRONMENT"
fi

# Additional local verification for common issues
log_info "Performing additional local checks..."

case $SCOPE in
  all|network)
    log_info "Checking network connectivity to inventory hosts..."
    # Extract hosts from inventory and test connectivity
    if command -v yq >/dev/null 2>&1; then
      HOSTS=$(yq eval '.all.hosts | keys | .[]' "$INVENTORY_FILE" 2>/dev/null || echo "Unable to parse hosts")
      if [ "$HOSTS" != "Unable to parse hosts" ]; then
        for host in $HOSTS; do
          HOST_IP=$(yq eval ".all.hosts.$host.ansible_host" "$INVENTORY_FILE" 2>/dev/null)
          if [ -n "$HOST_IP" ] && [ "$HOST_IP" != "null" ]; then
            if ping -c 1 -W 2 "$HOST_IP" >/dev/null 2>&1; then
              log_info "✓ $host ($HOST_IP) is reachable"
            else
              log_warn "✗ $host ($HOST_IP) is not reachable"
            fi
          fi
        done
      fi
    fi
    ;;
esac

log_debug "run-verify script finished."
exit $VERIFICATION_EXIT_CODE