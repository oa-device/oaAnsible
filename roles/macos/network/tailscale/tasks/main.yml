---
# Skip Tailscale configuration if disabled in inventory (prod/preprod safety)
- name: Check if Tailscale configuration is enabled
  ansible.builtin.debug:
    msg: |
      Tailscale configuration status:
      - configure.tailscale: {{ configure.tailscale | default(true) }}
      - Environment: {{ oa_environment.name | default('unknown') }}

      {% if not (configure.tailscale | default(true)) %}
      SKIPPING: Tailscale configuration disabled in inventory.
      This is expected for production/pre-production environments where Tailscale is managed separately.
      {% else %}
      PROCEEDING: Tailscale configuration enabled.
      {% endif %}

- name: End Tailscale role when configuration is disabled
  ansible.builtin.meta: end_play
  when: not (configure.tailscale | default(true))

- name: Install Go using Homebrew (latest version)
  community.general.homebrew:
    name: go
    state: latest
    update_homebrew: true
  register: go_install_result

- name: Display Go installation status
  ansible.builtin.debug:
    msg: "Go installation {{ go_install_result.changed | ternary('updated to latest version', 'already at latest version') }}"

- name: Define homebrew_prefix for this role
  ansible.builtin.set_fact:
    _homebrew_prefix: "{{ (ansible_architecture == 'arm64') | ternary('/opt/homebrew', '/usr/local') }}"

- name: Set Go environment variables
  block:
    - name: Get Go version
      ansible.builtin.command: "{{ _homebrew_prefix }}/bin/go version"
      register: go_version_output
      changed_when: false
      environment:
        PATH: "{{ _homebrew_prefix }}/bin:{{ ansible_env.PATH }}"

    - name: Display Go version
      ansible.builtin.debug:
        msg: "Using Go version: {{ go_version_output.stdout }}"

    - name: Get Go environment
      ansible.builtin.command: "{{ _homebrew_prefix }}/bin/go env GOPATH"
      register: go_path
      changed_when: false
      environment:
        PATH: "{{ _homebrew_prefix }}/bin:{{ ansible_env.PATH }}"

    - name: Set Go binary path fact
      ansible.builtin.set_fact:
        go_bin_path_for_tailscale: "{{ ansible_env.HOME }}/go/bin"
        go_executable_path: "{{ _homebrew_prefix }}/bin/go"

    - name: Ensure Go binary path for Tailscale exists
      ansible.builtin.file:
        path: "{{ go_bin_path_for_tailscale }}"
        state: directory
        mode: "0755"

- name: Get user ID for Tailscale service management
  ansible.builtin.command: "id -u {{ ansible_user }}"
  register: user_id_result
  changed_when: false
  failed_when: false
  become: true

- name: Stop and disable any user-level Tailscale service (homebrew.mxcl.tailscale)
  ansible.builtin.command: "launchctl bootout gui/{{ user_id_result.stdout }}/homebrew.mxcl.tailscale"
  become: true # Needs to operate on the user's launchd domain, but as root to do so
  register: bootout_result
  failed_when: false
  changed_when: bootout_result.rc == 0
  when: user_id_result.rc == 0 and user_id_result.stdout != ""

- name: Remove user-level Tailscale plist if it exists
  ansible.builtin.file:
    path: "/Users/{{ ansible_user }}/Library/LaunchAgents/homebrew.mxcl.tailscale.plist"
    state: absent
  become: true # Ensure root can delete it even if perms are weird

- name: Pre-cleanup - Stop and remove any existing system-level Tailscale daemon service definition
  ansible.builtin.command: launchctl bootout system /Library/LaunchDaemons/com.tailscale.tailscaled.plist
  become: true
  failed_when: false
  changed_when: false

- name: Pre-cleanup - Remove existing system-level Tailscale daemon plist file
  ansible.builtin.file:
    path: /Library/LaunchDaemons/com.tailscale.tailscaled.plist
    state: absent
  become: true

- name: Pre-cleanup - Check for running tailscaled processes
  ansible.builtin.shell: pgrep tailscaled || echo "not_running"
  become: true
  register: tailscaled_process_check
  changed_when: false

- name: Pre-cleanup - Kill any lingering tailscaled processes
  ansible.builtin.command: pkill tailscaled
  become: true
  register: tailscaled_kill_result
  failed_when: false
  changed_when: tailscaled_kill_result.rc == 0
  when: tailscaled_process_check.stdout != "not_running"

- name: Pre-cleanup - Remove Tailscale.app if it exists (from old Cask install)
  ansible.builtin.file:
    path: /Applications/Tailscale.app
    state: absent
  become: true

# Install/Update both Tailscale binaries together (following official macOS guide)
- name: Get checksums of existing Tailscale binaries (if any)
  ansible.builtin.command: "shasum -a 256 {{ go_bin_path_for_tailscale }}/{{ item }}"
  register: tailscale_checksums_before
  failed_when: false
  changed_when: false
  loop:
    - tailscale
    - tailscaled

- name: Get latest stable Tailscale release version
  ansible.builtin.uri:
    url: https://api.github.com/repos/tailscale/tailscale/releases/latest
    method: GET
    return_content: true
  register: tailscale_latest_release
  failed_when: false

- name: Extract latest version tag
  ansible.builtin.set_fact:
    tailscale_latest_version: "{{ tailscale_latest_release.json.tag_name | default('v1.84.1') }}"
  when: tailscale_latest_release.status == 200

- name: Set fallback version if API call failed
  ansible.builtin.set_fact:
    tailscale_latest_version: "v1.84.1"
  when: tailscale_latest_release.status != 200

- name: Install/Update Tailscale binaries using Go (latest stable version)
  block:
    - name: Install Tailscale binaries with proper build info (latest stable)
      ansible.builtin.shell: |
        set -e
        cd "{{ ansible_env.HOME }}"
        export GOPATH="{{ ansible_env.HOME }}/go"
        export GOBIN="{{ go_bin_path_for_tailscale }}"
        export PATH="{{ _homebrew_prefix }}/bin:{{ ansible_env.HOME }}/go/bin:{{ ansible_env.PATH }}"

        # Clean any existing installs
        rm -f "{{ go_bin_path_for_tailscale }}/tailscale" "{{ go_bin_path_for_tailscale }}/tailscaled"

        # Install both binaries with proper version info
        "{{ go_executable_path }}" install -ldflags "-X tailscale.com/version.longStamp={{ tailscale_latest_version }}" tailscale.com/cmd/tailscale@{{ tailscale_latest_version }}
        "{{ go_executable_path }}" install -ldflags "-X tailscale.com/version.longStamp={{ tailscale_latest_version }}" tailscale.com/cmd/tailscaled@{{ tailscale_latest_version }}
      environment:
        GOTOOLCHAIN: "auto"
      register: tailscale_install_with_buildinfo
      changed_when: false
      failed_when: false

    - name: Try fallback version if latest stable failed
      ansible.builtin.shell: |
        set -e
        cd "{{ ansible_env.HOME }}"
        export GOPATH="{{ ansible_env.HOME }}/go"
        export GOBIN="{{ go_bin_path_for_tailscale }}"
        export PATH="{{ _homebrew_prefix }}/bin:{{ ansible_env.HOME }}/go/bin:{{ ansible_env.PATH }}"

        # Clean any existing installs
        rm -f "{{ go_bin_path_for_tailscale }}/tailscale" "{{ go_bin_path_for_tailscale }}/tailscaled"

        # Install both binaries with proper version info (fallback)
        "{{ go_executable_path }}" install -ldflags "-X tailscale.com/version.longStamp=v1.82.0" tailscale.com/cmd/tailscale@v1.82.0
        "{{ go_executable_path }}" install -ldflags "-X tailscale.com/version.longStamp=v1.82.0" tailscale.com/cmd/tailscaled@v1.82.0
      environment:
        GOTOOLCHAIN: "auto"
      register: tailscale_fallback_with_buildinfo
      changed_when: false
      when: tailscale_install_with_buildinfo.rc != 0

    - name: Set combined install result
      ansible.builtin.set_fact:
        tailscale_install_success: >-
          {{ tailscale_install_with_buildinfo.rc == 0 or
             (tailscale_fallback_with_buildinfo.rc | default(1) == 0) }}
        tailscale_version_used: >-
          {{ tailscale_latest_version if tailscale_install_with_buildinfo.rc == 0 else 'v1.82.0' }}

    - name: Display installation results
      ansible.builtin.debug:
        msg: |
          Tailscale installation completed:
          Version used: {{ tailscale_version_used }}
          Latest install: {{ 'Success' if tailscale_install_with_buildinfo.rc == 0 else 'Failed' }}
          Fallback install: {{ 'Success' if (tailscale_fallback_with_buildinfo.rc | default(1) == 0) else 'Not attempted' }}

    - name: Fail if both installation attempts failed
      ansible.builtin.fail:
        msg: |
          Failed to install Tailscale binaries with proper build info.
          Latest version ({{ tailscale_latest_version }}) error:
          {{ tailscale_install_with_buildinfo.stderr | default('None') }}
          Fallback version (v1.82.0) error:
          {{ tailscale_fallback_with_buildinfo.stderr | default('None') }}
      when: not tailscale_install_success

- name: Get checksums of Tailscale binaries after install/update
  ansible.builtin.command: "shasum -a 256 {{ go_bin_path_for_tailscale }}/{{ item }}"
  register: tailscale_checksums_after
  failed_when: false
  changed_when: false
  loop:
    - tailscale
    - tailscaled

- name: Set fact for tailscale binaries change
  ansible.builtin.set_fact:
    tailscale_binaries_changed: >-
      {{ tailscale_checksums_before.results | map(attribute='stdout') | map('default', '') | map('regex_replace', '^([a-f0-9]+).*', '\1') | list !=
         tailscale_checksums_after.results | map(attribute='stdout') | map('default', '') | map('regex_replace', '^([a-f0-9]+).*', '\1') | list or
         tailscale_checksums_before.results | selectattr('rc', 'ne', 0) | list | length > 0 }}
  when: tailscale_install_success | bool

- name: Check if source files for symlinks exist
  ansible.builtin.stat:
    path: "{{ go_bin_path_for_tailscale }}/{{ item }}"
  loop:
    - tailscale
    - tailscaled
  register: tailscale_binaries_stat_check

- name: Ensure /usr/local/bin directory exists
  ansible.builtin.file:
    path: /usr/local/bin
    state: directory
    mode: "0755"
  become: true

- name: Create symlinks in /usr/local/bin for easier access
  ansible.builtin.file:
    src: "{{ go_bin_path_for_tailscale }}/{{ item.item }}"
    dest: "/usr/local/bin/{{ item.item }}"
    state: link
    force: true
  loop: "{{ tailscale_binaries_stat_check.results }}"
  when: item.stat.exists
  become: true

- name: Ensure Tailscale operational directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: wheel
    mode: "0755"
  loop:
    - /var/lib/tailscale
    - /var/run
    - /Library/Tailscale
  become: true

- name: Check if Tailscale daemon plist exists
  ansible.builtin.stat:
    path: /Library/LaunchDaemons/com.tailscale.tailscaled.plist
  register: tailscale_plist_exists
  become: true

- name: Install Tailscale system daemon
  ansible.builtin.command: /usr/local/bin/tailscaled install-system-daemon
  become: true # sudo is required
  register: tailscale_daemon_installed
  changed_when: tailscale_daemon_installed.rc == 0
  when: not tailscale_plist_exists.stat.exists
  notify: Suggest reboot for new Tailscale install/config

# Ensure the service is enabled and loaded
- name: Ensure tailscaled service is enabled
  ansible.builtin.command: launchctl enable system/com.tailscale.tailscaled
  become: true
  changed_when: false # This just ensures it's enabled, doesn't mean it changed state now

- name: Ensure tailscaled service is loaded
  ansible.builtin.command: launchctl load -w /Library/LaunchDaemons/com.tailscale.tailscaled.plist
  become: true
  changed_when: false # Loading an already loaded service is not a change
  failed_when: false # It might already be loaded by RunAtLoad

- name: Restart tailscaled daemon if binaries were updated
  ansible.builtin.command: launchctl kickstart -k system/com.tailscale.tailscaled
  become: true
  when: tailscale_binaries_changed | default(false)
  changed_when: true
  register: tailscaled_restart_result

- name: Wait after daemon restart for proper initialization
  ansible.builtin.pause:
    seconds: 10
  when: tailscaled_restart_result.changed | default(false)

- name: Wait for Tailscale daemon to be ready (CRITICAL)
  ansible.builtin.wait_for:
    path: /var/run/tailscaled.socket
    state: present
    timeout: 30
    delay: 5
  register: tailscale_socket_wait

# Check current Tailscale status using JSON output for better parsing
- name: Check current Tailscale status
  ansible.builtin.command: /usr/local/bin/tailscale status --json
  register: ts_status_result
  changed_when: false
  failed_when: false # Don't fail if Tailscale isn't configured yet
  become: true # tailscale status might need to interact with daemon as root
  when: tailscale_socket_wait is succeeded # Only run if daemon socket seems to be there

# Parse the JSON output to determine current state
- name: Parse Tailscale status JSON
  ansible.builtin.set_fact:
    ts_status_data: "{{ ts_status_result.stdout | from_json }}"
    ts_status_error: "{{ ts_status_result.rc != 0 or not ts_status_result.stdout }}"
  when: ts_status_result.stdout is defined and ts_status_result.stdout != ""

# Determine if Tailscale is logged in and get current configuration
- name: Determine current Tailscale state
  ansible.builtin.set_fact:
    is_tailscale_logged_in: "{{ ts_status_data.Self is defined and ts_status_data.Self.Online | default(false) }}"
    current_ts_hostname: "{{ ts_status_data.Self.HostName | default('') }}"
    current_ts_tags: "{{ ts_status_data.Self.Tags | default([]) }}"
  when: not ts_status_error | default(true)

# Check if Tailscale hostname needs updating (regardless of format)
- name: Check if Tailscale hostname needs updating
  ansible.builtin.set_fact:
    tailscale_hostname_mismatch: >-
      {{ current_ts_hostname | default('') != inventory_hostname }}
    has_legacy_hostname: >-
      {{ (current_ts_hostname | default('') | regex_search('^f1-\d+$') is not none) or
         (current_ts_hostname | default('') | regex_search('^f1\d+$') is not none) }}
    expected_new_hostname: "{{ inventory_hostname }}"
  when: is_tailscale_logged_in | default(false)

# Debug hostname detection
- name: Debug hostname detection
  ansible.builtin.debug:
    msg: |
      Current Tailscale hostname: {{ current_ts_hostname | default('N/A') }}
      Target hostname: {{ inventory_hostname }}
      Hostname mismatch: {{ tailscale_hostname_mismatch | default('N/A') }}
      Has legacy format: {{ has_legacy_hostname | default('N/A') }}
      Environment: {{ target_env | default('unknown') }}
    verbosity: 1
  when: is_tailscale_logged_in | default(false)

# Define expected Tailscale tags for comparison
- name: Define expected Tailscale tags
  ansible.builtin.set_fact:
    expected_ts_tags_list: "{{ (vault_tailscale_tags_macos | default('tag:oa-macos,tag:oa-tracker')).split(',') | map('trim') | sort }}"

# Compare current tags with expected tags
- name: Compare current tags with expected tags
  ansible.builtin.set_fact:
    tags_are_correct: "{{ current_ts_tags | default([]) | map('trim') | sort == expected_ts_tags_list }}"
  when: is_tailscale_logged_in | default(false)

# Decide if full 'tailscale up' is needed or just configuration changes
- name: Decide if full 'tailscale up' is needed
  ansible.builtin.set_fact:
    needs_full_tailscale_up: >-
      {{ not is_tailscale_logged_in | default(true) or
         tailscale_hostname_mismatch | default(false) or
         not tags_are_correct | default(false)
      }}

# Debug output to help understand the decision logic
- name: Debug Tailscale decision logic
  ansible.builtin.debug:
    msg: |
      is_tailscale_logged_in: {{ is_tailscale_logged_in | default('N/A') }}
      current_ts_hostname: {{ current_ts_hostname | default('N/A') }} vs inventory_hostname: {{ inventory_hostname }}
      tailscale_hostname_mismatch: {{ tailscale_hostname_mismatch | default('N/A') }}
      has_legacy_hostname: {{ has_legacy_hostname | default('N/A') }}
      current_ts_tags: {{ current_ts_tags | default([]) }} vs expected_ts_tags_list: {{ expected_ts_tags_list }}
      tags_are_correct: {{ tags_are_correct | default('N/A') }}
      needs_full_tailscale_up: {{ needs_full_tailscale_up }}
    verbosity: 1

# Scenario 1: Force hostname update when Tailscale hostname doesn't match
- name: Notice Tailscale hostname mismatch detected
  ansible.builtin.debug:
    msg: |
      Tailscale hostname mismatch detected: {{ current_ts_hostname }} → {{ inventory_hostname }}
      Current Tailscale registration: {{ current_ts_hostname }}
      Target hostname: {{ inventory_hostname }}
      Environment: {{ target_env | default('unknown') }}
      Will use force-reauth: {{ target_env | default('production') != 'production' }}
      Legacy format detected: {{ has_legacy_hostname | default(false) }}
  when:
    - is_tailscale_logged_in | default(false)
    - tailscale_hostname_mismatch | default(false)

- name: Force full Tailscale re-authentication for hostname mismatch (staging only)
  ansible.builtin.command: >
    /usr/local/bin/tailscale up --authkey={{ vault_tailscale_auth_key }} --hostname={{ inventory_hostname }} --advertise-tags={{ vault_tailscale_tags_macos |
    default('tag:oa-macos,tag:oa-tracker') }} --accept-dns=false --force-reauth --ssh --reset
  become: true
  when:
    - is_tailscale_logged_in | default(false)
    - tailscale_hostname_mismatch | default(false)
    - target_env | default('production') != 'production' # Only in staging
  changed_when: true
  register: tailscale_hostname_reauth
  failed_when: >
    tailscale_hostname_reauth.rc != 0 and 'Success.' not in (tailscale_hostname_reauth.stdout | default('')) and 'already logged in' not in
    (tailscale_hostname_reauth.stderr | default('')) and 'already using auth key' not in (tailscale_hostname_reauth.stderr | default('')) and 'already
    authenticated' not in (tailscale_hostname_reauth.stderr | default('')) and 'SSH server does not run in sandboxed' not in (tailscale_hostname_reauth.stderr |
    default('')) and 'different tailnet' not in (tailscale_hostname_reauth.stderr | default('')) and 'auth key is not valid' not in
    (tailscale_hostname_reauth.stderr | default('')) and 'invalid auth key' not in (tailscale_hostname_reauth.stderr | default(''))

- name: Handle cross-Tailnet scenario with logout and re-auth
  block:
    - name: Detect cross-Tailnet authentication issue
      ansible.builtin.debug:
        msg: |
          Cross-Tailnet scenario detected for {{ inventory_hostname }}
          This device appears to be registered on a different Tailnet.
          Will perform logout and re-authentication to join the correct Tailnet.
          Previous hostname: {{ current_ts_hostname | default('Unknown') }}
          Target hostname: {{ inventory_hostname }}
      when:
        - tailscale_hostname_reauth is defined
        - tailscale_hostname_reauth.rc is defined
        - tailscale_hostname_reauth.rc != 0
        - ('different tailnet' in (tailscale_hostname_reauth.stderr | default('')) or 'auth key is not valid' in (tailscale_hostname_reauth.stderr |
          default('')) or 'invalid auth key' in (tailscale_hostname_reauth.stderr | default('')))

    - name: Logout from current Tailnet (cross-Tailnet scenario)
      ansible.builtin.command: /usr/local/bin/tailscale logout
      become: true
      register: tailscale_logout_result
      when:
        - tailscale_hostname_reauth is defined
        - tailscale_hostname_reauth.rc is defined
        - tailscale_hostname_reauth.rc != 0
        - ('different tailnet' in (tailscale_hostname_reauth.stderr | default('')) or 'auth key is not valid' in (tailscale_hostname_reauth.stderr |
          default('')) or 'invalid auth key' in (tailscale_hostname_reauth.stderr | default('')))
      failed_when: false
      changed_when: tailscale_logout_result.rc == 0

    - name: Re-authenticate to correct Tailnet (cross-Tailnet scenario)
      ansible.builtin.command: >
        /usr/local/bin/tailscale up --authkey={{ vault_tailscale_auth_key }} --hostname={{ inventory_hostname }} --advertise-tags={{ vault_tailscale_tags_macos
        | default('tag:oa-macos,tag:oa-tracker') }} --accept-dns=false --ssh --reset
      become: true
      register: tailscale_cross_tailnet_reauth
      when:
        - tailscale_hostname_reauth is defined
        - tailscale_hostname_reauth.rc is defined
        - tailscale_hostname_reauth.rc != 0
        - ('different tailnet' in (tailscale_hostname_reauth.stderr | default('')) or 'auth key is not valid' in (tailscale_hostname_reauth.stderr |
          default('')) or 'invalid auth key' in (tailscale_hostname_reauth.stderr | default('')))
        - tailscale_logout_result is defined and tailscale_logout_result.rc == 0
      changed_when: tailscale_cross_tailnet_reauth.rc == 0
      failed_when: >
        tailscale_cross_tailnet_reauth.rc != 0 and 'Success.' not in (tailscale_cross_tailnet_reauth.stdout | default('')) and 'SSH server does not run in
        sandboxed' not in (tailscale_cross_tailnet_reauth.stderr | default(''))

    - name: Display cross-Tailnet completion notice
      ansible.builtin.debug:
        msg: |
          Cross-Tailnet migration completed for {{ inventory_hostname }}
          The device has been moved to the correct Tailnet.
          New Tailscale hostname: {{ inventory_hostname }}

          Note: The old node on the previous Tailnet should be manually removed from the admin console.
          You can now SSH using: admin@{{ inventory_hostname }}
      when:
        - tailscale_cross_tailnet_reauth is defined
        - tailscale_cross_tailnet_reauth.changed

- name: Safe hostname update for hostname mismatch (production only)
  ansible.builtin.command: /usr/local/bin/tailscale set --hostname={{ inventory_hostname }}
  become: true
  when:
    - is_tailscale_logged_in | default(false)
    - tailscale_hostname_mismatch | default(false)
    - target_env | default('production') == 'production' # Only in production
    - not (tailscale_hostname_reauth is defined and tailscale_hostname_reauth.changed)
    - not (tailscale_cross_tailnet_reauth is defined and tailscale_cross_tailnet_reauth.changed)
  changed_when: true
  register: tailscale_hostname_safe

- name: Display hostname change completion notice
  ansible.builtin.debug:
    msg: |
      Tailscale hostname update completed for {{ inventory_hostname }}
      Previous Tailscale hostname: {{ current_ts_hostname }}
      New Tailscale hostname: {{ inventory_hostname }}
      Method: {{ 'Force re-authentication' if target_env != 'production' else 'Safe update' }}
      Environment: {{ target_env | default('unknown') }}

      Note: You should now be able to SSH using the new hostname: admin@{{ inventory_hostname }}
  when:
    - is_tailscale_logged_in | default(false)
    - tailscale_hostname_mismatch | default(false)
    - (tailscale_hostname_reauth is defined and tailscale_hostname_reauth.changed) or (tailscale_hostname_safe is defined and tailscale_hostname_safe.changed)
      or (tailscale_cross_tailnet_reauth is defined and tailscale_cross_tailnet_reauth.changed)

# Scenario 2: Fallback hostname correction (if not handled above)
- name: Fallback Tailscale hostname correction
  ansible.builtin.command: /usr/local/bin/tailscale set --hostname={{ inventory_hostname }}
  become: true
  when:
    - is_tailscale_logged_in | default(false)
    - tailscale_hostname_mismatch | default(false)
    - not (tailscale_hostname_reauth is defined and tailscale_hostname_reauth.changed)
    - not (tailscale_hostname_safe is defined and tailscale_hostname_safe.changed)
    - not (tailscale_cross_tailnet_reauth is defined and tailscale_cross_tailnet_reauth.changed)
  changed_when: true # Assume change
  register: tailscale_hostname_correction

# Scenario 3: Tailscale is logged in, but tags are wrong
- name: Correct Tailscale tags if mismatched and already logged in
  ansible.builtin.command: /usr/local/bin/tailscale set --advertise-tags={{ vault_tailscale_tags_macos | default('tag:oa-macos,tag:oa-tracker') }}
  become: true
  when:
    - is_tailscale_logged_in | default(false)
    - not tags_are_correct | default(false)
    - not (tailscale_hostname_reauth is defined and tailscale_hostname_reauth.changed)
    - not (tailscale_hostname_safe is defined and tailscale_hostname_safe.changed)
    - not (tailscale_hostname_correction is defined and tailscale_hostname_correction.changed)
    - not (tailscale_cross_tailnet_reauth is defined and tailscale_cross_tailnet_reauth.changed)
    - not (tailscale_cross_tailnet_reauth is defined and tailscale_cross_tailnet_reauth.changed)
  changed_when: true # Assume change
  register: tailscale_tags_correction

# Scenario 4: Try gentle authentication first without --force-reauth (if hostname mismatch wasn't handled)
- name: Authenticate Tailscale if needed (gentle approach first)
  ansible.builtin.command: >
    /usr/local/bin/tailscale up --authkey={{ vault_tailscale_auth_key }} --hostname={{ inventory_hostname }} --advertise-tags={{ vault_tailscale_tags_macos |
    default('tag:oa-macos,tag:oa-tracker') }} --accept-dns=false --ssh --reset
  become: true # Run as root to ensure it interacts with system daemon and has perms
  register: tailscale_up_gentle
  when:
    - needs_full_tailscale_up | default(false)
    - not (ansible_env.OA_ANSIBLE_TAILSCALE_SAFE_MODE | default(false) | bool and ansible_env.OA_ANSIBLE_DEPLOYMENT_PHASE | default('') == 'production')
    - not (tailscale_hostname_reauth is defined and tailscale_hostname_reauth.changed)
    - not (tailscale_hostname_safe is defined and tailscale_hostname_safe.changed)
    - not (tailscale_hostname_correction is defined and tailscale_hostname_correction.changed)
    - not (tailscale_cross_tailnet_reauth is defined and tailscale_cross_tailnet_reauth.changed)
  changed_when: tailscale_up_gentle.rc == 0 and ('Success.' in tailscale_up_gentle.stdout or tailscale_up_gentle.stdout == "")
  failed_when: false # Allow to fail to try with --force-reauth

# Scenario 5: Safe Tailscale authentication for production
- name: Authenticate Tailscale in safe mode (production only)
  ansible.builtin.command: >
    /usr/local/bin/tailscale set --advertise-tags={{ vault_tailscale_tags_macos | default('tag:oa-macos,tag:oa-tracker') }} --hostname={{ inventory_hostname }}
  become: true
  register: tailscale_safe_config
  when:
    - needs_full_tailscale_up | default(false)
    - ansible_env.OA_ANSIBLE_TAILSCALE_SAFE_MODE | default(false) | bool
    - ansible_env.OA_ANSIBLE_DEPLOYMENT_PHASE | default('') == 'production'
    - not (tailscale_hostname_reauth is defined and tailscale_hostname_reauth.changed)
    - not (tailscale_hostname_safe is defined and tailscale_hostname_safe.changed)
    - not (tailscale_hostname_correction is defined and tailscale_hostname_correction.changed)
    - not (tailscale_cross_tailnet_reauth is defined and tailscale_cross_tailnet_reauth.changed)
  changed_when: tailscale_safe_config.rc == 0
  failed_when: false

# Scenario 6: If gentle approach fails and not in safe mode, try with --force-reauth
- name: Authenticate Tailscale with force-reauth if gentle approach failed
  ansible.builtin.command: >
    /usr/local/bin/tailscale up --authkey={{ vault_tailscale_auth_key }} --hostname={{ inventory_hostname }} --advertise-tags={{ vault_tailscale_tags_macos |
    default('tag:oa-macos,tag:oa-tracker') }} --accept-dns=false --force-reauth --ssh --reset
  become: true # Run as root to ensure it interacts with system daemon and has perms
  register: tailscale_up_force
  when:
    - needs_full_tailscale_up | default(false)
    - tailscale_up_gentle is defined and tailscale_up_gentle.rc is defined and tailscale_up_gentle.rc != 0
    - not (ansible_env.OA_ANSIBLE_TAILSCALE_SAFE_MODE | default(false) | bool and ansible_env.OA_ANSIBLE_DEPLOYMENT_PHASE | default('') == 'production')
    - not (tailscale_hostname_reauth is defined and tailscale_hostname_reauth.changed)
    - not (tailscale_hostname_safe is defined and tailscale_hostname_safe.changed)
    - not (tailscale_hostname_correction is defined and tailscale_hostname_correction.changed)
    - not (tailscale_cross_tailnet_reauth is defined and tailscale_cross_tailnet_reauth.changed)
  changed_when: tailscale_up_force.rc == 0 and ('Success.' in tailscale_up_force.stdout or tailscale_up_force.stdout == "")
  failed_when: >
    tailscale_up_force.rc != 0 and 'already logged in' not in (tailscale_up_force.stderr | default('')) and 'already using auth key' not in
    (tailscale_up_force.stderr | default('')) and 'already authenticated' not in (tailscale_up_force.stderr | default('')) and not ('Success.' in
    tailscale_up_force.stdout or tailscale_up_force.stdout == "")

- name: Verify Tailscale installation and get final status
  ansible.builtin.command: /usr/local/bin/tailscale status --json
  become: true # Run as root
  register: tailscale_final_status_json
  changed_when: false
  failed_when: tailscale_final_status_json.rc != 0
  when: tailscale_socket_wait is succeeded

- name: Parse final Tailscale status JSON
  ansible.builtin.set_fact:
    final_ts_status_data: "{{ tailscale_final_status_json.stdout | from_json }}"
  when: tailscale_final_status_json.stdout is defined and tailscale_final_status_json.stdout != ""

- name: Display final Tailscale connection status
  ansible.builtin.debug:
    msg: |
      Tailscale Status: {{ final_ts_status_data.Self.Online | default(false) | ternary('Connected', 'Not Connected') }}
      Hostname: {{ final_ts_status_data.Self.HostName | default('Unknown') }}
      Tags: {{ final_ts_status_data.Self.Tags | default([]) | join(', ') }}
      Node ID: {{ final_ts_status_data.Self.ID | default('Unknown') }}
  when: final_ts_status_data is defined

# Enable Tailscale SSH after confirming Tailscale is working properly
- name: Check if Tailscale SSH is enabled
  ansible.builtin.command: /usr/local/bin/tailscale status --ssh
  become: true
  register: tailscale_ssh_status
  changed_when: false
  failed_when: false
  when:
    - final_ts_status_data is defined
    - final_ts_status_data.Self.Online | default(false)

- name: Enable Tailscale SSH
  ansible.builtin.command: /usr/local/bin/tailscale set --ssh
  become: true
  register: tailscale_ssh_enabled
  changed_when: tailscale_ssh_enabled.rc == 0
  when:
    - final_ts_status_data is defined
    - final_ts_status_data.Self.Online | default(false)
    - tailscale_ssh_status.stdout is defined
    - "'disabled' in tailscale_ssh_status.stdout"

- name: Check for hostname duplication
  ansible.builtin.debug:
    msg: |
      WARNING: The Tailscale hostname ({{ final_ts_status_data.Self.HostName | default('Unknown') }})
      does not match the expected hostname ({{ inventory_hostname }}).
      This may indicate a hostname duplication issue in the Tailscale admin console.
      Consider cleaning up old nodes in the Tailscale admin console.
  when:
    - final_ts_status_data is defined
    - final_ts_status_data.Self.HostName is defined
    - final_ts_status_data.Self.HostName != inventory_hostname
    - "'-' in final_ts_status_data.Self.HostName"
  notify: Suggest reboot for new Tailscale install/config
