#!/bin/bash
# Template for granting camera permissions
# This script grants camera permissions to various applications in the TCC database

# TCC database path - using hardcoded path to ensure it's correct
TCC_DB="{{ ansible_user_dir }}/Library/Application Support/com.apple.TCC/TCC.db"

# Define the applications and their client types
declare -a apps
declare -a client_types

# Add the real Python executables (not just symlinks)
apps+=("/Users/{{ ansible_user }}/.pyenv/versions/3.10.11/bin/python3.10")
client_types+=(1)

# Add the virtual environment Python executables
apps+=("{{ ansible_user_dir }}/orangead/macos-api/.venv/bin/python3")
client_types+=(1)

apps+=("{{ ansible_user_dir }}/orangead/tracker/.venv/bin/python3")
client_types+=(1)

# Add other required applications
apps+=("/usr/local/bin/tailscaled")
client_types+=(1)

apps+=("/usr/libexec/sshd-keygen-wrapper")
client_types+=(1)

apps+=("com.apple.Terminal")
client_types+=(0)

# Loop over the applications
for i in "${!apps[@]}"; do
    app=${apps[$i]}
    client_type=${client_types[$i]}
    
    echo "Processing $app with client_type $client_type"
    
    # Check if the application has a record
    record=$(sqlite3 "$TCC_DB" "SELECT * FROM access WHERE service='kTCCServiceCamera' AND client='$app';" 2>/dev/null || echo "")
    
    if [[ -z "$record" ]]; then
        echo "No record found for $app, inserting a new record"
        # Insert a new record
        sqlite3 "$TCC_DB" "INSERT INTO access (service, client, client_type, auth_value, auth_reason, auth_version, indirect_object_identifier) VALUES ('kTCCServiceCamera', '$app', $client_type, 2, 3, 1, 'UNUSED');" 2>/dev/null
        if [ $? -eq 0 ]; then
            echo "Successfully inserted record for $app"
        else
            echo "Failed to insert record for $app"
        fi
    else
        echo "Record found for $app: $record"
        # Update the record
        sqlite3 "$TCC_DB" "UPDATE access SET client_type=$client_type, auth_value=2, auth_reason=3 WHERE service='kTCCServiceCamera' AND client='$app';" 2>/dev/null
        if [ $? -eq 0 ]; then
            echo "Successfully updated record for $app"
        else
            echo "Failed to update record for $app"
        fi
    fi
done

echo "Camera permissions granted to all applications"

# Verify the permissions
echo -e "\nVerifying camera permissions:"
sqlite3 "$TCC_DB" "SELECT service, client, client_type, auth_value, auth_reason FROM access WHERE service='kTCCServiceCamera';" 2>/dev/null || echo "Error accessing TCC database"

# Test camera access
echo -e "\nTesting camera access:"
cd {{ ansible_user_dir }}/orangead/macos-api && ./.venv/bin/python3 -c 'import cv2; cap = cv2.VideoCapture(0); print("Camera opened successfully:", cap.isOpened()); cap.release()' 2>/dev/null || echo "Failed to test camera"
