---
# Ubuntu shell enhancement tasks - Zsh with intelligent checks

- name: Check current shell configuration
  tags: [shell, zsh]
  block:
    - name: Get current shell for ansible user
      ansible.builtin.getent:
        database: passwd
        key: "{{ ansible_user }}"
      register: user_shell_info

    - name: Check if zsh is installed
      ansible.builtin.command: which zsh
      register: zsh_installed
      failed_when: false
      changed_when: false

    - name: Check if Oh My Zsh is installed
      ansible.builtin.stat:
        path: "/home/{{ ansible_user }}/.oh-my-zsh"
      register: oh_my_zsh_dir

    - name: Check if lsd is installed
      ansible.builtin.command: which lsd
      register: lsd_installed
      failed_when: false
      changed_when: false

    - name: Check zsh configuration file
      ansible.builtin.stat:
        path: "/home/{{ ansible_user }}/.zshrc"
      register: zshrc_file

    - name: Check if zshrc contains our configuration signature
      ansible.builtin.shell: |
        if [ -f "/home/{{ ansible_user }}/.zshrc" ]; then
          # Check for our unique signature that indicates our template was used
          grep -q "# Enhanced Zsh Configuration for {{ ansible_user }}@{{ inventory_hostname }}" "/home/{{ ansible_user }}/.zshrc"
        else
          exit 1
        fi
      register: zsh_config_check
      failed_when: false
      changed_when: false
      become: true
      become_user: "{{ ansible_user }}"

    - name: Set shell enhancement skip flags
      ansible.builtin.set_fact:
        passwd_entry: "{{ user_shell_info.ansible_facts.getent_passwd[ansible_user] }}"
        force_reinstall: "{{ force_shell_reinstall | default(false) | bool }}"
        skip_zsh_install: "{{ (zsh_installed.rc == 0) and not (force_shell_reinstall | default(false) | bool) }}"
        skip_lsd_install: "{{ (lsd_installed.rc == 0) and not (force_shell_reinstall | default(false) | bool) }}"
        skip_oh_my_zsh: "{{ oh_my_zsh_dir.stat.exists and not (force_shell_reinstall | default(false) | bool) }}"
        skip_zsh_config: "{{ (zshrc_file.stat.exists and zsh_config_check.rc == 0) and not (force_shell_reinstall | default(false) | bool) }}"

    - name: Set shell-related facts
      ansible.builtin.set_fact:
        current_shell: "{{ passwd_entry[5] if passwd_entry | length > 5 else '/bin/bash' }}"
        skip_shell_change: "{{ (passwd_entry[6] if passwd_entry | length > 6 else '/bin/bash') == '/usr/bin/zsh' }}"

- name: Display shell configuration status
  tags: [shell, zsh]
  ansible.builtin.debug:
    msg: |
      Shell Enhancement Status:
      - Force reinstall: {{ 'Yes' if force_reinstall else 'No' }}
      - Current shell: {{ current_shell.split('/')[-1] | default('unknown') }}
      - Zsh installed: {{ 'Yes' if skip_zsh_install else 'No' }}
      - Oh My Zsh: {{ 'Already installed' if skip_oh_my_zsh else 'Needs installation' }}
      - lsd (modern ls): {{ 'Already installed' if skip_lsd_install else 'Needs installation' }}
      - Zsh as default: {{ 'Already set' if skip_shell_change else 'Needs configuration' }}
      - Enhanced .zshrc: {{ 'Already configured' if skip_zsh_config else 'Needs setup' }}

- name: Install zsh shell and dependencies
  tags: [shell, zsh]
  ansible.builtin.apt:
    name:
      - zsh
      - curl
      - git
      - software-properties-common
    state: present
    update_cache: true
  become: true
  when: not skip_zsh_install

- name: Install lsd (modern ls replacement)
  tags: [shell, zsh]
  when: not skip_lsd_install
  block:
    - name: Download lsd package
      ansible.builtin.get_url:
        url: "https://github.com/lsd-rs/lsd/releases/download/v1.1.5/lsd_1.1.5_amd64.deb"
        dest: "/tmp/lsd.deb"
        mode: "0644"
      become: true

    - name: Install lsd package
      ansible.builtin.apt:
        deb: "/tmp/lsd.deb"
        state: present
      become: true

    - name: Clean up lsd download
      ansible.builtin.file:
        path: "/tmp/lsd.deb"
        state: absent
      become: true

- name: Install Oh My Zsh
  tags: [shell, zsh]
  when: not skip_oh_my_zsh
  block:
    - name: Remove existing Oh My Zsh directory (force reinstall)
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/.oh-my-zsh"
        state: absent
      become: true
      when: force_reinstall | default(false)

    - name: Download Oh My Zsh installer
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh"
        dest: "/tmp/install_ohmyzsh.sh"
        mode: "0755"

    - name: Install Oh My Zsh
      ansible.builtin.shell: |
        sh /tmp/install_ohmyzsh.sh --unattended
      become: true
      become_user: "{{ ansible_user }}"
      environment:
        ZSH: "/home/{{ ansible_user }}/.oh-my-zsh"
      register: ohmyzsh_install
      changed_when: "'Oh My Zsh is already installed' not in ohmyzsh_install.stdout"

    - name: Clean up Oh My Zsh installer
      ansible.builtin.file:
        path: "/tmp/install_ohmyzsh.sh"
        state: absent

- name: Install Oh My Zsh external plugins
  tags: [shell, zsh]
  when: not skip_oh_my_zsh
  block:
    - name: Create custom plugins directory
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/.oh-my-zsh/custom/plugins"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0755"

    - name: Install zsh-autosuggestions plugin
      ansible.builtin.git:
        repo: "https://github.com/zsh-users/zsh-autosuggestions"
        dest: "/home/{{ ansible_user }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
        version: "v0.7.0"
      become: true
      become_user: "{{ ansible_user }}"

    - name: Install zsh-syntax-highlighting plugin
      ansible.builtin.git:
        repo: "https://github.com/zsh-users/zsh-syntax-highlighting"
        dest: "/home/{{ ansible_user }}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
        version: "0.8.0"  # Updated to latest stable version
        force: true  # Force update to avoid conflicts
      become: true
      become_user: "{{ ansible_user }}"

- name: Configure zsh with enhanced settings
  tags: [shell, zsh]
  when: not skip_zsh_config
  block:
    - name: Backup existing .zshrc if it exists
      ansible.builtin.copy:
        src: "/home/{{ ansible_user }}/.zshrc"
        dest: "/home/{{ ansible_user }}/.zshrc.bak"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0644"
        remote_src: false
      when: zshrc_file.stat.exists
      failed_when: false

    - name: Create enhanced .zshrc configuration
      ansible.builtin.template:
        src: zshrc.j2
        dest: "/home/{{ ansible_user }}/.zshrc"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0644"
        backup: false
      register: zshrc_created

- name: Set zsh as default shell for ansible user
  tags: [shell, zsh]
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    shell: /usr/bin/zsh
  become: true
  when: not skip_shell_change

- name: Display shell enhancement results
  tags: [shell, zsh]
  ansible.builtin.debug:
    msg: |-
      Enhanced Zsh Configuration Completed:
      - Zsh: {{ 'Verified' if skip_zsh_install else 'Installed' }}
      - Oh My Zsh: {{ 'Verified' if skip_oh_my_zsh else 'Installed with robbyrussell theme' }}
      - External plugins: {{ 'Verified' if skip_oh_my_zsh else 'Installed zsh-autosuggestions and zsh-syntax-highlighting' }}
      - Default shell: {{ 'Already zsh' if skip_shell_change else 'Changed to zsh for ' + ansible_user }}
      - Modern ls (lsd): {{ 'Verified' if skip_lsd_install else 'Installed with custom aliases' }}
      - Enhanced .zshrc: {{ 'Already configured' if skip_zsh_config else 'Created with useful plugins and aliases' }}
      - Nano editor: {{ 'Already configured' if skip_zsh_config else 'Set as default with enhanced options' }}

      Note: All bash scripts remain fully compatible!
