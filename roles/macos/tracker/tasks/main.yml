#SPDX-License-Identifier: MIT-0
---
# tasks file for roles/macos/tracker

# No longer creating a separate user - using ansible_user instead

# OpenCV is installed via pip as part of the Python dependencies
# in the pyproject.toml file, so we don't need to install it separately via Homebrew

# Create directory structure in ansible_user's home directory
- name: Ensure tracker directory exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/orangead/tracker"
    state: directory
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0755"
  become: true

- name: Ensure tracker data directory exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/orangead/tracker/data"
    state: directory
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0755"
  become: true

# Create a symbolic link to accommodate the hardcoded database path in flight_server.py
- name: Create symbolic link from events.db to data/events.db
  ansible.builtin.file:
    src: "{{ ansible_user_dir }}/orangead/tracker/data/events.db"
    dest: "{{ ansible_user_dir }}/orangead/tracker/events.db"
    state: link
    owner: "{{ ansible_user }}"
    group: staff
    force: true
  become: true

- name: Ensure tracker logs directory exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/orangead/tracker/logs"
    state: directory
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0755"
  become: true

# Copy project files
- name: Synchronize oaTracker files
  ansible.posix.synchronize:
    src: "{{ playbook_dir }}/../oaTracker/"
    dest: "{{ ansible_user_dir }}/orangead/tracker/"
    delete: false
    rsync_opts:
      - "--exclude=.git"
      - "--exclude=.venv"
      - "--exclude=logs"
      - "--exclude=data"
      - "--exclude=__pycache__"
      - "--exclude=*.pyc"
      - "--exclude=.DS_Store"
      - "--exclude=notebooks"
  become: true
  become_user: "{{ ansible_user }}"

# Ensure models directory exists and copy YOLO model
- name: Ensure models directory exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/orangead/tracker/models"
    state: directory
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0755"
  become: true

- name: Copy YOLO model file
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/../oaTracker/models/yolo12s.pt"
    dest: "{{ ansible_user_dir }}/orangead/tracker/models/yolo12s.pt"
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0644"
  become: true
  ignore_errors: true

# Set proper ownership
- name: Set proper ownership for tracker files
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/orangead/tracker"
    owner: "{{ ansible_user }}"
    group: staff
    recurse: true
  become: true

- name: Ensure specific directories have proper permissions
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0755"
  loop:
    - "{{ ansible_user_dir }}/orangead/tracker/logs"
    - "{{ ansible_user_dir }}/orangead/tracker/data"
  become: true

- name: Ensure specific executable files have proper permissions
  ansible.builtin.file:
    path: "{{ item }}"
    state: file
    mode: "0755"
    owner: "{{ ansible_user }}"
    group: staff
  loop:
    - "{{ ansible_user_dir }}/orangead/tracker/.venv/bin/python"
    - "{{ ansible_user_dir }}/orangead/tracker/.venv/bin/python3"
  become: true
  ignore_errors: true # In case the file doesn't exist yet

# Use standardized Python version from group_vars
- name: Set required Python version from group_vars
  ansible.builtin.set_fact:
    tracker_python_version: "{{ python.version }}"

- name: Debug required Python version
  ansible.builtin.debug:
    msg: "Using standardized Python version: {{ tracker_python_version }}"

# Check if required Python version is available in pyenv
- name: Check if required Python version is available in pyenv
  ansible.builtin.shell: |
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    $PYENV_ROOT/bin/pyenv install --list | grep -E "^\s+{{ tracker_python_version }}$" || echo "not_found"
  register: python_version_available
  changed_when: false

- name: Find closest available Python version if exact version not found
  ansible.builtin.shell: |
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    # Extract major.minor version (e.g., 3.11 from 3.11.11)
    MAJOR_MINOR=$(echo {{ tracker_python_version }} | cut -d. -f1-2)
    # Find the latest available version for this major.minor
    $PYENV_ROOT/bin/pyenv install --list | grep -E "^\s+${MAJOR_MINOR}\.[0-9]+$" | tail -1 | xargs
  register: closest_python_version
  changed_when: false
  when: python_version_available.stdout == "not_found"

- name: Set final Python version to use
  ansible.builtin.set_fact:
    final_python_version: >
      {%- if python_version_available.stdout != "not_found" -%} {{ tracker_python_version | trim }}{%- else -%} {{ closest_python_version.stdout | trim }}{%- endif
      -%}

- name: Debug final Python version
  ansible.builtin.debug:
    msg: "Will use Python version: {{ final_python_version }}"

# We handle Python detection directly above, no need for include

# Setup Python environment
- name: Check Python version in virtual environment
  ansible.builtin.shell: |
    if [ -f {{ ansible_user_dir }}/orangead/tracker/.venv/bin/python ]; then
      VENV_VERSION=$({{ ansible_user_dir }}/orangead/tracker/.venv/bin/python --version | awk '{print $2}')
      REQUIRED_VERSION="{{ final_python_version }}"
      if [[ "$VENV_VERSION" == "$REQUIRED_VERSION"* ]]; then
        echo "0"
      else
        echo "1"
      fi
    else
      echo "1"
    fi
  register: python_version_check
  changed_when: false

- name: Remove existing virtual environment if Python version doesn't match required version
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/orangead/tracker/.venv"
    state: absent
  become: true
  when: python_version_check.stdout != "0"

- name: Install required Python version if not present
  ansible.builtin.shell: |
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    REQUIRED_VERSION="{{ final_python_version | trim }}"
    echo "Checking for Python version: '$REQUIRED_VERSION'"
    echo "Available versions:"
    $PYENV_ROOT/bin/pyenv versions --bare
    if ! $PYENV_ROOT/bin/pyenv versions --bare | grep -q "^$REQUIRED_VERSION$"; then
      echo "Installing Python $REQUIRED_VERSION"
      $PYENV_ROOT/bin/pyenv install "$REQUIRED_VERSION"
      echo "installed"
    else
      echo "already_present"
    fi
  register: python_install_result
  become: true
  become_user: "{{ ansible_user }}"
  changed_when: python_install_result.stdout_lines[-1] == "installed"

- name: Debug Python installation result
  ansible.builtin.debug:
    var: python_install_result

- name: Check if Python venv exists
  ansible.builtin.stat:
    path: "{{ ansible_user_dir }}/orangead/tracker/.venv"
  register: venv_exists

- name: Get Python executable path for required version
  ansible.builtin.shell: |
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    REQUIRED_VERSION="{{ final_python_version | trim }}"
    echo "$($PYENV_ROOT/bin/pyenv prefix "$REQUIRED_VERSION")/bin/python3"
  register: dynamic_python_executable
  changed_when: false

- name: Create Python virtual environment
  ansible.builtin.command: "{{ dynamic_python_executable.stdout }} -m venv {{ ansible_user_dir }}/orangead/tracker/.venv"
  args:
    creates: "{{ ansible_user_dir }}/orangead/tracker/.venv"
  become: true
  become_user: "{{ ansible_user }}"
  when: not venv_exists.stat.exists

- name: Upgrade pip in virtual environment
  ansible.builtin.shell: |
    cd {{ ansible_user_dir }}/orangead/tracker && \
    source .venv/bin/activate && \
    pip install --upgrade pip
  become: true
  become_user: "{{ ansible_user }}"
  when: not venv_exists.stat.exists
  changed_when: false

- name: Install uv package manager globally
  ansible.builtin.shell: |
    curl -LsSf https://astral.sh/uv/install.sh | sh
  become: true
  become_user: "{{ ansible_user }}"
  changed_when: false
  environment:
    PATH: "{{ ansible_user_dir }}/.local/bin:{{ ansible_env.PATH }}"

- name: Ensure uv is available in PATH
  ansible.builtin.shell: |
    echo 'export PATH="$HOME/.local/bin:$PATH"' >> {{ ansible_user_dir }}/.zshrc
    echo 'export PATH="$HOME/.local/bin:$PATH"' >> {{ ansible_user_dir }}/.bashrc
  become: true
  become_user: "{{ ansible_user }}"
  changed_when: false
  ignore_errors: true

# Install dependencies using uv and pyproject.toml
- name: Check if pyproject.toml exists
  ansible.builtin.stat:
    path: "{{ ansible_user_dir }}/orangead/tracker/pyproject.toml"
  register: pyproject_file

- name: Fail if pyproject.toml doesn't exist
  ansible.builtin.fail:
    msg: "pyproject.toml not found in {{ ansible_user_dir }}/orangead/tracker/"
  when: not pyproject_file.stat.exists

- name: Install NumPy first to ensure compatibility
  ansible.builtin.shell: |
    cd {{ ansible_user_dir }}/orangead/tracker && \
    source .venv/bin/activate && \
    {{ ansible_user_dir }}/.local/bin/uv pip install 'numpy<2.0.0'
  become: true
  become_user: "{{ ansible_user }}"
  changed_when: false
  environment:
    PATH: "{{ ansible_user_dir }}/.local/bin:{{ ansible_env.PATH }}"

# Try to install dependencies using the method that works
- name: Create requirements.txt from pyproject.toml dependencies
  ansible.builtin.copy:
    dest: "{{ ansible_user_dir }}/orangead/tracker/requirements.txt"
    content: |
      opencv-python
      ultralytics
      torch
      fastapi
      sse_starlette
      numpy
      pygments
      shapely
      duckdb
      boto3
      pyarrow
      pylint
      uvicorn
      lap>=0.5.12
      jupysql
      duckdb-engine
      rich
      pyusb
      ipykernel
      matplotlib
      notebook
      jupyter-client
      pyzmq
      bokeh
      jupyter_bokeh
      ipywidgets_bokeh
      pyobjc; platform_system == "Darwin"
      pyobjc-framework-Quartz; platform_system == "Darwin"
      pyobjc-framework-AVFoundation; platform_system == "Darwin"
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0644"
  become: true

- name: Try installing dependencies using uv with extracted requirements
  ansible.builtin.shell: |
    cd {{ ansible_user_dir }}/orangead/tracker && \
    source .venv/bin/activate && \
    {{ ansible_user_dir }}/.local/bin/uv pip install -r requirements.txt
  become: true
  become_user: "{{ ansible_user }}"
  register: uv_install_result
  environment:
    PATH: "{{ ansible_user_dir }}/.local/bin:{{ ansible_env.PATH }}"
  ignore_errors: true
  changed_when: false

- name: Fallback to pip install if uv fails
  ansible.builtin.shell: |
    cd {{ ansible_user_dir }}/orangead/tracker && \
    source .venv/bin/activate && \
    if [ -f requirements.txt ]; then
      pip install -r requirements.txt
    else
      echo "No requirements.txt found"
      exit 1
    fi
  become: true
  become_user: "{{ ansible_user }}"
  register: pip_install_result
  changed_when: false
  when: uv_install_result.rc != 0

# Copy and run dependency verification script
- name: Copy dependency verification script
  ansible.builtin.copy:
    src: verify_dependencies.py
    dest: "{{ ansible_user_dir }}/orangead/tracker/verify_dependencies.py"
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0755"
  become: true

- name: Verify dependencies installation
  ansible.builtin.command: "{{ ansible_user_dir }}/orangead/tracker/.venv/bin/python {{ ansible_user_dir }}/orangead/tracker/verify_dependencies.py"
  register: dependency_verification
  changed_when: false
  become: true
  become_user: "{{ ansible_user }}"
  ignore_errors: true

- name: Display dependency verification results
  ansible.builtin.debug:
    var: dependency_verification.stdout_lines
  when: dependency_verification.stdout_lines is defined

# Configure oaTracker
- name: Template config.yaml
  ansible.builtin.template:
    src: config.yaml.j2
    dest: "{{ ansible_user_dir }}/orangead/tracker/config.yaml"
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0644"
  become: true

# Setup launchd service
- name: Ensure LaunchAgents directory exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/Library/LaunchAgents"
    state: directory
    mode: "0755"
    owner: "{{ ansible_user }}"
    group: staff
  become: true

- name: Template launchd service file
  ansible.builtin.template:
    src: com.orangead.tracker.plist.j2
    dest: "{{ ansible_user_dir }}/Library/LaunchAgents/com.orangead.tracker.plist"
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0644"
  become: false
  register: launchd_service

- name: Unload existing launchd service if it exists
  ansible.builtin.command: launchctl unload {{ ansible_user_dir }}/Library/LaunchAgents/com.orangead.tracker.plist
  become: false
  failed_when: false
  changed_when: false
  when: launchd_service.changed

- name: Load launchd service
  ansible.builtin.command: launchctl load {{ ansible_user_dir }}/Library/LaunchAgents/com.orangead.tracker.plist
  become: false
  when: launchd_service.changed

- name: Start launchd service
  ansible.builtin.command: launchctl start com.orangead.tracker
  become: false
  when: launchd_service.changed

# Additional verification and troubleshooting tasks
# Detect server port from config if available
- name: Check if config.yaml exists and extract server port
  ansible.builtin.shell: |
    if [ -f {{ ansible_user_dir }}/orangead/tracker/config.yaml ]; then
      grep '^default_server_port:' {{ ansible_user_dir }}/orangead/tracker/config.yaml | awk '{print $2}' || echo "8080"
    else
      echo "8080"
    fi
  register: detected_server_port
  changed_when: false

- name: Wait for tracker service to start
  ansible.builtin.wait_for:
    port: "{{ detected_server_port.stdout.strip() }}"
    host: localhost
    delay: 5
    timeout: 30
  ignore_errors: true

- name: Check if tracker process is running
  ansible.builtin.shell: |
    launchctl list | grep com.orangead.tracker || echo "Service not found"
  register: tracker_status
  changed_when: false

- name: Display tracker service status
  ansible.builtin.debug:
    msg: "Tracker service status: {{ tracker_status.stdout }}"

- name: Check tracker logs for any errors
  ansible.builtin.shell: |
    if [ -f {{ ansible_user_dir }}/orangead/tracker/logs/tracker.err.log ]; then
      tail -10 {{ ansible_user_dir }}/orangead/tracker/logs/tracker.err.log
    else
      echo "No error log found"
    fi
  register: tracker_logs
  changed_when: false
  ignore_errors: true

- name: Display recent tracker errors (if any)
  ansible.builtin.debug:
    msg: "Recent tracker errors: {{ tracker_logs.stdout_lines }}"
  when: tracker_logs.stdout_lines is defined and tracker_logs.stdout_lines | length > 0
