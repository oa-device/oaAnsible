---
# Tasks for deploying OrbStack and ALPR service on macOS with CLI-focused approach

- name: Ensure temporary scripts directory exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/tmp"
    state: directory
    mode: "0755"

- name: Check CPU architecture
  ansible.builtin.command: uname -m
  register: macos_cpu_arch
  changed_when: false

- name: Display CPU architecture
  ansible.builtin.debug:
    msg: |
      CPU Architecture: {{ macos_cpu_arch.stdout }} ({{ 'Apple Silicon' if macos_cpu_arch.stdout == 'arm64' else 'Intel' }})
      Environment: Physical Hardware

- name: Check if Rosetta is installed (Apple Silicon only)
  ansible.builtin.command: /usr/bin/pgrep -x oahd
  register: macos_rosetta_check
  changed_when: false
  failed_when: false
  when: macos_cpu_arch.stdout == 'arm64'

- name: Install Rosetta (Apple Silicon only)
  ansible.builtin.command: /usr/sbin/softwareupdate --install-rosetta --agree-to-license
  register: macos_rosetta_install
  when:
    - macos_cpu_arch.stdout == 'arm64'
    - macos_rosetta_check.rc != 0
  become: true
  changed_when: false
  failed_when: false

- name: Display Rosetta installation status (Apple Silicon only)
  ansible.builtin.debug:
    msg: "Rosetta {{ 'installed successfully' if macos_rosetta_install.changed | default(false) else 'already installed' }}"
  when: macos_cpu_arch.stdout == 'arm64'

- name: Check if OrbStack CLI tools are available
  ansible.builtin.command: which orb
  register: macos_orbstack_cli_check
  changed_when: false
  failed_when: false

- name: Display OrbStack CLI availability
  ansible.builtin.debug:
    msg: "OrbStack CLI tools {{ 'are available' if macos_orbstack_cli_check.rc == 0 else 'not found - will be installed via homebrew' }}"

- name: Check if Docker CLI is available
  ansible.builtin.command: which docker
  register: macos_docker_cli_check
  changed_when: false
  failed_when: false

- name: Display Docker CLI availability
  ansible.builtin.debug:
    msg: "Docker CLI {{ 'is available' if macos_docker_cli_check.rc == 0 else 'not found' }}"

- name: Check if orbctl is available
  ansible.builtin.command: which orbctl
  register: macos_orbctl_cli_check
  changed_when: false
  failed_when: false

- name: Display orbctl availability
  ansible.builtin.debug:
    msg: "orbctl CLI {{ 'is available' if macos_orbctl_cli_check.rc == 0 else 'not found' }}"

- name: Initial Docker daemon connectivity check
  ansible.builtin.command: docker info
  register: macos_docker_initial_check
  changed_when: false
  failed_when: false
  environment:
    PATH: "/usr/local/bin:/opt/homebrew/bin:{{ ansible_env.PATH }}"

- name: Check if OrbStack helper tools are installed
  ansible.builtin.stat:
    path: /usr/local/bin/orbctl
  register: macos_orbstack_helper_check
  changed_when: false
  failed_when: false

- name: Install OrbStack helper tools if needed
  ansible.builtin.shell: |
    # Create helper installation script
    /Applications/OrbStack.app/Contents/MacOS/OrbStack --install-cli-tools
  become: true
  register: macos_orbstack_helper_install
  when: not macos_orbstack_helper_check.stat.exists
  changed_when: false
  failed_when: false

- name: Ensure OrbStack is started
  ansible.builtin.shell: |
    # Start OrbStack app if not running
    if ! pgrep -f "OrbStack" > /dev/null; then
      open -g /Applications/OrbStack.app
      sleep 10
    fi
    # Use orb start command as backup
    /Applications/OrbStack.app/Contents/MacOS/bin/orb start 2>/dev/null || true
  register: macos_orbstack_start
  when: macos_docker_initial_check.rc != 0
  changed_when: false
  failed_when: false

- name: Display OrbStack start status
  ansible.builtin.debug:
    msg: "OrbStack {{ 'started successfully' if macos_orbstack_start.rc == 0 else 'start failed or was already running' }}"
  when: macos_docker_initial_check.rc != 0
  changed_when: false
  failed_when: false

- name: Wait for OrbStack daemon to be ready
  ansible.builtin.command: docker info
  register: macos_docker_daemon_check
  until: macos_docker_daemon_check.rc == 0
  retries: "{{ macos_orbstack_startup_timeout // macos_orbstack_check_interval }}"
  delay: "{{ macos_orbstack_check_interval }}"
  changed_when: false
  failed_when: false
  environment:
    PATH: "/usr/local/bin:/opt/homebrew/bin:{{ ansible_env.PATH }}"

- name: Verify Docker daemon connectivity
  ansible.builtin.fail:
    msg: "Docker daemon is not accessible after waiting {{ macos_orbstack_startup_timeout }} seconds. Please ensure OrbStack is installed and running."
  when: macos_docker_daemon_check.rc != 0

- name: Get Docker system info
  ansible.builtin.command: docker system info --format json
  register: macos_docker_info
  changed_when: false
  failed_when: false
  environment:
    PATH: "/usr/local/bin:/opt/homebrew/bin:{{ ansible_env.PATH }}"

- name: Display Docker system status
  ansible.builtin.debug:
    msg: |
      Docker System Status:
      Docker daemon is accessible
      {% if macos_docker_info.rc == 0 %}{% set docker_info = macos_docker_info.stdout | from_json %}
      Server Version: {{ docker_info.ServerVersion | default('Unknown') }}
      Container Runtime: {{ docker_info.DefaultRuntime | default('Unknown') }}
      Operating System: {{ docker_info.OperatingSystem | default('Unknown') }}
      {% endif %}
  changed_when: false
  failed_when: false

- name: Test Docker functionality with ALPR image
  ansible.builtin.shell: |
    # Test Docker with ALPR image inspection instead of hello-world
    docker image inspect {{ macos_alpr_image_name }} >/dev/null 2>&1
  register: macos_docker_test
  environment:
    PATH: "/usr/local/bin:/opt/homebrew/bin:{{ ansible_env.PATH }}"
  changed_when: false
  failed_when: false

- name: Display Docker test results
  ansible.builtin.debug:
    msg: "Docker ALPR image test {{ 'passed' if macos_docker_test.rc == 0 else 'failed - will pull image later' }}"
  changed_when: false
  failed_when: false

- name: Check for existing ALPR Docker image
  ansible.builtin.shell: |
    set -o pipefail
    docker images | grep -q "{{ macos_alpr_image_name | regex_escape }}" || echo "image_not_found"
  register: macos_alpr_image_check
  changed_when: false
  failed_when: false
  environment:
    PATH: "/usr/local/bin:/opt/homebrew/bin:{{ ansible_env.PATH }}"

- name: Generate ALPR image update script
  ansible.builtin.template:
    src: scripts/alpr_image_update.sh.j2
    dest: "{{ ansible_user_dir }}/tmp/alpr_image_update.sh"
    mode: "0755"

- name: Check current ALPR image version and update if needed
  ansible.builtin.command: "{{ ansible_user_dir }}/tmp/alpr_image_update.sh"
  register: macos_alpr_image_update
  environment:
    PATH: "/usr/local/bin:/opt/homebrew/bin:{{ ansible_env.PATH }}"
  changed_when: false
  failed_when: false

- name: Check if image was updated
  ansible.builtin.slurp:
    src: /tmp/alpr_image_updated
  register: alpr_image_status_file
  failed_when: false

- name: Set image update fact
  ansible.builtin.set_fact:
    alpr_image_was_updated: "{{ (alpr_image_status_file.content | b64decode | trim) == 'UPDATED' }}"
  when:
    - alpr_image_status_file is defined
    - alpr_image_status_file.content is defined

- name: Display image update status
  ansible.builtin.debug:
    msg: |
      ALPR Image Update Status:
      {{ macos_alpr_image_update.stdout | default('No output') }}

      Image was updated: {{ alpr_image_was_updated | default(false) }}
      {% if macos_alpr_image_update.stderr %}

      Update Warnings/Errors:
      {{ macos_alpr_image_update.stderr }}
      {% endif %}

- name: Display image pull status
  ansible.builtin.debug:
    msg: "ALPR Docker image {{ 'pulled successfully' if macos_alpr_image_pull.changed | default(false) else 'already present' }}"

# Configure firewall rules for Plate Recognizer API access
- name: Configure firewall for Plate Recognizer API access
  block:
    - name: Allow outbound connections to api.platerecognizer.com (HTTP)
      ansible.builtin.command: >
        /usr/sbin/ipfw add allow tcp from any to {{ item }} 80
      become: true
      register: platerecognizer_http_firewall
      changed_when: platerecognizer_http_firewall.rc == 0
      failed_when: false # Don't fail if ipfw is not available or other benign errors
      loop: "{{ macos_alpr_api_platerecognizer_ips }}"
      when: ansible_distribution_version is version('10.15', '<=')

    - name: Allow outbound connections to api.platerecognizer.com (HTTPS)
      ansible.builtin.command: >
        /usr/sbin/ipfw add allow tcp from any to {{ item }} 443
      become: true
      register: platerecognizer_https_firewall
      changed_when: platerecognizer_https_firewall.rc == 0
      failed_when: false # Don't fail if ipfw is not available or other benign errors
      loop: "{{ macos_alpr_api_platerecognizer_ips }}"
      when: ansible_distribution_version is version('10.15', '<=')

    - name: Configure PF firewall rules for Plate Recognizer API (newer macOS)
      when: ansible_distribution_version is version('11.0', '>=')

      block:
        - name: Create temporary PF rule file for Plate Recognizer
          ansible.builtin.copy:
            dest: /tmp/platerecognizer_pf.conf
            content: |
              # Plate Recognizer API access rules
              {% for ip in macos_alpr_api_platerecognizer_ips %}
              pass out proto tcp from any to {{ ip }} port {80, 443}
              {% endfor %}
            mode: "0644"
          become: true
          register: pf_rule_file

        - name: Load PF rules for Plate Recognizer API
          ansible.builtin.command: pfctl -f /tmp/platerecognizer_pf.conf
          become: true
          register: pf_load_result
          changed_when: pf_load_result.rc == 0
          failed_when: false # Don't fail if PF is not enabled

        - name: Clean up temporary PF rule file
          ansible.builtin.file:
            path: /tmp/platerecognizer_pf.conf
            state: absent
          become: true
    - name: Allow Docker binary through Application Firewall
      ansible.builtin.command: /usr/libexec/ApplicationFirewall/socketfilterfw --add /usr/local/bin/docker
      become: true
      register: docker_firewall_result
      changed_when: "'already has a rule' not in (docker_firewall_result.stdout | default('') + docker_firewall_result.stderr | default(''))"
      failed_when: false

    - name: Unblock Docker binary in Application Firewall
      ansible.builtin.command: /usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp /usr/local/bin/docker
      become: true
      register: docker_unblock_result
      changed_when: docker_unblock_result.rc == 0 and "not blocked" not in (docker_unblock_result.stdout | default('') + docker_unblock_result.stderr |
        default(''))
      failed_when: false

    - name: Display firewall configuration status
      ansible.builtin.debug:
        msg: |
          Firewall Configuration:
          - Plate Recognizer API IPs: {{ macos_alpr_api_platerecognizer_ips | join(', ') }}
          - HTTP/HTTPS access configured
          - Docker binary allowed through Application Firewall
- name: Ensure LaunchAgents directory exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/Library/LaunchAgents"
    state: directory
    mode: "0755"
    owner: "{{ ansible_user }}"
    group: staff
  become: true

- name: Ensure ALPR directories exist with proper structure
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
    owner: "{{ ansible_user }}"
    group: staff
  become: true
  loop:
    - "{{ ansible_user_dir }}/orangead/alpr"
    - "{{ ansible_user_dir }}/orangead/alpr/logs"
    - "{{ ansible_user_dir }}/orangead/alpr/config"
  changed_when: false
  failed_when: false

- name: Create ALPR deployment state tracking
  ansible.builtin.copy:
    content: |
      # ALPR Deployment State Tracking
      DEPLOYMENT_DATE={{ ansible_date_time.iso8601 }}
      DEPLOYMENT_USER={{ ansible_user }}
      ALPR_IMAGE={{ macos_alpr_image_name }}
      ALPR_VERSION={{ ansible_date_time.epoch }}
      CPU_ARCH={{ macos_cpu_arch.stdout | default('unknown') }}
      ANSIBLE_VERSION={{ ansible_version.full }}
    dest: "{{ ansible_user_dir }}/orangead/alpr/config/deployment.env"
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0644"
  become: true

- name: Create ALPR Docker volume for license data
  community.docker.docker_volume:
    name: "{{ macos_alpr_license_volume_name }}"
    state: present
  environment:
    PATH: "/usr/local/bin:/opt/homebrew/bin:{{ ansible_env.PATH }}"
  changed_when: false
  failed_when: false

- name: Generate ALPR cleanup script
  ansible.builtin.template:
    src: scripts/alpr_cleanup.sh.j2
    dest: "{{ ansible_user_dir }}/tmp/alpr_cleanup.sh"
    mode: "0755"

- name: Complete ALPR stack cleanup for idempotent deployment with bulletproof license uninstall
  ansible.builtin.command: "{{ ansible_user_dir }}/tmp/alpr_cleanup.sh"
  register: macos_alpr_comprehensive_cleanup
  become: false
  changed_when: true
  failed_when: false
  environment:
    PATH: "/usr/local/bin:/opt/homebrew/bin:{{ ansible_env.PATH }}"

- name: Display cleanup results
  ansible.builtin.debug:
    msg: |
      ALPR Cleanup Results:
      {{ macos_alpr_comprehensive_cleanup.stdout | default('No output') }}

      {% if macos_alpr_comprehensive_cleanup.stderr %}
      Cleanup Warnings/Errors:
      {{ macos_alpr_comprehensive_cleanup.stderr }}
      {% endif %}

- name: Create ALPR service LaunchAgent plist
  ansible.builtin.template:
    src: com.orangead.alpr.plist.j2
    dest: "{{ ansible_user_dir }}/Library/LaunchAgents/{{ macos_alpr_service_plist }}.plist"
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0644"
  become: false
  notify: Reload ALPR service
  register: macos_alpr_plist_created
  changed_when: false
  failed_when: false

- name: Generate ALPR preflight start script
  ansible.builtin.template:
    src: scripts/alpr_preflight_start.sh.j2
    dest: "{{ ansible_user_dir }}/tmp/alpr_preflight_start.sh"
    mode: "0755"

- name: Start ALPR service with pre-flight checks
  ansible.builtin.command: "{{ ansible_user_dir }}/tmp/alpr_preflight_start.sh"
  register: macos_alpr_service_start
  become: false
  changed_when: true
  failed_when: false
  environment:
    PATH: "/usr/local/bin:/opt/homebrew/bin:{{ ansible_env.PATH }}"

- name: Wait for ALPR service to start
  ansible.builtin.wait_for:
    port: "{{ macos_alpr_host_port }}"
    host: localhost
    delay: 10
    timeout: 60
  register: macos_alpr_service_wait
  failed_when: false

- name: Check ALPR service status via launchctl
  ansible.builtin.shell: |
    set -o pipefail
    launchctl list | grep {{ macos_alpr_service_plist }} || echo "Service not found"
  register: macos_alpr_service_status
  changed_when: false

- name: Check ALPR container status via Docker CLI
  ansible.builtin.shell: |
    set -o pipefail
    # Check if container is running
    if docker ps --filter "name={{ macos_alpr_container_name }}" --format "{% raw %}{{.Names}}{% endraw %}" | grep -q "{{ macos_alpr_container_name }}"; then
      echo "Running: $(docker ps --filter 'name={{ macos_alpr_container_name }}' --format '{% raw %}{{.Status}}{% endraw %}')"
    else
      echo "Not running"
      # Check logs for troubleshooting
      echo "Recent logs:"
      docker logs {{ macos_alpr_container_name }} 2>/dev/null | tail -5 || echo "No logs available"
    fi
  register: macos_alpr_container_status
  changed_when: false
  failed_when: false
  environment:
    PATH: "/usr/local/bin:/opt/homebrew/bin:{{ ansible_env.PATH }}"

- name: Test ALPR service basic connectivity
  ansible.builtin.uri:
    url: "http://localhost:{{ macos_alpr_host_port }}/v1/plate-reader/"
    method: GET
    status_code: [200, 405] # 405 Method Not Allowed is expected for GET on this endpoint
    timeout: 10
  register: macos_alpr_connectivity_test
  failed_when: false
  when: not macos_alpr_service_wait.failed | default(false)

- name: Final ALPR service health check
  ansible.builtin.shell: |
    set -o pipefail
    # Wait a bit more for container to stabilize
    sleep 10
    # Check final status
    echo "=== FINAL HEALTH CHECK ==="
    echo "LaunchAgent:"
    launchctl list | grep {{ macos_alpr_service_plist }} || echo "  LaunchAgent not found"
    echo "Docker Container:"
    docker ps --filter "name={{ macos_alpr_container_name }}" --format "  {% raw %}{{.Names}}: {{.Status}}{% endraw %}" || echo "  Container not found"
    echo "Port Check:"
    if nc -z localhost {{ macos_alpr_host_port }} 2>/dev/null; then
      echo "  Port {{ macos_alpr_host_port }}: OPEN"
    else
      echo "  Port {{ macos_alpr_host_port }}: CLOSED"
    fi
    echo "Recent Container Logs:"
    docker logs {{ macos_alpr_container_name }} 2>/dev/null | tail -3 || echo "  No logs available"
  register: macos_alpr_final_check
  changed_when: false
  failed_when: false
  environment:
    PATH: "/usr/local/bin:/opt/homebrew/bin:{{ ansible_env.PATH }}"

- name: Display ALPR service deployment status (Physical hardware)
  ansible.builtin.debug:
    msg: |
      === ALPR Service Deployment Status ===
      LaunchAgent Status: {{ 'Running' if macos_alpr_service_status.stdout and macos_alpr_service_plist in macos_alpr_service_status.stdout else 'Not running' }}
      Docker Container: {{ macos_alpr_container_status.stdout_lines[0] if macos_alpr_container_status.stdout_lines | length > 0 else 'Not found' }}
      Port {{ macos_alpr_host_port }}: {{ 'Accessible' if not macos_alpr_service_wait.failed | default(false) else 'Not accessible' }}
      {% if macos_alpr_connectivity_test.status is defined %}
      HTTP Test: {{ 'Success' if macos_alpr_connectivity_test.status in [200, 405] else 'Failed' }}
      {% endif %}
      Container: {{ macos_alpr_container_name }}
      Image: {{ macos_alpr_image_name }}

      Final Health Check:
      {{ macos_alpr_final_check.stdout | default('Health check failed') }}

- name: Final ALPR deployment verification and summary
  ansible.builtin.shell: |
    set -o pipefail

    echo "=== FINAL ALPR DEPLOYMENT VERIFICATION ==="

    # Check deployment state
    if [ -f "{{ ansible_user_dir }}/orangead/alpr/config/deployment.env" ]; then
      echo "Deployment tracking file exists"
      echo "Current deployment info:"
      cat "{{ ansible_user_dir }}/orangead/alpr/config/deployment.env"
    else
      echo "WARNING: Deployment tracking file missing"
    fi

    echo ""
    echo "=== SERVICE STATUS SUMMARY ==="

    # LaunchAgent status
    LAUNCH_STATUS=$(launchctl list | grep {{ macos_alpr_service_plist }} || echo "Not running")
    echo "LaunchAgent: $LAUNCH_STATUS"

    # Container status
    CONTAINER_STATUS=$(docker ps --filter "name={{ macos_alpr_container_name }}" --format {% raw %}"{{.Names}}: {{.Status}}"{% endraw %} || echo "Not running")
    echo "Container: $CONTAINER_STATUS"

    # Port status
    if nc -z localhost {{ macos_alpr_host_port }} 2>/dev/null; then
      echo "Port {{ macos_alpr_host_port }}: ACCESSIBLE"
    else
      echo "Port {{ macos_alpr_host_port }}: NOT ACCESSIBLE"
    fi

    # Image status
    IMAGE_INFO=$(docker image inspect {{ macos_alpr_image_name }} --format {% raw %}"ID: {{.Id}} Created: {{.Created}}"{% endraw %} 2>/dev/null || echo "Image not found")
    echo "Image: $IMAGE_INFO"

    echo ""
    echo "=== IDEMPOTENCY VERIFICATION ==="
    echo "This deployment can be run multiple times safely"
    echo "- Containers will be properly cleaned up and recreated"
    echo "- Images will be updated if new versions are available"
    echo "- Services will be restarted with latest configuration"

    echo ""
    echo "=== DEPLOYMENT COMPLETE ==="
  register: alpr_final_verification
  changed_when: false
  failed_when: false
  environment:
    PATH: "/usr/local/bin:/opt/homebrew/bin:{{ ansible_env.PATH }}"

- name: Display final deployment summary
  ansible.builtin.debug:
    msg: |
      === ALPR DEPLOYMENT SUMMARY ===

      {{ alpr_final_verification.stdout | default('Summary not available') }}

      === MANAGEMENT COMMANDS ===

      Service Management:
      - Start:    launchctl load -w ~/Library/LaunchAgents/{{ macos_alpr_service_plist }}.plist
      - Stop:     launchctl unload ~/Library/LaunchAgents/{{ macos_alpr_service_plist }}.plist
      - Status:   launchctl list | grep {{ macos_alpr_service_plist }}

      Docker Management:
      - Container Status:  docker ps --filter "name={{ macos_alpr_container_name }}"
      - Container Logs:    docker logs {{ macos_alpr_container_name }}
      - Stop Container:    docker stop {{ macos_alpr_container_name }}
      - Remove Container:  docker rm {{ macos_alpr_container_name }}

      Re-deployment:
      - Run: ./scripts/deploy-alpr
      - The deployment is fully idempotent and safe to run multiple times

      Testing:
      curl -F "upload=@/path/to/image.jpg" \
           -F regions='ca' \
           -F mmc=true \
           -F 'config={"mode":"fast", "detection_mode":"vehicle"}' \
           http://localhost:{{ macos_alpr_host_port }}/v1/plate-reader/

# Enhanced ALPR tasks for Python monitor deployment (conditionally executed)
- name: Enhanced ALPR Service Deployment with Python Monitor Integration
  when: oa_environment.deploy_alpr_service | default(false) | bool
  tags: ["alpr-enhanced", "monitor"]
  block:
    - name: Ensure ALPR application directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
        owner: "{{ ansible_user }}"
        group: staff
      loop:
        - "{{ ansible_user_dir }}/orangead/alpr"
        - "{{ ansible_user_dir }}/orangead/alpr/detections"
        - "{{ ansible_user_dir }}/orangead/alpr/logs"
        - "{{ ansible_user_dir }}/orangead/alpr/config"
      become: true

    - name: Create ALPR Python virtual environment
      ansible.builtin.shell: |
        export PATH="{{ ansible_user_dir }}/.pyenv/bin:$PATH"
        eval "$(pyenv init -)"
        pyenv virtualenv {{ alpr_python_version }} alpr
      args:
        creates: "{{ alpr_python_path }}"
      become: false
      environment:
        PATH: "{{ ansible_user_dir }}/.pyenv/bin:{{ homebrew_prefix }}/bin:/usr/local/bin:{{ ansible_env.PATH }}"

    - name: Copy ALPR source files from role
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ ansible_user_dir }}/orangead/alpr/{{ item.dest }}"
        owner: "{{ ansible_user }}"
        group: staff
        mode: "0644"
      loop:
        - { src: "detect.py", dest: "detect.py" }
        - { src: "requirements.txt", dest: "requirements.txt" }
      become: true

    - name: Install ALPR Python dependencies
      ansible.builtin.shell: |
        export PATH="{{ ansible_user_dir }}/.pyenv/bin:$PATH"
        eval "$(pyenv init -)"
        pyenv activate alpr
        {{ homebrew_prefix }}/bin/uv pip install -r {{ ansible_user_dir }}/orangead/alpr/requirements.txt
      become: false
      environment:
        PATH: "{{ ansible_user_dir }}/.pyenv/bin:{{ homebrew_prefix }}/bin:/usr/local/bin:{{ ansible_env.PATH }}"
      register: alpr_deps_install
      changed_when: "'Successfully installed' in alpr_deps_install.stdout"

    - name: Create ALPR health check script
      ansible.builtin.template:
        src: alpr_health_check.sh.j2
        dest: "{{ ansible_user_dir }}/orangead/alpr/health_check.sh"
        owner: "{{ ansible_user }}"
        group: staff
        mode: "0755"
      become: true

    - name: Create ALPR log rotation configuration
      ansible.builtin.copy:
        content: |
          {{ ansible_user_dir }}/orangead/alpr/logs/*.log {
              daily
              rotate 7
              compress
              delaycompress
              missingok
              notifempty
              create 644 {{ ansible_user }} staff
          }
        dest: "/usr/local/etc/logrotate.d/alpr"
        mode: "0644"
      become: true

    - name: Create ALPR environment configuration
      ansible.builtin.template:
        src: alpr.env.j2
        dest: "{{ ansible_user_dir }}/orangead/alpr/.env"
        owner: "{{ ansible_user }}"
        group: staff
        mode: "0644"
      become: true

    - name: Create ALPR monitor LaunchAgent plist
      ansible.builtin.template:
        src: com.orangead.alpr-monitor.plist.j2
        dest: "{{ ansible_user_dir }}/Library/LaunchAgents/com.orangead.alpr-monitor.plist"
        owner: "{{ ansible_user }}"
        group: staff
        mode: "0644"
      become: false
      notify: Reload ALPR monitor service

    - name: Wait for ALPR Docker service to be ready
      ansible.builtin.wait_for:
        port: "{{ macos_alpr_host_port }}"
        host: localhost
        delay: 5
        timeout: 30
      when: not is_vm_environment | default(false)

    - name: Create ALPR management script
      ansible.builtin.template:
        src: alpr_manager.sh.j2
        dest: "{{ ansible_user_dir }}/orangead/alpr/alpr_manager.sh"
        owner: "{{ ansible_user }}"
        group: staff
        mode: "0755"
      become: true

    - name: Create ALPR monitoring cron job
      ansible.builtin.cron:
        name: "ALPR health check"
        job: "{{ ansible_user_dir }}/orangead/alpr/health_check.sh >> {{ ansible_user_dir }}/orangead/alpr/logs/health_check.log 2>&1"
        minute: "*/5"
        user: "{{ ansible_user }}"
        state: present
      become: true
      changed_when: false

    - name: Load ALPR monitor service
      ansible.builtin.shell: |
        launchctl unload {{ ansible_user_dir }}/Library/LaunchAgents/com.orangead.alpr-monitor.plist 2>/dev/null || true
        sleep 2
        launchctl load -w {{ ansible_user_dir }}/Library/LaunchAgents/com.orangead.alpr-monitor.plist
      become: false
      changed_when: false
      when: not is_vm_environment | default(false)

    - name: Verify ALPR services status
      ansible.builtin.shell: |
        set -o pipefail
        echo "=== ALPR Services Status ==="
        echo "Docker Service:"
        launchctl list | grep com.orangead.alpr || echo "  Not running"
        echo "Monitor Service:"
        launchctl list | grep com.orangead.alpr-monitor || echo "  Not running"
        echo "Docker Container:"
        docker ps --filter "name={{ macos_alpr_container_name }}" --format "  {.Names}: {.Status}" || echo "  Not found"
        echo "Port Check:"
        if nc -z localhost {{ macos_alpr_host_port }} 2>/dev/null; then
          echo "  Port {{ macos_alpr_host_port }}: OPEN"
        else
          echo "  Port {{ macos_alpr_host_port }}: CLOSED"
        fi
        echo "\n=== Service Verification Complete ==="
      register: alpr_services_status
      changed_when: false
      failed_when: false

    - name: Display ALPR deployment status
      ansible.builtin.debug:
        msg: |
          === ALPR Stack Deployment Complete ===

          Services Deployed:
          - PlateRecognizer Docker Service ({{ macos_alpr_image_name }})
          - ALPR Python Monitor ({{ ansible_user_dir }}/orangead/alpr/detect.py)
          - Health Monitoring (every 5 minutes)
          - Log Rotation and Management
          - Comprehensive Management Tools

          Configuration:
          - Camera ID: {{ alpr_camera_id }}
          - Detection Directory: {{ ansible_user_dir }}/orangead/alpr/detections
          - Service Port: {{ macos_alpr_host_port }}
          - Region: {{ alpr_region }}
          - Python Environment: {{ alpr_python_version }}

          Status:
          {{ alpr_services_status.stdout | default('Status check skipped') }}

          Enhanced Management:
          - ALPR Manager:     {{ ansible_user_dir }}/orangead/alpr/alpr_manager.sh
          - Health Check:     {{ ansible_user_dir }}/orangead/alpr/health_check.sh
          - Quick Commands:
            * Start Stack:    ~/orangead/alpr/alpr_manager.sh start
            * Stop Stack:     ~/orangead/alpr/alpr_manager.sh stop
            * Check Status:   ~/orangead/alpr/alpr_manager.sh status
            * View Health:    ~/orangead/alpr/alpr_manager.sh health
            * Show Stats:     ~/orangead/alpr/alpr_manager.sh stats
            * Cleanup Files:  ~/orangead/alpr/alpr_manager.sh cleanup

          Monitoring & Logs:
          - Health Check Log:  ~/orangead/alpr/logs/health_check.log
          - Docker Logs:       ~/orangead/alpr/logs/alpr.*.log
          - Monitor Logs:      ~/orangead/alpr/logs/monitor.*.log
          - Auto Log Rotation: Enabled (7 day retention)
          - Auto Cleanup:      Old detections removed after 7 days

          Phase 9 ALPR Integration: COMPLETE

# Clean up temporary script files
- name: Clean up temporary ALPR scripts
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ ansible_user_dir }}/tmp/alpr_cleanup.sh"
    - "{{ ansible_user_dir }}/tmp/alpr_preflight_start.sh"
    - "{{ ansible_user_dir }}/tmp/alpr_image_update.sh"
  failed_when: false
  tags: ["cleanup"]
