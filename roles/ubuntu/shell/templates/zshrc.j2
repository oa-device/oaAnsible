# Enhanced Zsh Configuration for {{ ansible_user }}@{{ inventory_hostname }}
# Generated by Ansible - Safe to source multiple times

# Path to your oh-my-zsh installation
export ZSH="$HOME/.oh-my-zsh"

# Use simple, reliable theme - but we'll override the prompt
ZSH_THEME="robbyrussell"

# Useful plugins that are stable
plugins=(
  git
  sudo
  history
  command-not-found
  colored-man-pages
  extract
)

# Add external plugins if they exist
if [ -d "$HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions" ]; then
    plugins+=(zsh-autosuggestions)
fi
if [ -d "$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting" ]; then
    plugins+=(zsh-syntax-highlighting)
fi

# Basic Oh My Zsh settings for stability
ZSH_DISABLE_COMPFIX=true
DISABLE_UPDATE_PROMPT=true
DISABLE_AUTO_UPDATE=true

# Source Oh My Zsh only if it exists
if [ -d "$ZSH" ]; then
    source $ZSH/oh-my-zsh.sh
fi

# Override with traditional prompt format: user@hostname:directory$
# This gives clear information like kai@kammpus-rig:~$
PROMPT='%F{green}%n@%m%f:%F{blue}%~%f$ '

# Keep git info on the right side if in a git repo
if command -v git > /dev/null 2>&1; then
    RPROMPT='$(git_prompt_info)'
fi

# Set EDITOR
export EDITOR='nano'

# Nano configuration for better editing experience
export NANO_OPTS="--mouse --linenumbers --autoindent --tabstospaces --tabsize=4 --softwrap --atblanks"

# Set language
export LANG=en_US.UTF-8

# Useful key bindings (safe and stable)
bindkey "^[[H" beginning-of-line      # Home key
bindkey "^[[F" end-of-line            # End key
bindkey "^[[3~" delete-char           # Delete key
bindkey "^[[1;5C" forward-word        # Ctrl+Right arrow
bindkey "^[[1;5D" backward-word       # Ctrl+Left arrow
bindkey "^R" history-incremental-search-backward  # Ctrl+R for history search

# Directory listing aliases using lsd
alias ls='lsd --group-dirs first'
alias l='ls -lah'
alias la='ls -A'
alias ll='ls -alhF'
alias lsa='ls -lah'
alias lt='lsd --tree'

# Additional useful aliases
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias grep='grep --color=auto'
alias df='df -h'
alias du='du -h'
alias free='free -h'
alias ps='ps aux'

# Git aliases
alias g='git'
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git log --oneline'
alias gd='git diff'

# Nano editing aliases
alias edit='nano $NANO_OPTS'
alias n='nano $NANO_OPTS'
alias nano='nano $NANO_OPTS'

# System aliases - commented out to avoid confusion
# alias update='sudo apt update && sudo apt upgrade'
# alias install='sudo apt install'
# alias search='apt search'

# Network aliases
alias ping='ping -c 5'
alias ports='netstat -tulanp'

# Tailscale aliases - commented out to avoid confusion
# if command -v tailscale > /dev/null; then
#     alias ts='tailscale'
#     alias tss='tailscale status'
#     alias tsf='tailscale funnel'
# fi

# Add common paths to PATH if they exist
if [ -d "/usr/local/bin" ]; then
    export PATH="/usr/local/bin:$PATH"
fi

if [ -d "$HOME/.local/bin" ]; then
    export PATH="$HOME/.local/bin:$PATH"
fi

if [ -d "$HOME/bin" ]; then
    export PATH="$HOME/bin:$PATH"
fi

# Function for quick directory creation and navigation
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Function to extract various archive formats
extract() {
    if [ -f "$1" ] ; then
        case $1 in
            *.tar.bz2)   tar xjf "$1"     ;;
            *.tar.gz)    tar xzf "$1"     ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar e "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar xf "$1"      ;;
            *.tbz2)      tar xjf "$1"     ;;
            *.tgz)       tar xzf "$1"     ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z x "$1"        ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# IMPORTANT: Preserve bash compatibility for scripts
# This ensures that bash scripts (like camera-proxy/deploy.sh) continue to work
setopt BASH_REMATCH
setopt KSH_ARRAYS
setopt SH_WORD_SPLIT