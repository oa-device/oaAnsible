#!/bin/bash
# OrangeAd Ubuntu System Health Check Script
# Generated by Ansible - Do not edit manually

set -euo pipefail

TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
HOSTNAME="{{ ansible_hostname }}"
LOG_FILE="/home/{{ ansible_user }}/orangead/monitoring/logs/health_check.log"

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

log_message() {
    echo "[$TIMESTAMP] $1" | tee -a "$LOG_FILE"
}

check_system_load() {
    local load_avg=$(uptime | awk '{print $10}' | cut -d',' -f1)
    local cpu_count=$(nproc)
    local load_threshold=$(echo "$cpu_count * 2" | bc -l)
    
    if (( $(echo "$load_avg > $load_threshold" | bc -l) )); then
        log_message "WARNING: High system load: $load_avg (threshold: $load_threshold)"
        return 1
    else
        log_message "OK: System load normal: $load_avg"
        return 0
    fi
}

check_memory_usage() {
    local mem_info=$(free | grep Mem)
    local total=$(echo $mem_info | awk '{print $2}')
    local used=$(echo $mem_info | awk '{print $3}')
    local usage_percent=$(echo "scale=2; $used * 100 / $total" | bc)
    
    if (( $(echo "$usage_percent > {{ memory_monitoring.threshold_critical }}" | bc -l) )); then
        log_message "CRITICAL: Memory usage critical: ${usage_percent}%"
        return 2
    elif (( $(echo "$usage_percent > {{ memory_monitoring.threshold_warning }}" | bc -l) )); then
        log_message "WARNING: Memory usage high: ${usage_percent}%"
        return 1
    else
        log_message "OK: Memory usage normal: ${usage_percent}%"
        return 0
    fi
}

check_disk_space() {
    local warning_count=0
    local critical_count=0
    
{% for path in disk_monitoring.check_paths %}
    if [[ -d "{{ path }}" ]]; then
        local usage=$(df "{{ path }}" | tail -n1 | awk '{print $5}' | sed 's/%//')
        if (( usage > {{ disk_monitoring.threshold_critical }} )); then
            log_message "CRITICAL: Disk space critical on {{ path }}: ${usage}%"
            ((critical_count++))
        elif (( usage > {{ disk_monitoring.threshold_warning }} )); then
            log_message "WARNING: Disk space high on {{ path }}: ${usage}%"
            ((warning_count++))
        else
            log_message "OK: Disk space normal on {{ path }}: ${usage}%"
        fi
    fi
{% endfor %}
    
    if (( critical_count > 0 )); then
        return 2
    elif (( warning_count > 0 )); then
        return 1
    else
        return 0
    fi
}

check_network_connectivity() {
{% for host in network_monitoring.check_connectivity %}
    if ping -c 1 -W {{ host.timeout }} {{ host.host }} > /dev/null 2>&1; then
        log_message "OK: Network connectivity to {{ host.host }} working"
    else
        log_message "WARNING: Network connectivity to {{ host.host }} failed"
        return 1
    fi
{% endfor %}
    return 0
}

check_critical_services() {
    local failed_services=0
    
{% for service in service_monitoring.services %}
    if systemctl is-active --quiet {{ service.name }}; then
        log_message "OK: Service {{ service.name }} is running"
    else
        log_message "{{ 'CRITICAL' if service.critical else 'WARNING' }}: Service {{ service.name }} is not running"
        {% if service.critical %}
        ((failed_services++))
        {% endif %}
    fi
{% endfor %}
    
    if (( failed_services > 0 )); then
        return 2
    else
        return 0
    fi
}

main() {
    log_message "=== OrangeAd System Health Check Started on $HOSTNAME ==="
    
    local overall_status=0
    
    # Run all checks
{% if memory_monitoring.enabled %}
    check_memory_usage || overall_status=$?
{% endif %}

{% if disk_monitoring.enabled %}
    check_disk_space || overall_status=$?
{% endif %}

{% if network_monitoring.enabled %}
    check_network_connectivity || overall_status=$?
{% endif %}

{% if service_monitoring.enabled %}
    check_critical_services || overall_status=$?
{% endif %}

    check_system_load || overall_status=$?
    
    # Report overall status
    case $overall_status in
        0)
            log_message "=== System Health Check PASSED: All systems normal ==="
            ;;
        1)
            log_message "=== System Health Check WARNING: Some issues detected ==="
            ;;
        2)
            log_message "=== System Health Check CRITICAL: Critical issues detected ==="
            ;;
    esac
    
    log_message "=== Health Check Complete ==="
    echo ""
    
    exit $overall_status
}

main "$@"