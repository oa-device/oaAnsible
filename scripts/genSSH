#!/bin/bash

# SSH Key Deployment Script
# Deploys SSH public keys to macOS and Ubuntu servers
#
# Usage:
#   Interactive mode: ./genSSH
#   Non-interactive: ./genSSH <ip> <user> [password]
#
# Examples:
#   ./genSSH 192.168.1.247 kai
#   ./genSSH 192.168.1.100 ubuntu mypassword
#
# Supports both macOS and Ubuntu server groups in inventory

# Source helper functions and variables
HELPER_SCRIPT_PATH="$(dirname "${BASH_SOURCE[0]}")/helpers.sh"
if [ -f "$HELPER_SCRIPT_PATH" ]; then
  # shellcheck source=./helpers.sh
  source "$HELPER_SCRIPT_PATH"
else
  echo "ERROR: helpers.sh not found at $HELPER_SCRIPT_PATH"
  exit 1
fi

# Set script-specific log level
SCRIPT_LOG_LEVEL=$_LOG_LEVEL_DEBUG
export SCRIPT_LOG_LEVEL

log_debug "genSSH script started."
ensure_ansible_root_dir
check_ansible_installed # Checks for ansible-playbook
check_vault_password_file

# Check for required commands
check_ansible_vault_installed
check_yq_installed
check_ssh_installed

# --- Main Script ---
# Check if arguments are provided for non-interactive mode
if [ $# -eq 3 ]; then
  # Non-interactive mode: genSSH <ip> <user> <password>
  TARGET_CONNECT_HOST="$1"
  TARGET_CONNECT_USER="$2"
  SSH_PASSWORD="$3"
  
  # Determine inventory and host alias based on IP
  TARGET_INVENTORY_PATH="$OA_ANSIBLE_INVENTORY_DIR/staging/hosts.yml"
  # Find the host alias for this IP across all host groups
  TARGET_HOST_ALIAS=""
  
  # Search in macos group
  MACOS_HOST=$(yq e ".all.children.macos.hosts | to_entries | .[] | select(.value.ansible_host == \"$TARGET_CONNECT_HOST\") | .key" "$TARGET_INVENTORY_PATH")
  if [ -n "$MACOS_HOST" ] && [ "$MACOS_HOST" != "null" ]; then
    TARGET_HOST_ALIAS="$MACOS_HOST"
    TARGET_HOST_GROUP="macos"
  fi
  
  # Search in ubuntu_servers group if not found in macos
  if [ -z "$TARGET_HOST_ALIAS" ]; then
    UBUNTU_HOST=$(yq e ".all.children.ubuntu_servers.hosts | to_entries | .[] | select(.value.ansible_host == \"$TARGET_CONNECT_HOST\") | .key" "$TARGET_INVENTORY_PATH")
    if [ -n "$UBUNTU_HOST" ] && [ "$UBUNTU_HOST" != "null" ]; then
      TARGET_HOST_ALIAS="$UBUNTU_HOST"
      TARGET_HOST_GROUP="ubuntu_servers"
    fi
  fi
  
  if [ -z "$TARGET_HOST_ALIAS" ]; then
    log_error "No host found with IP $TARGET_CONNECT_HOST in staging inventory"
    exit 1
  fi
  
  log_info "Non-interactive mode: deploying SSH key to $TARGET_HOST_ALIAS ($TARGET_CONNECT_HOST) as $TARGET_CONNECT_USER [group: $TARGET_HOST_GROUP]"
else
  # Interactive mode: use the common select_target_host function from helpers.sh
  if ! select_target_host true; then
    log_error "Host selection failed. Exiting genSSH."
    exit 1
  fi
fi

# Prepare SSH key deployment
# Variables from helpers.sh
log_debug "Attempting to view vault file: $VAULT_YML_FILE"

# Set Ansible config path for ansible-vault
export ANSIBLE_CONFIG="$(get_ansible_config_path)"

# Decrypt the vault and extract the public key and passwords
DECRYPTED_VAULT_CONTENT=$(ansible-vault view "$VAULT_YML_FILE" --vault-password-file "$OA_ANSIBLE_VAULT_PASSWORD_FILE")
if [ $? -ne 0 ]; then
  log_error "Failed to decrypt vault file: $VAULT_YML_FILE"
  exit 1
fi
log_debug "Vault file decrypted successfully."

# Extract the public key from the vault
PUBLIC_KEY_CONTENT=$(echo "$DECRYPTED_VAULT_CONTENT" | yq -r '.vault_ssh_public_key')
if [ -z "$PUBLIC_KEY_CONTENT" ] || [ "$PUBLIC_KEY_CONTENT" == "null" ]; then
  log_error "Failed to extract 'vault_ssh_public_key' from vault content."
  exit 1
fi
log_debug "Public key extracted from vault."

# Try to get host-specific password from vault first
HOST_PASSWORD=$(echo "$DECRYPTED_VAULT_CONTENT" | yq -r ".vault_sudo_passwords.$TARGET_HOST_ALIAS")
if [ "$HOST_PASSWORD" == "null" ]; then
  HOST_PASSWORD=""
fi

# If no host-specific password, try group-specific or default passwords
if [ -z "$HOST_PASSWORD" ]; then
  log_debug "No host-specific password found for $TARGET_HOST_ALIAS"
  
  # For Ubuntu servers, try the Ubuntu-specific password first
  if [ "${TARGET_HOST_GROUP:-}" == "ubuntu_servers" ]; then
    log_debug "Trying Ubuntu server password from vault"
    HOST_PASSWORD=$(echo "$DECRYPTED_VAULT_CONTENT" | yq -r '.vault_ubuntu_sudo_password')
    if [ "$HOST_PASSWORD" != "null" ] && [ -n "$HOST_PASSWORD" ]; then
      log_debug "Using Ubuntu server password from vault"
    else
      HOST_PASSWORD=""
    fi
  fi
  
  # If still no password, try default password
  if [ -z "$HOST_PASSWORD" ]; then
    log_debug "Trying default sudo password from vault"
    HOST_PASSWORD=$(echo "$DECRYPTED_VAULT_CONTENT" | yq -r '.vault_default_sudo_password')
    if [ "$HOST_PASSWORD" == "null" ]; then
      HOST_PASSWORD=""
    elif [ -n "$HOST_PASSWORD" ]; then
      log_debug "Using default sudo password from vault"
    fi
  fi
else
  log_debug "Using host-specific password from vault for $TARGET_HOST_ALIAS"
fi

# If SSH_PASSWORD was provided via command line, it takes precedence
if [ -z "$SSH_PASSWORD" ] && [ -n "$HOST_PASSWORD" ] && [ "$HOST_PASSWORD" != "null" ]; then
  SSH_PASSWORD="$HOST_PASSWORD"
  log_debug "Using password from vault for authentication"
fi

# Create a temporary file for the public key with .pub extension (required by ssh-copy-id)
TMP_PUBKEY_DIR=$(mktemp -d "/tmp/genSSH_XXXXXX")
TMP_PUBKEY_PATH="$TMP_PUBKEY_DIR/id_rsa.pub"
touch "$TMP_PUBKEY_PATH"
if [ ! -f "$TMP_PUBKEY_PATH" ]; then
  log_error "Failed to create temporary file for public key."
  rm -rf "$TMP_PUBKEY_DIR"
  exit 1
fi
log_debug "Temporary public key file created at $TMP_PUBKEY_PATH"

# Set permissions and write key
chmod 600 "$TMP_PUBKEY_PATH"
echo -E "$PUBLIC_KEY_CONTENT" >"$TMP_PUBKEY_PATH"
if [ $? -ne 0 ]; then
  log_error "Failed to write public key to temporary file: $TMP_PUBKEY_PATH"
  rm -f "$TMP_PUBKEY_PATH" # Clean up
  exit 1
fi

# Set up a trap to ensure the temporary key file and directory are deleted on exit
trap 'log_debug "Cleaning up temporary files in: $TMP_PUBKEY_DIR"; rm -rf "$TMP_PUBKEY_DIR"' EXIT INT TERM

log_info "Deploying SSH public key to $TARGET_CONNECT_USER@$TARGET_CONNECT_HOST..."

# Create the SSH command
SSH_OPTS=("-o" "StrictHostKeyChecking=no" "-o" "UserKnownHostsFile=/dev/null")
if [ -n "$TARGET_CONNECT_PORT" ] && [ "$TARGET_CONNECT_PORT" != "22" ]; then
  SSH_OPTS+=("-p" "$TARGET_CONNECT_PORT")
fi

# Prepare the SSH command for key deployment
if [ -n "$SSH_PASSWORD" ]; then
  # Use sshpass for non-interactive password authentication
  if ! command -v sshpass &>/dev/null; then
    log_error "sshpass command not found. Please install sshpass for non-interactive mode."
    log_error "On macOS: brew install hudochenkov/sshpass/sshpass"
    exit 1
  fi
  
  log_debug "Using sshpass for non-interactive authentication"
  SSH_COMMAND=("sshpass" "-p" "$SSH_PASSWORD" "ssh-copy-id" "-f" "-i" "$TMP_PUBKEY_PATH" "${SSH_OPTS[@]}" "$TARGET_CONNECT_USER@$TARGET_CONNECT_HOST")
else
  # Interactive mode - will prompt for password
  SSH_COMMAND=("ssh-copy-id" "-f" "-i" "$TMP_PUBKEY_PATH" "${SSH_OPTS[@]}" "$TARGET_CONNECT_USER@$TARGET_CONNECT_HOST")
fi

log_debug "SSH command: ${SSH_COMMAND[*]}"

# Execute the SSH command
"${SSH_COMMAND[@]}"
SSH_EXIT_CODE=$?

# Check the result
if [ $SSH_EXIT_CODE -eq 0 ]; then
  log_info "SSH public key deployment to '$TARGET_HOST_ALIAS' ($TARGET_CONNECT_HOST) completed successfully."
else
  log_error "SSH public key deployment to '$TARGET_HOST_ALIAS' ($TARGET_CONNECT_HOST) failed with exit code $SSH_EXIT_CODE."
  log_error "Please check the output above for details."
fi

# Explicitly remove the temp directory and clear the trap
log_debug "Cleaning up temporary files"
rm -rf "$TMP_PUBKEY_DIR"
trap - EXIT INT TERM # Clear the trap

log_debug "genSSH script finished."
exit $SSH_EXIT_CODE
