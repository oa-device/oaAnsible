---
# Directory management tasks for tracker deployment
# Handles git repository setup, directory cleanup, and backup management

- name: Create directory structure in ansible_user's home directory
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/orangead/tracker"
    state: directory
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0755"

- name: Check if tracker directory exists
  ansible.builtin.stat:
    path: "{{ ansible_user_dir }}/orangead/tracker"
  register: tracker_dir_stat

- name: Check if tracker repository exists
  ansible.builtin.stat:
    path: "{{ ansible_user_dir }}/orangead/tracker/.git"
  register: tracker_git_stat

- name: Check if directory exists and has content
  ansible.builtin.shell: |
    if [ -d "{{ ansible_user_dir }}/orangead/tracker" ]; then
      if [ "$(ls -A {{ ansible_user_dir }}/orangead/tracker 2>/dev/null)" ]; then
        echo "has_content"
      else
        echo "empty"
      fi
    else
      echo "does_not_exist"
    fi
  register: directory_content_check
  changed_when: false

- name: Check if directory is a git repository
  ansible.builtin.command: git -C "{{ ansible_user_dir }}/orangead/tracker" rev-parse --git-dir
  register: git_repo_check
  failed_when: false
  changed_when: false

- name: Display directory status
  ansible.builtin.debug:
    msg: |
      Tracker directory status:
      - Exists: {{ tracker_dir_stat.stat.exists }}
      - Has content: {{ directory_content_check.stdout == 'has_content' }}
      - Is git repo: {{ git_repo_check.rc == 0 }}

- name: Backup and clean non-empty directory that is not a git repository
  when: 
    - directory_content_check.stdout == 'has_content'
    - git_repo_check.rc != 0
  block:
    - name: Create backup directory with timestamp
      ansible.builtin.shell: |
        backup_dir="{{ ansible_user_dir }}/orangead/tracker_backup_$(date +%Y%m%d_%H%M%S)"
        mkdir -p "$backup_dir"
        echo "$backup_dir"
      register: backup_dir_result

    - name: Copy everything to backup
      ansible.builtin.shell: |
        cp -r "{{ ansible_user_dir }}/orangead/tracker"/* "{{ backup_dir_result.stdout }}/" 2>/dev/null || true
      
    - name: Save logs, output.txt, and database before cleanup
      ansible.builtin.shell: |
        mkdir -p "{{ ansible_user_dir }}/orangead/tracker_preserved"
        [ -f "{{ ansible_user_dir }}/orangead/tracker/logs" ] && cp -r "{{ ansible_user_dir }}/orangead/tracker/logs" "{{ ansible_user_dir }}/orangead/tracker_preserved/" || true
        [ -f "{{ ansible_user_dir }}/orangead/tracker/output.txt" ] && cp "{{ ansible_user_dir }}/orangead/tracker/output.txt" "{{ ansible_user_dir }}/orangead/tracker_preserved/" || true
        [ -d "{{ ansible_user_dir }}/orangead/tracker/data" ] && cp -r "{{ ansible_user_dir }}/orangead/tracker/data" "{{ ansible_user_dir }}/orangead/tracker_preserved/" || true

    - name: Clean directory
      ansible.builtin.shell: |
        rm -rf "{{ ansible_user_dir }}/orangead/tracker"/*
        rm -rf "{{ ansible_user_dir }}/orangead/tracker"/.*

- name: Check available disk space
  ansible.builtin.shell: |
    df -h "{{ ansible_user_dir }}" | tail -1 | awk '{print $4}'
  register: available_space

- name: Display available disk space
  ansible.builtin.debug:
    msg: "Available disk space: {{ available_space.stdout }}"

- name: Ensure tracker directory is in proper state for git operations
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/orangead/tracker"
    state: directory
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0755"