---
- name: CamGuard Video Recording Service deployment
  when: camguard.enabled | default(false)
  tags: ["camguard"]
  block:
    - name: Merge camguard defaults with inventory overrides
      ansible.builtin.set_fact:
        camguard: "{{ camguard_defaults | combine(camguard | default({}), recursive=True) }}"
      tags: ["camguard", "config"]

    - name: Validate camera access exclusivity
      ansible.builtin.fail:
        msg: |
          Camera access conflict detected. CamGuard and other camera services cannot run simultaneously.
          Please ensure only one camera-using service is enabled per host.
      when: 
        - camguard.enabled | default(false)
        - (deploy_tracker | default(false)) or (oa_environment.deploy_tracker | default(false))
      tags: ["camguard", "validation"]

    - name: Check if ffmpeg is installed
      ansible.builtin.command: which ffmpeg
      register: ffmpeg_check
      failed_when: false
      changed_when: false
      tags: ["camguard", "dependencies"]

    - name: Install ffmpeg via Homebrew
      community.general.homebrew:
        name: ffmpeg
        state: present
      when: ffmpeg_check.rc != 0
      tags: ["camguard", "dependencies"]

    - name: Check if MediaMTX is installed
      ansible.builtin.stat:
        path: "{{ ansible_user_dir }}/orangead/bin/mediamtx"
      register: mediamtx_check
      when: camguard.streaming.enabled | default(true)
      tags: ["camguard", "dependencies", "streaming"]

    - name: Download and install MediaMTX
      block:
        - name: Get latest MediaMTX release info
          ansible.builtin.uri:
            url: https://api.github.com/repos/bluenviron/mediamtx/releases/latest
            method: GET
          register: mediamtx_release
          
        - name: Download MediaMTX binary
          ansible.builtin.get_url:
            url: "{{ mediamtx_release.json.assets | selectattr('name', 'match', '.*darwin_arm64.*') | map(attribute='browser_download_url') | first }}"
            dest: "/tmp/mediamtx.tar.gz"
            mode: '0644'
            
        - name: Extract MediaMTX using command
          ansible.builtin.command:
            cmd: tar -xzf /tmp/mediamtx.tar.gz -C /tmp
            creates: /tmp/mediamtx
            
        - name: Install MediaMTX binary
          ansible.builtin.copy:
            src: "/tmp/mediamtx"
            dest: "{{ ansible_user_dir }}/orangead/bin/mediamtx"
            mode: '0755'
            owner: "{{ ansible_user }}"
            group: staff
            remote_src: true
            
        - name: Clean up download files
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - "/tmp/mediamtx.tar.gz"
            - "/tmp/mediamtx"
            - "/tmp/mediamtx.yml"
      when: 
        - camguard.streaming.enabled | default(true)
        - not mediamtx_check.stat.exists
      tags: ["camguard", "dependencies", "streaming"]

    - name: Create CamGuard directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: staff
      loop:
        - "{{ camguard.storage.recordings_dir }}"
        - "{{ camguard.storage.logs_dir }}"
        - "{{ ansible_user_dir }}/orangead/camguard/scripts"
        - "{{ ansible_user_dir }}/orangead/camguard/config"
        - "{{ ansible_user_dir }}/orangead/bin"
      tags: ["camguard", "setup"]

    - name: Generate MediaMTX configuration
      ansible.builtin.template:
        src: mediamtx.yml.j2
        dest: "{{ ansible_user_dir }}/orangead/camguard/config/mediamtx.yml"
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: staff
      when: camguard.streaming.enabled | default(true)
      notify: restart mediamtx service
      tags: ["camguard", "config", "streaming"]

    - name: Create MediaMTX LaunchAgent
      ansible.builtin.template:
        src: com.orangead.mediamtx.plist.j2
        dest: "{{ ansible_user_dir }}/Library/LaunchAgents/com.orangead.mediamtx.plist"
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: staff
      when: camguard.streaming.enabled | default(true)
      notify: restart mediamtx service
      tags: ["camguard", "service", "streaming"]

    - name: Generate CamGuard service script
      ansible.builtin.template:
        src: camguard.sh.j2
        dest: "{{ ansible_user_dir }}/orangead/camguard/scripts/camguard.sh"
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: staff
      notify: restart camguard service
      tags: ["camguard", "config"]

    - name: Generate CamGuard cleanup script
      ansible.builtin.template:
        src: camguard_cleanup.sh.j2
        dest: "{{ ansible_user_dir }}/orangead/camguard/scripts/camguard_cleanup.sh"
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: staff
      tags: ["camguard", "config"]


    - name: Create CamGuard LaunchAgent
      ansible.builtin.template:
        src: com.orangead.camguard.plist.j2
        dest: "{{ ansible_user_dir }}/Library/LaunchAgents/{{ camguard.service.name }}.plist"
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: staff
      notify: restart camguard service
      tags: ["camguard", "service"]

    - name: Create CamGuard cleanup LaunchAgent
      ansible.builtin.template:
        src: com.orangead.camguard.cleanup.plist.j2
        dest: "{{ ansible_user_dir }}/Library/LaunchAgents/{{ camguard.service.name }}.cleanup.plist"
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: staff
      notify: restart camguard cleanup service
      tags: ["camguard", "service"]


    - name: Load and start CamGuard service
      ansible.builtin.command: >
        launchctl load -w {{ ansible_user_dir }}/Library/LaunchAgents/{{ camguard.service.name }}.plist
      become: false
      register: launchctl_result
      failed_when: 
        - launchctl_result.rc != 0
        - "'already loaded' not in launchctl_result.stderr"
      changed_when: launchctl_result.rc == 0
      tags: ["camguard", "service"]

    - name: Load and start CamGuard cleanup service
      ansible.builtin.command: >
        launchctl load -w {{ ansible_user_dir }}/Library/LaunchAgents/{{ camguard.service.name }}.cleanup.plist
      become: false
      register: cleanup_launchctl_result
      failed_when: 
        - cleanup_launchctl_result.rc != 0
        - "'already loaded' not in cleanup_launchctl_result.stderr"
      changed_when: cleanup_launchctl_result.rc == 0
      tags: ["camguard", "service"]

    - name: Load and start MediaMTX service
      ansible.builtin.command: >
        launchctl load -w {{ ansible_user_dir }}/Library/LaunchAgents/com.orangead.mediamtx.plist
      become: false
      register: mediamtx_launchctl_result
      failed_when: 
        - mediamtx_launchctl_result.rc != 0
        - "'already loaded' not in mediamtx_launchctl_result.stderr"
      changed_when: mediamtx_launchctl_result.rc == 0
      when: camguard.streaming.enabled | default(true)
      tags: ["camguard", "service", "streaming"]

    - name: Verify CamGuard service is running
      ansible.builtin.command: >
        launchctl list {{ camguard.service.name }}
      become: false
      register: service_status
      failed_when: service_status.rc != 0
      changed_when: false
      tags: ["camguard", "verification"]


    - name: Display CamGuard deployment summary
      ansible.builtin.debug:
        msg: |
          CamGuard Recording Service Deployed Successfully:
          - Service: {{ camguard.service.name }}
          - Resolution: {{ camguard.recording.resolution }}@{{ camguard.recording.framerate }}fps
          - Bitrate: {{ camguard.recording.bitrate }}
          - Recordings Directory: {{ camguard.storage.recordings_dir }}
          - Logs Directory: {{ camguard.storage.logs_dir }}
          - Retention: {{ camguard.storage.retention_days }} days (0 = no retention)
          - Weekend Schedule: Friday {{ camguard.schedule.friday_start_hour }}:00 to Monday {{ camguard.schedule.monday_end_hour }}:00
          {% if camguard.streaming.enabled | default(true) %}
          - Live Streaming: rtsp://{{ inventory_hostname }}:{{ camguard.streaming.rtsp_port }}/{{ camguard.streaming.stream_path }}
          - MediaMTX Service: com.orangead.mediamtx
          {% endif %}
      tags: ["camguard", "summary"]