#!/bin/bash
# OrangeAd MPV Player - Simple and effective dual-screen player
# Detects displays and deploys the right number of instances

set -e

# Set proper PATH for LaunchAgent environment
export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin:$PATH"

PLAYER_DIR="{{ player.video_source }}"
LOGS_DIR="${PLAYER_DIR}/logs"
LOG_FILE="${LOGS_DIR}/player.log"

# Video configuration - works with both scheduled and static configurations
{% if player.schedule_enabled | default(false) and player.schedules is defined %}
# Time-based scheduling functions with day-of-week support
get_current_schedule() {
    local current_time=$(date '+%H:%M')
    local current_hour=$(date '+%H')
    local current_minute=$(date '+%M')
    local current_minutes=$((current_hour * 60 + current_minute))
    local current_dow=$(date '+%u')  # 1=Monday, 7=Sunday
    local current_day=""
    
    # Convert day number to day name
    case $current_dow in
        1|2|3|4|7) current_day="weekday" ;;  # Monday-Thursday, Sunday
        5) current_day="friday" ;;
        6) current_day="saturday" ;;
    esac
    
    {% for schedule in player.schedules %}
    # Schedule: {{ schedule.name }} ({{ schedule.start_time }} - {{ schedule.end_time }}){% if schedule.day_of_week is defined %} [{{ schedule.day_of_week }}]{% endif %}
    {% if schedule.day_of_week is defined %}
    # Check if this schedule matches current day
    if [ "$current_day" != "{{ schedule.day_of_week }}" ]; then
        continue  # Skip this schedule if day doesn't match
    fi
    {% endif %}
    
    local start_time="{{ schedule.start_time }}"
    local end_time="{{ schedule.end_time }}"
    local start_hour=${start_time%:*}
    local start_minute=${start_time#*:}
    local end_hour=${end_time%:*}
    local end_minute=${end_time#*:}
    local start_minutes=$((start_hour * 60 + start_minute))
    local end_minutes=$((end_hour * 60 + end_minute))
    
    # Handle overnight schedules (e.g., 22:30 - 01:00)
    if [ $end_minutes -lt $start_minutes ]; then
        # Overnight schedule
        if [ $current_minutes -ge $start_minutes ] || [ $current_minutes -lt $end_minutes ]; then
            echo "{{ schedule.name }}"
            return 0
        fi
    else
        # Same-day schedule
        if [ $current_minutes -ge $start_minutes ] && [ $current_minutes -lt $end_minutes ]; then
            echo "{{ schedule.name }}"
            return 0
        fi
    fi
    {% endfor %}
    
    # Default fallback to first schedule that matches current day
    {% for schedule in player.schedules %}
    {% if schedule.day_of_week is defined %}
    if [ "$current_day" = "{{ schedule.day_of_week }}" ]; then
        echo "{{ schedule.name }}"
        return 0
    fi
    {% else %}
    echo "{{ schedule.name }}"
    return 0
    {% endif %}
    {% endfor %}
}

get_schedule_videos() {
    local schedule_name="$1"
    local display_num="$2"
    
    {% for schedule in player.schedules %}
    if [ "$schedule_name" = "{{ schedule.name }}" ]; then
        {% set display1_videos = schedule.videos | selectattr('display', 'equalto', 1) | selectattr('enabled', 'equalto', true) | list %}
        {% set display2_videos = schedule.videos | selectattr('display', 'equalto', 2) | selectattr('enabled', 'equalto', true) | list %}
        if [ "$display_num" = "1" ]; then
            {% if display1_videos %}
            echo "{{ display1_videos[0].name }}"
            {% else %}
            echo ""
            {% endif %}
        elif [ "$display_num" = "2" ]; then
            {% if display2_videos %}
            echo "{{ display2_videos[0].name }}"
            {% else %}
            echo ""
            {% endif %}
        fi
        return 0
    fi
    {% endfor %}
    
    echo ""
}

# Dynamic video file resolution based on current schedule
CURRENT_SCHEDULE=$(get_current_schedule)
VIDEO_FILE_DISPLAY1="${PLAYER_DIR}/$(get_schedule_videos "$CURRENT_SCHEDULE" "1")"
VIDEO_FILE_DISPLAY2="${PLAYER_DIR}/$(get_schedule_videos "$CURRENT_SCHEDULE" "2")"

# Fallback to static configuration if scheduling fails
if [[ -z "$(get_schedule_videos "$CURRENT_SCHEDULE" "1")" ]]; then
    {% if player.videos is defined and player.videos %}
        {% set fallback_display1 = player.videos | selectattr('display', 'equalto', 1) | selectattr('enabled', 'equalto', true) | first %}
        {% if fallback_display1 %}
    VIDEO_FILE_DISPLAY1="${PLAYER_DIR}/{{ fallback_display1.name }}"
        {% endif %}
    {% endif %}
fi

if [[ -z "$(get_schedule_videos "$CURRENT_SCHEDULE" "2")" ]]; then
    {% if player.videos is defined and player.videos %}
        {% set fallback_display2 = player.videos | selectattr('display', 'equalto', 2) | selectattr('enabled', 'equalto', true) | first %}
        {% if fallback_display2 %}
    VIDEO_FILE_DISPLAY2="${PLAYER_DIR}/{{ fallback_display2.name }}"
        {% else %}
    VIDEO_FILE_DISPLAY2="$VIDEO_FILE_DISPLAY1"  # Use same video for both displays
        {% endif %}
    {% endif %}
fi

{% else %}
# Traditional static video configuration (backward compatibility)
{% if player.videos is defined and player.videos %}
  {% if merged_player_config.dual_screen | default(true) %}
    # Dual-screen mode: use explicit display assignments
    {% set display1_videos = player.videos | selectattr('display', 'equalto', 1) | selectattr('enabled', 'equalto', true) | list %}
    {% set display2_videos = player.videos | selectattr('display', 'equalto', 2) | selectattr('enabled', 'equalto', true) | list %}
    
    # Fallback if no display-specific videos found
    {% if not display1_videos %}
      {% set display1_videos = player.videos | selectattr('enabled', 'equalto', true) | list %}
    {% endif %}
    {% if not display2_videos and display1_videos %}
      {% set display2_videos = display1_videos %}
    {% endif %}
  {% else %}
    # Single-screen mode: use first enabled video for display 1 only
    {% set all_enabled_videos = player.videos | selectattr('enabled', 'equalto', true) | list %}
    {% if all_enabled_videos %}
      {% set display1_videos = [all_enabled_videos[0]] %}
    {% else %}
      {% set display1_videos = [player.videos[0]] %}
    {% endif %}
    {% set display2_videos = [] %}
  {% endif %}
{% else %}
  # NO VIDEOS DEFINED - Exit with error rather than using hardcoded fallback
  {% set display1_videos = [] %}
  {% set display2_videos = [] %}
{% endif %}

# Set video file paths - no fallbacks, proper inventory-driven configuration
{% if display1_videos and display1_videos[0].name is defined %}
VIDEO_FILE_DISPLAY1="${PLAYER_DIR}/{{ display1_videos[0].name }}"
{% else %}
echo "ERROR: No videos configured in inventory for display 1"
exit 1
{% endif %}

{% if display2_videos and display2_videos[0].name is defined %}
VIDEO_FILE_DISPLAY2="${PLAYER_DIR}/{{ display2_videos[0].name }}"
{% else %}
VIDEO_FILE_DISPLAY2=""
{% endif %}
{% endif %}

# MPV arguments
MPV_ARGS="--loop --fullscreen --no-audio --no-border --ontop --no-input-default-bindings --no-input-cursor --no-osd-bar"

# Global variables
MPV_PID_1=""
MPV_PID_2=""
DUAL_RUNNING=false

# Ensure logs directory exists
mkdir -p "$LOGS_DIR"

# Function to log messages
log_message() {
    local level="${2:-INFO}"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $1" >> "$LOG_FILE"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $1"
}

{% if player.schedule_enabled | default(false) %}
# Function to check if schedule has changed and restart if needed
check_schedule_change() {
    local new_schedule=$(get_current_schedule)
    if [ "$new_schedule" != "$CURRENT_SCHEDULE" ]; then
        log_message "Schedule changed from $CURRENT_SCHEDULE to $new_schedule - restarting player" "SCHEDULE"
        CURRENT_SCHEDULE="$new_schedule"
        
        # Update video paths
        VIDEO_FILE_DISPLAY1="${PLAYER_DIR}/$(get_schedule_videos "$CURRENT_SCHEDULE" "1")"
        VIDEO_FILE_DISPLAY2="${PLAYER_DIR}/$(get_schedule_videos "$CURRENT_SCHEDULE" "2")"
        
        # Clean restart
        cleanup_mpv_processes
        sleep 2
        return 1  # Signal to restart
    fi
    return 0  # No change
}

# Function to cleanup existing MPV processes
cleanup_mpv_processes() {
    log_message "Stopping existing MPV processes for schedule change..." "CLEANUP"
    pkill -f "mpv.*--screen=" || true
    sleep 1
    pkill -9 -f "mpv.*--screen=" 2>/dev/null || true
}
{% endif %}

# Simple and effective display detection
detect_displays() {
    if command -v system_profiler >/dev/null 2>&1; then
        display_count=$(system_profiler SPDisplaysDataType 2>/dev/null | grep -c "Resolution:" || echo "0")
        if [ "$display_count" -eq 0 ]; then
            # Fallback: try counting displays via system_profiler differently
            display_count=$(system_profiler SPDisplaysDataType 2>/dev/null | grep -c "Display Type:" || echo "1")
        fi
    else
        display_count="1"
    fi
    echo "$display_count"
}

# Simple MPV startup - sets global PID variable
start_mpv() {
    local screen_num="$1"
    local video_file="$2"
    local pid_var="$3"
    
    log_message "Starting MPV on screen $screen_num: $(basename "$video_file")" "START"
    
    # Start MPV and get its PID
    mpv --screen="$screen_num" $MPV_ARGS "$video_file" &
    local mpv_pid=$!
    
    # Simple verification - just check if process exists
    sleep 2
    if kill -0 $mpv_pid 2>/dev/null; then
        log_message "✓ MPV started successfully on screen $screen_num, PID: $mpv_pid" "SUCCESS"
        # Set the global variable
        if [ "$pid_var" = "MPV_PID_1" ]; then
            MPV_PID_1=$mpv_pid
        elif [ "$pid_var" = "MPV_PID_2" ]; then
            MPV_PID_2=$mpv_pid
        fi
        return 0
    else
        log_message "✗ MPV failed to start on screen $screen_num" "ERROR"
        return 1
    fi
}

# Async MPV startup for parallel execution
start_mpv_async() {
    local screen_num="$1"
    local video_file="$2"
    
    log_message "Starting MPV on screen $screen_num: $(basename "$video_file")" "START"
    
    # Start MPV and get its PID
    mpv --screen="$screen_num" $MPV_ARGS "$video_file" &
    local mpv_pid=$!
    
    # Quick verification
    sleep 1
    if kill -0 $mpv_pid 2>/dev/null; then
        log_message "✓ MPV started on screen $screen_num, PID: $mpv_pid" "SUCCESS"
        # Set the appropriate global variable
        if [ "$screen_num" = "0" ]; then
            MPV_PID_1=$mpv_pid
        elif [ "$screen_num" = "1" ]; then
            MPV_PID_2=$mpv_pid
        fi
        return 0
    else
        log_message "✗ MPV failed on screen $screen_num" "ERROR"
        return 1
    fi
}

# Cleanup function
cleanup() {
    log_message "Cleaning up MPV processes..." "SHUTDOWN"
    pkill -f "mpv.*--screen=" || true
    sleep 1
    pkill -9 -f "mpv.*--screen=" 2>/dev/null || true
    log_message "Player shutdown complete" "EXIT"
    exit 0
}

# Set up signal handlers
trap cleanup SIGTERM SIGINT

# Start player
log_message "=== OrangeAd MPV Player Starting ===" "SYSTEM"
log_message "Hostname: $(hostname)" "SYSTEM"
log_message "User: $(whoami)" "SYSTEM"

{% if player.schedule_enabled | default(false) %}
log_message "Schedule-based player enabled" "SYSTEM"
log_message "Current schedule: $CURRENT_SCHEDULE" "SCHEDULE"
log_message "Display 1 video: $(basename "$VIDEO_FILE_DISPLAY1")" "SCHEDULE"
if [[ -n "$VIDEO_FILE_DISPLAY2" ]]; then
    log_message "Display 2 video: $(basename "$VIDEO_FILE_DISPLAY2")" "SCHEDULE"
else
    log_message "Display 2: Same as display 1" "SCHEDULE"
fi
{% endif %}

# Validate video files exist
if [[ ! -f "$VIDEO_FILE_DISPLAY1" ]]; then
    log_message "ERROR: Primary video file not found: $VIDEO_FILE_DISPLAY1" "ERROR"
    exit 1
fi

# Check secondary video file exists if configured
if [[ -n "$VIDEO_FILE_DISPLAY2" && ! -f "$VIDEO_FILE_DISPLAY2" ]]; then
    log_message "ERROR: Secondary video file not found: $VIDEO_FILE_DISPLAY2" "ERROR"
    exit 1
fi

# Clean up any existing MPV processes
log_message "Cleaning up existing MPV processes..." "CLEANUP"
pkill -f "mpv.*--screen=" || true
sleep 1

# Detect displays
DISPLAY_COUNT=$(detect_displays)
log_message "Detected $DISPLAY_COUNT display(s)" "DISPLAY"

# Deploy based on display count
if [ "$DISPLAY_COUNT" -ge 2 ]; then
    log_message "=== DUAL-SCREEN MODE ===" "MODE"
    
    # Start both displays truly simultaneously - no delays
    log_message "Starting both displays simultaneously..." "START"
    
    # Launch both MPV instances at exactly the same time
    mpv --screen=0 $MPV_ARGS "$VIDEO_FILE_DISPLAY1" &
    MPV_PID_1=$!
    
    # Start secondary display
    if [[ -n "$VIDEO_FILE_DISPLAY2" ]]; then
        mpv --screen=1 $MPV_ARGS "$VIDEO_FILE_DISPLAY2" &
        MPV_PID_2=$!
    else
        mpv --screen=1 $MPV_ARGS "$VIDEO_FILE_DISPLAY1" &
        MPV_PID_2=$!
    fi
    
    log_message "Both MPV instances launched (PIDs: $MPV_PID_1, $MPV_PID_2)" "START"
    
    # Quick verification after a brief moment
    sleep 2
    
    PRIMARY_SUCCESS=false
    SECONDARY_SUCCESS=false
    
    if kill -0 $MPV_PID_1 2>/dev/null; then
        log_message "✓ Primary display running (PID: $MPV_PID_1)" "SUCCESS"
        PRIMARY_SUCCESS=true
    else
        log_message "✗ Primary display failed to start" "ERROR"
    fi
    
    if kill -0 $MPV_PID_2 2>/dev/null; then
        log_message "✓ Secondary display running (PID: $MPV_PID_2)" "SUCCESS"
        SECONDARY_SUCCESS=true
    else
        log_message "✗ Secondary display failed to start" "ERROR"
    fi
    
    # Check results
    if [ "$PRIMARY_SUCCESS" = false ]; then
        log_message "CRITICAL: Primary display failed" "ERROR"
        exit 1
    fi
    
    if [ "$SECONDARY_SUCCESS" = true ]; then
        log_message "✓ DUAL-SCREEN: Both displays running simultaneously (PIDs: $MPV_PID_1, $MPV_PID_2)" "SUCCESS"
        DUAL_RUNNING=true
    else
        log_message "⚠ Secondary display failed - continuing with primary only" "WARNING"
        DUAL_RUNNING=false
    fi
else
    log_message "=== SINGLE-SCREEN MODE ===" "MODE"
    
    # Start single display (screen 0)
    if start_mpv 0 "$VIDEO_FILE_DISPLAY1" "MPV_PID_1"; then
        log_message "✓ SINGLE-SCREEN: Running (PID: $MPV_PID_1)" "SUCCESS"
        DUAL_RUNNING=false
    else
        log_message "CRITICAL: Display failed" "ERROR"
        exit 1
    fi
fi

# Monitor processes
log_message "Starting monitoring loop..." "MONITOR"
MONITOR_COUNT=0

while true; do
    MONITOR_COUNT=$((MONITOR_COUNT + 1))
    
    # Check primary display
    if ! kill -0 $MPV_PID_1 2>/dev/null; then
        log_message "Primary display died - restarting..." "RESTART"
        if start_mpv 0 "$VIDEO_FILE_DISPLAY1" "MPV_PID_1"; then
            log_message "Primary display restarted (PID: $MPV_PID_1)" "RESTART"
        else
            log_message "CRITICAL: Primary display restart failed" "ERROR"
        fi
    fi
    
    # Check secondary display if dual-screen
    if [ "$DUAL_RUNNING" = true ] && ! kill -0 $MPV_PID_2 2>/dev/null; then
        log_message "Secondary display died - restarting..." "RESTART"
        # Restart secondary display with appropriate video
        if [[ -n "$VIDEO_FILE_DISPLAY2" ]]; then
            if start_mpv 1 "$VIDEO_FILE_DISPLAY2" "MPV_PID_2"; then
                log_message "Secondary display restarted (PID: $MPV_PID_2)" "RESTART"
            else
                log_message "Secondary display restart failed" "ERROR"
                DUAL_RUNNING=false
            fi
        else
            if start_mpv 1 "$VIDEO_FILE_DISPLAY1" "MPV_PID_2"; then
                log_message "Secondary display restarted (PID: $MPV_PID_2)" "RESTART"
            else
                log_message "Secondary display restart failed" "ERROR"
                DUAL_RUNNING=false
            fi
        fi
    fi
    
    {% if player.schedule_enabled | default(false) %}
    # Check for schedule changes every cycle
    if ! check_schedule_change; then
        log_message "Restarting due to schedule change..." "RESTART"
        break  # Exit monitoring loop to restart with new schedule
    fi
    {% endif %}
    
    # Health check every 10 cycles
    if [ $((MONITOR_COUNT % 10)) -eq 0 ]; then
        if [ "$DUAL_RUNNING" = true ]; then
            log_message "HEALTH #$MONITOR_COUNT: Dual-screen (PIDs: $MPV_PID_1, $MPV_PID_2)" "HEALTH"
        else
            log_message "HEALTH #$MONITOR_COUNT: Single-screen (PID: $MPV_PID_1)" "HEALTH"
        fi
        {% if player.schedule_enabled | default(false) %}
        log_message "Current schedule: $CURRENT_SCHEDULE" "HEALTH"
        {% endif %}
    fi
    
    sleep {{ player.health_check_interval | default(180) }}
done

{% if player.schedule_enabled | default(false) %}
# If we exit the monitoring loop due to schedule change, restart the entire script
log_message "Restarting player with new schedule: $CURRENT_SCHEDULE" "RESTART"
exec "$0"  # Restart the script
{% endif %}