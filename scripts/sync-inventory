#!/usr/bin/env python3
"""
Script to update production inventory with Tailscale IPs while preserving all other config.
Fetches current Tailscale IPs and updates only ansible_host values.
"""

import sys
import re
import os
import json
from pathlib import Path
from urllib.request import urlopen, Request
from urllib.error import URLError

def get_vault_vars(ansible_root):
    """Get Tailscale credentials from Ansible vault."""
    import subprocess
    
    vault_file = ansible_root / "group_vars" / "all" / "vault.yml"
    if not vault_file.exists():
        print("ERROR: vault.yml not found")
        return None, None
    
    try:
        # Use ansible-vault to decrypt and get the vars
        result = subprocess.run([
            "ansible-vault", "view", str(vault_file)
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode != 0:
            print(f"ERROR: Failed to decrypt vault: {result.stderr}")
            return None, None
        
        # Parse the YAML content to extract values
        vault_content = result.stdout
        api_key = None
        tailnet = None
        
        for line in vault_content.split('\n'):
            if 'vault_tailscale_api_key:' in line:
                api_key = line.split(':', 1)[1].strip().strip('"')
            elif 'vault_tailscale_tailnet:' in line:
                tailnet = line.split(':', 1)[1].strip().strip('"')
        
        return api_key, tailnet
        
    except Exception as e:
        print(f"ERROR: Failed to read vault: {e}")
        return None, None

def get_tailscale_devices(ansible_root):
    """Fetch devices from Tailscale API using vault credentials."""
    # Try environment variables first, fallback to vault
    api_key = os.environ.get("TAILSCALE_API_KEY")
    tailnet = os.environ.get("TAILSCALE_TAILNET")
    
    if not api_key:
        print("Fetching Tailscale credentials from Ansible vault...")
        api_key, tailnet = get_vault_vars(ansible_root)
        
    if not api_key:
        print("ERROR: No Tailscale API key found in environment or vault")
        return {}
    
    if not tailnet:
        tailnet = "-"  # Default tailnet
    
    url = f"https://api.tailscale.com/api/v2/tailnet/{tailnet}/devices"
    
    try:
        req = Request(url)
        req.add_header("Authorization", f"Bearer {api_key}")
        req.add_header("Accept", "application/json")
        
        with urlopen(req, timeout=30) as response:
            data = json.loads(response.read().decode())
            
        devices = {}
        for device in data.get("devices", []):
            hostname = device.get("hostname", "").split(".")[0]
            
            # Convert hostname to f1-ca-XXX format if needed
            if hostname.startswith("f1"):
                if hostname.startswith("f1-") and not hostname.startswith("f1-ca-"):
                    # f1-XX -> f1-ca-0XX
                    match = re.match(r"^f1-(\d+)$", hostname)
                    if match:
                        number = match.group(1)
                        hostname = f"f1-ca-{number.zfill(3)}"
                elif re.match(r"^f1\d+$", hostname):
                    # f1XX -> f1-ca-0XX
                    number = hostname[2:]
                    hostname = f"f1-ca-{number.zfill(3)}"
            
            ip_address = device.get("addresses", [None])[0]
            if hostname and ip_address:
                devices[hostname] = ip_address
                
        print(f"Found {len(devices)} Tailscale devices")
        return devices
        
    except URLError as e:
        print(f"ERROR: Failed to fetch Tailscale devices: {e}")
        return {}
    except Exception as e:
        print(f"ERROR: Error processing Tailscale API response: {e}")
        return {}

def main():
    script_dir = Path(__file__).parent
    ansible_root = script_dir.parent
    
    staging_file = ansible_root / "inventory" / "staging" / "hosts.yml"
    production_file = ansible_root / "inventory" / "production" / "hosts.yml"
    
    if not staging_file.exists():
        print(f"ERROR: Staging inventory not found: {staging_file}")
        sys.exit(1)
    
    # Get Tailscale device IPs
    tailscale_devices = get_tailscale_devices(ansible_root)
    if not tailscale_devices:
        print("WARNING: No Tailscale devices found, falling back to copy from staging")
    
    # Read staging inventory
    try:
        with open(staging_file, 'r') as f:
            content = f.read()
    except Exception as e:
        print(f"ERROR: Failed to read staging inventory: {e}")
        sys.exit(1)
    
    # Update target_env to production
    updated_content = re.sub(
        r'target_env:\s*staging',
        'target_env: production',
        content
    )
    
    # Update ansible_host IPs with Tailscale IPs where available
    updated_hosts = 0
    for hostname, tailscale_ip in tailscale_devices.items():
        pattern = rf'({hostname}:[\s\S]*?ansible_host:\s*)192\.168\.1\.\d+(\s*ansible_user:)'
        replacement = rf'\g<1>{tailscale_ip}\g<2>'
        
        old_content = updated_content
        updated_content = re.sub(pattern, replacement, updated_content)
        
        if old_content != updated_content:
            updated_hosts += 1
            print(f"Updated {hostname}: ansible_host -> {tailscale_ip}")
    
    # Create backup of existing production inventory
    if production_file.exists():
        backup_file = production_file.with_suffix(f".yml.backup")
        try:
            backup_file.write_text(production_file.read_text())
            print(f"Backed up existing production inventory to {backup_file}")
        except Exception as e:
            print(f"WARNING: Failed to create backup: {e}")
    
    # Write updated inventory to production
    try:
        with open(production_file, 'w') as f:
            f.write(updated_content)
        print(f"Successfully updated production inventory: {production_file}")
        print(f"Updated {updated_hosts} hosts with Tailscale IPs")
        
        # Count total hosts
        host_count = len(re.findall(r'^\s+f1-ca-\d+:', updated_content, re.MULTILINE))
        print(f"Total hosts in production: {host_count}")
        
    except Exception as e:
        print(f"ERROR: Failed to write production inventory: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()