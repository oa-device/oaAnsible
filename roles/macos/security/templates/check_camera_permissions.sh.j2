#!/bin/bash
# Template for checking camera permissions
# This script checks camera permissions for various applications in the TCC database

TCC_DB="{{ ansible_user_dir }}/Library/Application Support/com.apple.TCC/TCC.db"
SYSTEM_TCC_DB="/Library/Application Support/com.apple.TCC/TCC.db"

# Check if we can access the user TCC database
USE_SUDO=""
if ! sqlite3 "$TCC_DB" "SELECT count(*) FROM sqlite_master;" &>/dev/null; then
    echo "User TCC database not accessible, checking system TCC database instead" >&2
    TCC_DB="$SYSTEM_TCC_DB"
    USE_SUDO="sudo"
fi

# Define the real Python paths
REAL_PYTHON="{{ python_execs.real_api }}"
API_VENV_PYTHON="{{ api_python }}"
TRACKER_VENV_PYTHON="{{ tracker_python }}"

# Check camera permissions for API Python (both real and venv)
api_access=$($USE_SUDO sqlite3 "$TCC_DB" "SELECT COUNT(*) FROM access WHERE service='kTCCServiceCamera' AND (client='$REAL_PYTHON' OR client='$API_VENV_PYTHON') AND auth_value=2;" 2>/dev/null || echo "0")

# Check camera permissions for Tracker Python (both real and venv)
tracker_access=$($USE_SUDO sqlite3 "$TCC_DB" "SELECT COUNT(*) FROM access WHERE service='kTCCServiceCamera' AND (client='$REAL_PYTHON' OR client='$TRACKER_VENV_PYTHON') AND auth_value=2;" 2>/dev/null || echo "0")

# Check camera permissions for setsid (needed for tracker start.sh)
# Use the setsid path found by Ansible
SETSID_PATH="{{ setsid_path.stdout }}"
setsid_access=$($USE_SUDO sqlite3 "$TCC_DB" "SELECT COUNT(*) FROM access WHERE service='kTCCServiceCamera' AND client='$SETSID_PATH' AND auth_value=2;" 2>/dev/null || echo "0")

# Check camera permissions for nohup (needed for new tracker execution chain)
nohup_access=$($USE_SUDO sqlite3 "$TCC_DB" "SELECT COUNT(*) FROM access WHERE service='kTCCServiceCamera' AND client='/usr/bin/nohup' AND auth_value=2;" 2>/dev/null || echo "0")

# Check camera permissions for bash (shell that executes tracker scripts)
bash_access=$($USE_SUDO sqlite3 "$TCC_DB" "SELECT COUNT(*) FROM access WHERE service='kTCCServiceCamera' AND client='/bin/bash' AND auth_value=2;" 2>/dev/null || echo "0")

# Check camera permissions for Tailscale
tailscale_access=$($USE_SUDO sqlite3 "$TCC_DB" "SELECT COUNT(*) FROM access WHERE service='kTCCServiceCamera' AND (client='/usr/local/bin/tailscaled' OR client='/Users/{{ ansible_user }}/go/bin/tailscaled') AND auth_value=2;" 2>/dev/null || echo "0")

# Check camera permissions for Terminal
terminal_access=$($USE_SUDO sqlite3 "$TCC_DB" "SELECT COUNT(*) FROM access WHERE service='kTCCServiceCamera' AND client='com.apple.Terminal' AND auth_value=2;" 2>/dev/null || echo "0")

# Check camera permissions for SSH
ssh_access=$($USE_SUDO sqlite3 "$TCC_DB" "SELECT COUNT(*) FROM access WHERE service='kTCCServiceCamera' AND client='/usr/libexec/sshd-keygen-wrapper' AND auth_value=2;" 2>/dev/null || echo "0")

# Check camera permissions for ffmpeg binary (needed for CamGuard video recording)
ffmpeg_access=$($USE_SUDO sqlite3 "$TCC_DB" "SELECT COUNT(*) FROM access WHERE service='kTCCServiceCamera' AND client='/opt/homebrew/bin/ffmpeg' AND auth_value=2;" 2>/dev/null || echo "0")

# Check for shared memory files
shared_memory_exists=0
tracker_running=0
tracker_accessible=0

# Check if shared memory file exists
if [ -f "/tmp/cam.shm" ]; then
  shared_memory_exists=1
  
  # Check if Tracker process is running
  if pgrep -f "tracker/.venv/bin/python -m app" > /dev/null; then
    tracker_running=1
    
    # Check if Tracker's camera feed is accessible
    if curl -s -I http://localhost:8080/cam.jpg -m 1 | grep -q "200 OK"; then
      tracker_accessible=1
    fi
  fi
fi

# Output as JSON
echo "{\"api_access\": $api_access, \"tracker_access\": $tracker_access, \"setsid_access\": $setsid_access, \"nohup_access\": $nohup_access, \"bash_access\": $bash_access, \"tailscale_access\": $tailscale_access, \"terminal_access\": $terminal_access, \"ssh_access\": $ssh_access, \"ffmpeg_access\": $ffmpeg_access, \"shared_memory_exists\": $shared_memory_exists, \"tracker_running\": $tracker_running, \"tracker_accessible\": $tracker_accessible}"
