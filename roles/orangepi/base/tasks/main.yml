---
# OrangePi base configuration tasks

- name: Verify OrangePi platform
  block:
    - name: Check system architecture
      ansible.builtin.fail:
        msg: "This role requires ARM64 architecture"
      when: ansible_architecture not in ["aarch64", "arm64"]

    - name: Check distribution
      ansible.builtin.fail:
        msg: "This role requires Ubuntu or Debian"
      when: ansible_distribution not in ["Ubuntu", "Debian"]

    - name: Display OrangePi information
      ansible.builtin.debug:
        msg: |
          OrangePi Base Configuration:
          - Model: {{ orangepi_model }}
          - Architecture: {{ ansible_architecture }}
          - Distribution: {{ ansible_distribution }} {{ ansible_distribution_version }}
          - Kernel: {{ ansible_kernel }}

- name: Check current system state
  block:
    - name: Check installed packages
      ansible.builtin.package_facts:
        manager: auto

    - name: Check current kernel modules
      ansible.builtin.slurp:
        src: /proc/modules
      register: current_modules

    - name: Set optimization flags
      ansible.builtin.set_fact:
        packages_need_install: "{{ orangepi_base_packages | difference(ansible_facts.packages.keys()) | length > 0 }}"

- name: Update package cache
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
  become: true

- name: Install OrangePi base packages
  ansible.builtin.apt:
    name: "{{ orangepi_base_packages }}"
    state: present
  become: true
  when: packages_need_install

# GPIO and Hardware Configuration
- name: Configure GPIO and hardware access
  when: gpio_configuration.enabled
  block:
    - name: Create hardware access groups
      ansible.builtin.group:
        name: "{{ item }}"
        state: present
      loop:
        - "{{ gpio_configuration.gpio_group }}"
        - "{{ gpio_configuration.i2c_group }}"
        - "{{ gpio_configuration.spi_group }}"
      become: true

    - name: Add user to hardware access groups
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: "{{ gpio_configuration.gpio_group }},{{ gpio_configuration.i2c_group }},{{ gpio_configuration.spi_group }}"
        append: true
      become: true

    - name: Configure kernel modules for hardware access
      ansible.builtin.lineinfile:
        path: /etc/modules
        line: "{{ item }}"
        create: true
      loop: "{{ gpio_configuration.kernel_modules }}"
      become: true
      notify: reboot system

    - name: Create udev rules for GPIO access
      ansible.builtin.copy:
        content: |
          # OrangePi GPIO access rules
          SUBSYSTEM=="gpio", GROUP="{{ gpio_configuration.gpio_group }}", MODE="0664"
          SUBSYSTEM=="i2c-dev", GROUP="{{ gpio_configuration.i2c_group }}", MODE="0664"
          SUBSYSTEM=="spidev", GROUP="{{ gpio_configuration.spi_group }}", MODE="0664"
          # Camera devices
          SUBSYSTEM=="video4linux", GROUP="video", MODE="0664"
        dest: /etc/udev/rules.d/99-orangepi-hardware.rules
        mode: "0644"
      become: true
      notify: reload udev

# Power Management Configuration
- name: Configure power management
  when: power_management.enabled
  block:
    - name: Install power management tools
      ansible.builtin.apt:
        name:
          - cpufrequtils
          - thermald
          - fancontrol
          - lm-sensors
        state: present
      become: true

    - name: Configure CPU governor
      ansible.builtin.lineinfile:
        path: /etc/default/cpufrequtils
        line: 'GOVERNOR="{{ power_management.cpu_governor }}"'
        create: true
      become: true
      notify: restart cpufrequtils

    - name: Configure thermal management
      ansible.builtin.template:
        src: thermal-conf.xml.j2
        dest: /etc/thermald/thermal-conf.xml
        backup: true
      become: true
      when: power_management.thermal_management.enabled
      notify: restart thermald

# Display Configuration
- name: Configure display settings
  when: display_configuration.enabled
  block:
    - name: Configure console font
      ansible.builtin.lineinfile:
        path: /etc/default/console-setup
        regexp: "^FONTFACE="
        line: 'FONTFACE="{{ display_configuration.console_font }}"'
      become: true

    - name: Configure console blanking
      ansible.builtin.lineinfile:
        path: /etc/kbd/config
        regexp: "^BLANK_TIME="
        line: "BLANK_TIME={{ display_configuration.console_blanking }}"
        create: true
      become: true

    - name: Configure HDMI settings
      ansible.builtin.blockinfile:
        path: /boot/config.txt
        block: |
          # OrangePi Display Configuration
          hdmi_group=2
          hdmi_mode=82
          hdmi_drive=2
          disable_overscan=1
        marker: "# {mark} OrangePi Display Configuration"
        create: true
      become: true
      when: display_configuration.display_mode == "hdmi"
      notify: reboot system

# Storage Optimization
- name: Configure storage optimization
  when: storage_optimization.enabled
  block:
    - name: Configure filesystem mount options
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: "(\\s+ext4\\s+)defaults(\\s+)"
        replace: "\\1{{ storage_optimization.mount_options.ext4 }}\\2"
      become: true

    - name: Configure tmpfs for logs
      ansible.builtin.lineinfile:
        path: /etc/fstab
        line: "tmpfs /var/log tmpfs {{ storage_optimization.mount_options.ext4 }},size={{ storage_optimization.log_ram_size }} 0 0"
        create: true
      become: true
      when: storage_optimization.log_to_ram

    - name: Disable swap
      ansible.builtin.command: swapoff -a
      become: true
      when: not storage_optimization.swap.enabled
      failed_when: false

    - name: Remove swap from fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: ".*swap.*"
        state: absent
      become: true
      when: not storage_optimization.swap.enabled

# Network Optimization
- name: Configure network optimization
  when: network_optimization.enabled
  block:
    - name: Configure network interface optimization
      ansible.builtin.copy:
        content: |
          # OrangePi Network Optimization
          net.core.rmem_max = 16777216
          net.core.wmem_max = 16777216
          net.core.rmem_default = 65536
          net.core.wmem_default = 65536
          net.ipv4.tcp_rmem = 4096 87380 16777216
          net.ipv4.tcp_wmem = 4096 65536 16777216
          net.ipv4.tcp_congestion_control = bbr
        dest: /etc/sysctl.d/99-orangepi-network.conf
      become: true
      notify: reload sysctl

# Boot Optimization
- name: Configure boot optimization
  when: boot_optimization.enabled
  block:
    - name: Disable unnecessary services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: false
        state: stopped
      loop: "{{ boot_optimization.disable_services }}"
      become: true
      failed_when: false

    - name: Enable essential services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop: "{{ boot_optimization.enable_services }}"
      become: true

# Security Configuration
- name: Configure security settings
  when: security_settings.enabled
  block:
    - name: Install and configure UFW firewall
      ansible.builtin.apt:
        name: ufw
        state: present
      become: true

    - name: Configure UFW default policies
      community.general.ufw:
        policy: "{{ security_settings.firewall.default_policy }}"
        direction: incoming
      become: true

    - name: Configure UFW allowed ports
      community.general.ufw:
        rule: allow
        port: "{{ item }}"
      loop: "{{ security_settings.firewall.allowed_ports }}"
      become: true

    - name: Enable UFW
      community.general.ufw:
        state: enabled
      become: true

- name: Create OrangePi directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
  loop:
    - "/home/{{ ansible_user }}/orangead"
    - "/home/{{ ansible_user }}/orangead/logs"
    - "/home/{{ ansible_user }}/orangead/config"
    - "/home/{{ ansible_user }}/orangead/data"
  become: true

- name: Display OrangePi base configuration results
  ansible.builtin.debug:
    msg: |-
      OrangePi Base Configuration Completed:
      - Base packages: {{ 'Installed' if packages_need_install else 'Already installed' }}
      - GPIO/Hardware: {{ 'Configured' if gpio_configuration.enabled else 'Skipped' }}
      - Power management: {{ 'Configured' if power_management.enabled else 'Skipped' }}
      - Display: {{ 'Configured' if display_configuration.enabled else 'Skipped' }}
      - Storage: {{ 'Optimized' if storage_optimization.enabled else 'Skipped' }}
      - Network: {{ 'Optimized' if network_optimization.enabled else 'Skipped' }}
      - Boot: {{ 'Optimized' if boot_optimization.enabled else 'Skipped' }}
      - Security: {{ 'Configured' if security_settings.enabled else 'Skipped' }}
