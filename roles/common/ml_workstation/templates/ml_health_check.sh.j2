#!/bin/bash
# ML Workstation Health Check Script
# Generated by Ansible - oaAnsible ML Workstation Role

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

OASENTINEL_HOME="{{ oasentinel_install_dir }}"
VENV_PATH="{{ python_venv_dir }}"

echo -e "${BLUE}🔍 oaSentinel ML Workstation Health Check${NC}"
echo "=============================================="

# Check installation directory
echo -n "📁 Installation directory: "
if [ -d "$OASENTINEL_HOME" ]; then
    echo -e "${GREEN}✅ OK${NC}"
else
    echo -e "${RED}❌ MISSING${NC}"
    exit 1
fi

# Check virtual environment
echo -n "🐍 Python virtual environment: "
if [ -f "$VENV_PATH/bin/activate" ]; then
    echo -e "${GREEN}✅ OK${NC}"
else
    echo -e "${RED}❌ MISSING${NC}"
    exit 1
fi

# Activate virtual environment and run checks
cd "$OASENTINEL_HOME"
source "$VENV_PATH/bin/activate"

# Check Python packages
echo -n "📦 Core ML packages: "
python -c "
import sys
try:
    import torch
    import ultralytics
    import cv2
    import numpy as np
    from src.data_processing.crowdhuman import CrowdHumanProcessor
    print('✅ OK', end='')
except ImportError as e:
    print(f'❌ MISSING: {e}', end='')
    sys.exit(1)
" 2>/dev/null
if [ $? -eq 0 ]; then
    echo -e "${GREEN}${NC}"
else
    echo -e "${RED}${NC}"
fi

# Check hardware acceleration
echo -n "🚀 Hardware acceleration: "
python -c "
import torch
{% if ansible_os_family == 'Darwin' %}
if torch.backends.mps.is_available():
    print('✅ MPS Available', end='')
else:
    print('⚠️  MPS Not Available', end='')
{% else %}
if torch.cuda.is_available():
    print(f'✅ CUDA Available (GPUs: {torch.cuda.device_count()})', end='')
else:
    print('⚠️  CUDA Not Available', end='')
{% endif %}
" 2>/dev/null
echo -e "${NC}"

# Check disk space
echo -n "💾 Disk space: "
DISK_USAGE=$(df -h "$OASENTINEL_HOME" | awk 'NR==2 {print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -lt 90 ]; then
    echo -e "${GREEN}✅ OK (${DISK_USAGE}% used)${NC}"
else
    echo -e "${YELLOW}⚠️  WARNING (${DISK_USAGE}% used)${NC}"
fi

# Check memory
echo -n "🧠 Available memory: "
{% if ansible_os_family == 'Darwin' %}
MEMORY_GB=$(( $(sysctl -n hw.memsize) / 1024 / 1024 / 1024 ))
{% else %}
MEMORY_GB=$(( $(grep MemTotal /proc/meminfo | awk '{print $2}') / 1024 / 1024 ))
{% endif %}
if [ "$MEMORY_GB" -ge 8 ]; then
    echo -e "${GREEN}✅ OK (${MEMORY_GB}GB)${NC}"
else
    echo -e "${YELLOW}⚠️  WARNING (${MEMORY_GB}GB - 8GB+ recommended)${NC}"
fi

# Check data directories
echo -n "📊 Data directories: "
MISSING_DIRS=""
for dir in "data" "models" "logs"; do
    if [ ! -d "$OASENTINEL_HOME/$dir" ]; then
        MISSING_DIRS="$MISSING_DIRS $dir"
    fi
done

if [ -z "$MISSING_DIRS" ]; then
    echo -e "${GREEN}✅ OK${NC}"
else
    echo -e "${YELLOW}⚠️  Missing:$MISSING_DIRS${NC}"
fi

# Check CLI functionality
echo -n "🖥️  CLI functionality: "
python src/cli.py info > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo -e "${GREEN}✅ OK${NC}"
else
    echo -e "${RED}❌ ERROR${NC}"
fi

# System resource summary
echo ""
echo -e "${BLUE}📈 System Resources Summary${NC}"
echo "--------------------------------"

# CPU info
{% if ansible_os_family == 'Darwin' %}
echo "CPU: $(sysctl -n machdep.cpu.brand_string)"
{% else %}
echo "CPU: $(grep 'model name' /proc/cpuinfo | head -1 | cut -d: -f2 | xargs)"
{% endif %}
echo "Cores: {{ ansible_processor_vcpus }}"
echo "Memory: ${MEMORY_GB}GB"

# GPU info (if CUDA available)
{% if ansible_os_family != 'Darwin' %}
if command -v nvidia-smi >/dev/null 2>&1; then
    echo ""
    echo -e "${BLUE}🎮 GPU Information${NC}"
    nvidia-smi --query-gpu=name,memory.total,driver_version --format=csv,noheader,nounits | head -1
fi
{% endif %}

# Training recommendations
echo ""
echo -e "${BLUE}🎯 Training Recommendations${NC}"
echo "--------------------------------"
if [ "$MEMORY_GB" -ge 16 ]; then
    echo "✅ Recommended batch size: 16-32"
else
    echo "⚠️  Recommended batch size: 8-16 (limited memory)"
fi

{% if ansible_os_family == 'Darwin' %}
echo "✅ Use MPS device for training acceleration"
echo "✅ Optimize for Apple Silicon architecture"
{% else %}
if python -c "import torch; exit(0 if torch.cuda.is_available() else 1)" 2>/dev/null; then
    echo "✅ Use CUDA device for training acceleration"
    echo "✅ Mixed precision training recommended"
else
    echo "⚠️  CPU-only training (slower performance)"
fi
{% endif %}

echo ""
echo -e "${GREEN}🎉 Health check complete!${NC}"
echo "Use 'mlstatus' for quick status or 'mlcli info' for detailed information."