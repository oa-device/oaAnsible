---
#SPDX-License-Identifier: MIT-0
# tasks file for roles/macos/tracker

# No longer creating a separate user - using ansible_user instead

# Ensure required system packages are installed
- name: Ensure util-linux is installed
  community.general.homebrew:
    name: util-linux
    state: present
  register: util_linux_install
  become: true
  become_user: "{{ ansible_user }}"

- name: Debug util-linux installation
  ansible.builtin.debug:
    msg: "util-linux installation result: {{ util_linux_install }}"

# Ensure util-linux binaries are in PATH
- name: Add util-linux to shell profiles
  ansible.builtin.blockinfile:
    path: "{{ item }}"
    create: true
    marker: "# {mark} ANSIBLE MANAGED BLOCK - util-linux"
    block: |
      # Add util-linux to PATH
      export PATH="/opt/homebrew/opt/util-linux/bin:$PATH"
      export PATH="/opt/homebrew/opt/util-linux/sbin:$PATH"
      # For compilers
      export LDFLAGS="-L/opt/homebrew/opt/util-linux/lib"
      export CPPFLAGS="-I/opt/homebrew/opt/util-linux/include"
      export PKG_CONFIG_PATH="/opt/homebrew/opt/util-linux/lib/pkgconfig"
  loop:
    - "{{ ansible_user_dir }}/.zshrc"
    - "{{ ansible_user_dir }}/.bashrc"
    - "{{ ansible_user_dir }}/.bash_profile"
  become: true
  become_user: "{{ ansible_user }}"
  ignore_errors: true

# Create directory structure in ansible_user's home directory
- name: Ensure tracker directory exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/orangead/tracker"
    state: directory
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0755"
  become: true

- name: Ensure tracker data directory exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/orangead/tracker/data"
    state: directory
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0755"
  become: true

- name: Ensure tracker logs directory exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/orangead/tracker/logs"
    state: directory
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0755"
  become: true

- name: Ensure models directory exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/orangead/tracker/models"
    state: directory
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0755"
  become: true

# Check if tracker directory exists and is not empty
- name: Check if tracker directory exists
  ansible.builtin.stat:
    path: "{{ ansible_user_dir }}/orangead/tracker"
  register: tracker_dir
  become: true
  become_user: "{{ ansible_user }}"

# Check if git repository already exists
- name: Check if tracker repository exists
  ansible.builtin.stat:
    path: "{{ ansible_user_dir }}/orangead/tracker/.git"
  register: tracker_git_repo
  become: true
  become_user: "{{ ansible_user }}"

# Check if directory exists and is not empty
- name: Check if directory exists and has content
  ansible.builtin.shell: |
    set -o pipefail
    if [ -d "{{ ansible_user_dir }}/orangead/tracker" ] && [ "$(ls -A {{ ansible_user_dir }}/orangead/tracker)" ]; then
      echo "directory_has_content"
    else
      echo "directory_empty_or_missing"
    fi
  register: dir_content_status
  changed_when: false
  become: true
  become_user: "{{ ansible_user }}"

# Check if directory is a git repository
- name: Check if directory is a git repository
  ansible.builtin.shell: |
    set -o pipefail
    if [ -d "{{ ansible_user_dir }}/orangead/tracker/.git" ] && cd "{{ ansible_user_dir }}/orangead/tracker" && git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
      echo "is_git_repo"
    else
      echo "not_git_repo"
    fi
  register: git_repo_status
  changed_when: false
  become: true
  become_user: "{{ ansible_user }}"
  failed_when: false

# Backup and clean non-empty directory that is not a git repository
- name: Backup and clean non-empty directory that is not a git repository
  ansible.builtin.shell: |
    set -o pipefail
    BACKUP_DIR="{{ ansible_user_dir }}/orangead/tracker_backup_$(date +%Y%m%d_%H%M%S)"
    echo "Backing up existing files to $BACKUP_DIR"
    mkdir -p "$BACKUP_DIR"
    cp -R "{{ ansible_user_dir }}/orangead/tracker/"* "$BACKUP_DIR/" 2>/dev/null || true
    rm -rf "{{ ansible_user_dir }}/orangead/tracker"
    mkdir -p "{{ ansible_user_dir }}/orangead/tracker"
  become: true
  become_user: "{{ ansible_user }}"
  when: dir_content_status.stdout == "directory_has_content" and git_repo_status.stdout == "not_git_repo"
  register: backup_result
  changed_when: backup_result.stdout is search('Backing up existing files')

# Check disk space before operations
- name: Check available disk space
  ansible.builtin.shell: |
    set -o pipefail
    df -h {{ ansible_user_dir }}/orangead | awk 'NR==2 {print $4}'
  register: disk_space
  changed_when: false
  become: true
  become_user: "{{ ansible_user }}"

- name: Display available disk space
  ansible.builtin.debug:
    msg: "Available disk space: {{ disk_space.stdout }}"

# Ensure tracker directory exists and is empty if not a git repo
- name: Ensure tracker directory is in proper state for git operations
  ansible.builtin.shell: |
    set -o pipefail
    if [ "{{ git_repo_status.stdout }}" != "is_git_repo" ]; then
      if [ -d "{{ ansible_user_dir }}/orangead/tracker" ]; then
        # Directory exists but is not a git repo, clean it
        echo "Cleaning existing directory"
        rm -rf "{{ ansible_user_dir }}/orangead/tracker"
      fi
      # Create fresh directory
      mkdir -p "{{ ansible_user_dir }}/orangead/tracker"
      echo "Directory prepared for clone"
    else
      echo "Directory is already a git repo"
    fi
  register: dir_prep
  changed_when: dir_prep.stdout is search('Cleaning existing directory') or dir_prep.stdout is search('Directory prepared for clone')
  become: true
  become_user: "{{ ansible_user }}"

# Clone the tracker repository if it doesn't exist or was cleaned
- name: Clone oaTracker repository
  ansible.builtin.git:
    repo: "{{ tracker.repository_url }}"
    dest: "{{ ansible_user_dir }}/orangead/tracker"
    clone: true
    update: true
    force: false
  become: true
  become_user: "{{ ansible_user }}"
  when: git_repo_status.stdout == "not_git_repo" or dir_content_status.stdout == "directory_empty_or_missing"
  register: git_clone_result
  retries: 3
  delay: 5
  until: git_clone_result is success

# Update the tracker repository if it already exists
- name: Update oaTracker repository
  ansible.builtin.git:
    repo: "{{ tracker.repository_url }}"
    dest: "{{ ansible_user_dir }}/orangead/tracker"
    update: true
    force: false
  become: true
  become_user: "{{ ansible_user }}"
  when: git_repo_status.stdout == "is_git_repo"
  register: git_update_result

- name: Display git update status
  ansible.builtin.debug:
    msg: "{{ 'Repository updated: ' + git_update_result.after if git_update_result.changed else 'Repository already at latest version' }}"
  when: git_update_result is defined and git_update_result.changed is defined

# Set proper ownership
- name: Set proper ownership for tracker files
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/orangead/tracker"
    owner: "{{ ansible_user }}"
    group: staff
    recurse: true
  become: true

- name: Ensure specific directories have proper permissions
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0755"
  loop:
    - "{{ ansible_user_dir }}/orangead/tracker/logs"
    - "{{ ansible_user_dir }}/orangead/tracker/data"
  become: true

# Make sure start.sh script is executable
- name: Ensure start.sh script is executable
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/orangead/tracker/scripts/start.sh"
    state: file
    mode: "0755"
    owner: "{{ ansible_user }}"
    group: staff
  become: true

# Use standardized Python version from group_vars
- name: Set required Python version from group_vars
  ansible.builtin.set_fact:
    tracker_python_version: "{{ python.version }}"

- name: Debug required Python version
  ansible.builtin.debug:
    msg: "Using standardized Python version: {{ tracker_python_version }}"

# Check if required Python version is available in pyenv
- name: Check if required Python version is available in pyenv
  ansible.builtin.shell: |
    set -o pipefail
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    $PYENV_ROOT/bin/pyenv install --list | grep -E "^\s+{{ tracker_python_version }}$" || echo "not_found"
  register: python_version_available
  changed_when: false
  become: true
  become_user: "{{ ansible_user }}"

- name: Find closest available Python version if exact version not found
  ansible.builtin.shell: |
    set -o pipefail
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    # Extract major.minor version (e.g., 3.11 from 3.11.11)
    MAJOR_MINOR=$(echo {{ tracker_python_version }} | cut -d. -f1-2)
    # Find the latest available version for this major.minor
    $PYENV_ROOT/bin/pyenv install --list | grep -E "^\s+${MAJOR_MINOR}\.[0-9]+$" | tail -1 | xargs
  register: closest_python_version
  changed_when: false
  become: true
  become_user: "{{ ansible_user }}"
  when: python_version_available.stdout == "not_found"

- name: Set final Python version to use
  ansible.builtin.set_fact:
    final_python_version: >
      {%- if python_version_available.stdout != "not_found" -%} {{ tracker_python_version | trim }}{%- else -%} {{ closest_python_version.stdout | trim }}{%-
      endif -%}

- name: Debug final Python version
  ansible.builtin.debug:
    msg: "Will use Python version: {{ final_python_version }}"

# Note: uv installation is handled by the setup.sh script

# Run the setup.sh script to handle virtual environment and dependencies
- name: Make setup.sh executable
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/orangead/tracker/setup.sh"
    mode: "0755"
    owner: "{{ ansible_user }}"
    group: staff
  become: true

- name: Run setup.sh script to set up virtual environment and dependencies
  ansible.builtin.shell: |
    set -o pipefail
    cd {{ ansible_user_dir }}/orangead/tracker
    ./setup.sh
  register: setup_result
  changed_when: setup_result.stdout is search('Setup complete')
  become: true
  become_user: "{{ ansible_user }}"
  environment:
    PATH: "/opt/homebrew/bin:/opt/homebrew/sbin:{{ ansible_user_dir }}/.local/bin:{{ ansible_env.PATH }}"

- name: Display setup script output
  ansible.builtin.debug:
    msg: "{{ setup_result.stdout_lines }}"
  when: setup_result.stdout_lines is defined
# Note: uv installation and dependency management are handled by the setup.sh script
# Copy and run dependency verification script
- name: Copy dependency verification script
  ansible.builtin.copy:
    src: verify_dependencies.py
    dest: "{{ ansible_user_dir }}/orangead/tracker/verify_dependencies.py"
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0755"
  become: true

- name: Verify dependencies installation
  ansible.builtin.command: "{{ ansible_user_dir }}/orangead/tracker/.venv/bin/python {{ ansible_user_dir }}/orangead/tracker/verify_dependencies.py"
  register: dependency_verification
  changed_when: false
  become: true
  become_user: "{{ ansible_user }}"
  failed_when: false

- name: Display dependency verification results
  ansible.builtin.debug:
    var: dependency_verification.stdout_lines
  when: dependency_verification.stdout_lines is defined

# Configure oaTracker
- name: Template config.yaml
  ansible.builtin.template:
    src: config.yaml.j2
    dest: "{{ ansible_user_dir }}/orangead/tracker/config.yaml"
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0644"
  become: true

# Setup launchd service
- name: Ensure LaunchAgents directory exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/Library/LaunchAgents"
    state: directory
    mode: "0755"
    owner: "{{ ansible_user }}"
    group: staff
  become: true

- name: Template launchd service file
  ansible.builtin.template:
    src: com.orangead.tracker.plist.j2
    dest: "{{ ansible_user_dir }}/Library/LaunchAgents/com.orangead.tracker.plist"
    owner: "{{ ansible_user }}"
    group: staff
    mode: "0644"
  become: false
  register: launchd_service

- name: Reload tracker service when changed
  ansible.builtin.meta: flush_handlers
  when: launchd_service.changed
  notify:
    - Unload existing launchd service
    - Load launchd service
    - Start launchd service

# Additional verification and troubleshooting tasks
# Detect server port from config if available
- name: Check if config.yaml exists and extract server port
  ansible.builtin.shell: |
    set -o pipefail
    if [ -f {{ ansible_user_dir }}/orangead/tracker/config.yaml ]; then
      grep '^default_server_port:' {{ ansible_user_dir }}/orangead/tracker/config.yaml | awk '{print $2}' || echo "8080"
    else
      echo "8080"
    fi
  register: detected_server_port
  changed_when: false

- name: Wait for tracker service to start
  ansible.builtin.wait_for:
    port: "{{ detected_server_port.stdout.strip() }}"
    host: localhost
    delay: 5
    timeout: 30
  failed_when: false

- name: Check if tracker process is running
  ansible.builtin.shell: |
    set -o pipefail
    launchctl list | grep com.orangead.tracker || echo "Service not found"
  register: tracker_status
  changed_when: false

- name: Display tracker service status
  ansible.builtin.debug:
    msg: "Tracker service status: {{ tracker_status.stdout }}"

- name: Check tracker logs for any errors
  ansible.builtin.shell: |
    set -o pipefail
    if [ -f {{ ansible_user_dir }}/orangead/tracker/logs/tracker.err.log ]; then
      tail -10 {{ ansible_user_dir }}/orangead/tracker/logs/tracker.err.log
    else
      echo "No error log found"
    fi
  register: tracker_logs
  changed_when: false
  failed_when: false

- name: Display recent tracker errors (if any)
  ansible.builtin.debug:
    msg: "Recent tracker errors: {{ tracker_logs.stdout_lines }}"
  when: tracker_logs.stdout_lines is defined and tracker_logs.stdout_lines | length > 0
